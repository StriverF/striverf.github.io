[{"title":"Express+Vue+AMP+PWA项目模板使用说明","url":"/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/Express-Vue-AMP-PWA%E9%A1%B9%E7%9B%AE%E6%A8%A1%E6%9D%BF%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E.html","content":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>特点</p>\n<ul>\n<li>解决单页面应用(SPA)的SEO配置问题</li>\n<li>拥有可控的服务端中间件功能，服务端重定向，服务端打cookie等</li>\n<li>可在服务端根据前端需要组装数据供首屏渲染使用</li>\n<li>可方便开发AMP页面，并跟vue打包资源同时发布又区分明确的静态资源</li>\n<li>一键集成PWA功能，附带可用的pwa配置</li>\n<li>方便vue多页面入口配置，及打包资源分析等等<span id=\"more\"></span>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/pwa-link.jpg\"\n                      alt=\"pwa-link\"\n                ><br>包含技术点<br><a class=\"link\"   href=\"https://cli.vuejs.org/guide/installation.html\" >vue-cli3<i class=\"fas fa-external-link-alt\"></i></a>、<a class=\"link\"   href=\"http://expressjs.com/en/guide/routing.html\" >Express<i class=\"fas fa-external-link-alt\"></i></a>、<a class=\"link\"   href=\"https://amp.dev/documentation/guides-and-tutorials/?format=websites\" >AMP<i class=\"fas fa-external-link-alt\"></i></a>、<a class=\"link\"   href=\"https://developer.mozilla.org/zh-CN/docs/Web/Progressive_web_apps\" >PWA<i class=\"fas fa-external-link-alt\"></i></a>、<a class=\"link\"   href=\"http://nodejs.cn/api/process.html\" >Node.js<i class=\"fas fa-external-link-alt\"></i></a>、<a class=\"link\"   href=\"https://redis.io/\" >Redis<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n<p>项目地址<br><a class=\"link\"   href=\"https://github.com/StriverF/express-vue-amp-template\" >StriverF/express-vue-amp-template<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>项目运行效果<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/gifhome_1920x1773_40s.gif\"\n                      alt=\"gifhome_1920x1773_40s\"\n                ></p>\n<h2 id=\"模板项目使用介绍\"><a href=\"#模板项目使用介绍\" class=\"headerlink\" title=\"模板项目使用介绍\"></a>模板项目使用介绍</h2><h3 id=\"项目环境配置\"><a href=\"#项目环境配置\" class=\"headerlink\" title=\"项目环境配置\"></a>项目环境配置</h3><p>下载代码后进入项目目录安装依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h4 id=\"vue环境配置\"><a href=\"#vue环境配置\" class=\"headerlink\" title=\"vue环境配置\"></a>vue环境配置</h4><p>vue环境变量配置，在项目跟目录根据自己需求新增 <code>.env.local</code>文件，参照.env配置自己想要自定义的环境变量。具体vue-cli 环境变量介绍请看<a class=\"link\"   href=\"https://cli.vuejs.org/zh/guide/mode-and-env.html\" >官方文档<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>新建page入口，在<code>src/pages</code>目录下面新建文件夹，在新增文件夹下面新增 App.vue,index.html,router.js等其他文件即可，<code>vue.config.js</code>里面的pages配置会自动识别新增page目录。<br>具体配置代码如下,vue.config.js详细配置参考<a class=\"link\"   href=\"https://cli.vuejs.org/zh/config/\" >官方文档<i class=\"fas fa-external-link-alt\"></i></a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> pages = &#123;&#125;</span><br><span class=\"line\">glob.sync(<span class=\"string\">&#x27;./src/pages/**/index.js&#x27;</span>).forEach(<span class=\"function\"><span class=\"params\">path</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> chunk = path.split(<span class=\"string\">&#x27;./src/pages/&#x27;</span>)[<span class=\"number\">1</span>].split(<span class=\"string\">&#x27;/index.js&#x27;</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">  pages[chunk] = &#123;</span><br><span class=\"line\">    entry: path,</span><br><span class=\"line\">    template: <span class=\"string\">&#x27;./src/pages/&#x27;</span> + chunk + <span class=\"string\">&#x27;/index.html&#x27;</span>,</span><br><span class=\"line\">    filename: chunk + <span class=\"string\">&#x27;/index.html&#x27;</span>,</span><br><span class=\"line\">    chunks: [<span class=\"string\">&#x27;chunk-vendors&#x27;</span>, <span class=\"string\">&#x27;chunk-common&#x27;</span>, chunk]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>运行项目执行如下命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm run serve</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Node服务端环境配置\"><a href=\"#Node服务端环境配置\" class=\"headerlink\" title=\"Node服务端环境配置\"></a>Node服务端环境配置</h4><p>服务端环境变量配置，在<code>server</code>目录下面新建<code>.env</code>把<code>server/.env.example</code>文件里面的环境变量复制到<code>.env</code>文件，然后根据自己环境需要更改环境变量的值。</p>\n<p>本地https证书安全环境配置，更改<code>.env</code>的<code>SERVER_PROTOCOL</code>的值为<code>https</code>, （本地生成免费安全证书可以用<a class=\"link\"   href=\"https://github.com/FiloSottile/mkcert\" >mkcert<i class=\"fas fa-external-link-alt\"></i></a>, <a class=\"link\"   href=\"https://github.com/FiloSottile/mkcert\" >mkcert<i class=\"fas fa-external-link-alt\"></i></a>是用<a class=\"link\"   href=\"https://golang.org/\" >golang<i class=\"fas fa-external-link-alt\"></i></a>编写的证书生成工具）<br>需要把生成的证书文件.pem文件放入到<code>server/cert</code>目录。<br>配置.env的<code>PRIVATE_KEY_NAME</code>和<code>CERTIFICATE_NAME</code>环境变量值为<code>server/cert</code>目录下的文件名。</p>\n<p>服务端代码Debugger, 我们知道前端代码可以方便的再浏览器的开发者面板中进行断电调试，但是服务端的代码调试不能，因为服务端的代码不在浏览器执行。那么我这里推荐大家使用VSCode来配置Debugger<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/15744042522049.jpg\"\n                     \n                ><br>用VSCode打开项目，操作如上图步骤。会在<code>.vscode</code>目录生成launch.json配置文件，在配置文件配置如下配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用 IntelliSense 了解相关属性。 </span></span><br><span class=\"line\">  <span class=\"comment\">// 悬停以查看现有属性的描述。</span></span><br><span class=\"line\">  <span class=\"comment\">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class=\"line\">  <span class=\"string\">&quot;version&quot;</span>: <span class=\"string\">&quot;0.2.0&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;configurations&quot;</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;node&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;request&quot;</span>: <span class=\"string\">&quot;launch&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;启动Node服务&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;runtimeExecutable&quot;</span>: <span class=\"string\">&quot;nodemon&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;cwd&quot;</span>: <span class=\"string\">&quot;$&#123;workspaceFolder&#125;/server&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;program&quot;</span>: <span class=\"string\">&quot;$&#123;workspaceFolder&#125;/server/app.js&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;restart&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;console&quot;</span>: <span class=\"string\">&quot;integratedTerminal&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;internalConsoleOptions&quot;</span>: <span class=\"string\">&quot;neverOpen&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置完就可以按照下图步骤操作，就能启动服务并可以在服务端任意代码行号左侧点击打断点调试。<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/15744047509592.jpg\"\n                     \n                ></p>\n<h3 id=\"项目主要的脚本命令\"><a href=\"#项目主要的脚本命令\" class=\"headerlink\" title=\"项目主要的脚本命令\"></a>项目主要的脚本命令</h3><table>\n<thead>\n<tr>\n<th>脚本</th>\n<th>命令</th>\n<th>注意事项</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>运行开发环境</td>\n<td>npm run dev</td>\n<td>只是启动vue的开发环境</td>\n</tr>\n<tr>\n<td>启动服务端环境</td>\n<td>npm run start</td>\n<td>启动node服务端环境</td>\n</tr>\n<tr>\n<td>打包测试环境</td>\n<td>npm run build:test</td>\n<td>打包</td>\n</tr>\n<tr>\n<td>打包预发布环境</td>\n<td>npm run build:alpha</td>\n<td>打包</td>\n</tr>\n<tr>\n<td>打包生产环境</td>\n<td>npm run build:prod</td>\n<td>打包</td>\n</tr>\n</tbody></table>\n<h3 id=\"Express配合Vue-amp-AMP的注意事项\"><a href=\"#Express配合Vue-amp-AMP的注意事项\" class=\"headerlink\" title=\"Express配合Vue&amp;AMP的注意事项\"></a>Express配合Vue&amp;AMP的注意事项</h3><p>AMP的路由 <code>ampRoute.js</code> 使用的<code>ampMiddleware</code>设置了view engine 为ejs的渲染模板</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">req.app.set(<span class=\"string\">&#x27;views&#x27;</span>, <span class=\"string\">&#x27;./amp/views&#x27;</span>)</span><br><span class=\"line\"> req.app.set(<span class=\"string\">&#x27;view engine&#x27;</span>, <span class=\"string\">&#x27;ejs&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>而Vue的路由配置的是自定义渲染模板，根据在Vue打包模板里面配置的模板占位变量来从Node服务端注入相关自定义数据。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">req.app.engine(<span class=\"string\">&#x27;html&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">filePath, options, callback</span>) </span>&#123;</span><br><span class=\"line\">    fs.readFile(filePath, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, content</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> callback(err)</span><br><span class=\"line\">      <span class=\"keyword\">var</span> rendered = content</span><br><span class=\"line\">        .toString()</span><br><span class=\"line\">        .replace(<span class=\"string\">&#x27;##meta##&#x27;</span>, options.meta)</span><br><span class=\"line\">        .replace(<span class=\"string\">&#x27;##ampLink##&#x27;</span>, options.ampLink || <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">        .replace(<span class=\"string\">&#x27;&quot;##apiJonsContent##&quot;&#x27;</span>, options.apiJonsContent)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> callback(<span class=\"literal\">null</span>, rendered)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  req.app.set(<span class=\"string\">&#x27;views&#x27;</span>, <span class=\"string\">&#x27;./public&#x27;</span>)</span><br><span class=\"line\">  req.app.set(<span class=\"string\">&#x27;view engine&#x27;</span>, <span class=\"string\">&#x27;html&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>注意配置 .env的 redis server （需要安装<a class=\"link\"   href=\"https://redis.io/\" >Redis<i class=\"fas fa-external-link-alt\"></i></a>并启动Redis）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">REDIS_HOST&#x3D;127.0.0.1</span><br><span class=\"line\">REDIS_PORT&#x3D;6379</span><br><span class=\"line\">REDIS_PREFIX&#x3D;website_mobile_alpha</span><br></pre></td></tr></table></figure>\n<p>为了提升性能及减少服务器资源开销，在node服务端请求到数据后，最后根据参数及数据类型利用Redis缓存。正常情况请求一个API需要1000mm左右, 从Redis取数据低于10mm。</p>\n","categories":["开发","前端"],"tags":["vue","ios"]},{"title":"Express+Vue+AMP+PWA的项目架构","url":"/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/Express-Vue-AMP%E6%90%AD%E5%BB%BAnode%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B3%A8%E5%85%A5%E9%A6%96%E5%B1%8F%E6%B8%B2%E6%9F%93%E6%95%B0%E6%8D%AE%E7%9A%84%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84.html","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>Express+Vue+AMP搭建node服务端注入首屏渲染数据, Express+ejs组装<a class=\"link\"   href=\"https://amp.dev/documentation/?format=websites\" >AMP<i class=\"fas fa-external-link-alt\"></i></a>组件的项目架构<br>我做过的某个项目经历过以下5个项目架构形态</p>\n<ol>\n<li>Vue+PHP CI</li>\n<li>Vue+Nginx</li>\n<li>Vue+PHP</li>\n<li>Vue+Express</li>\n<li>Express+Vue+AMP+PWA</li>\n</ol>\n<p>具体架构变动看下面的思维导图</p>\n<span id=\"more\"></span>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84%E8%B0%83%E6%95%B4.png\"\n                      alt=\"网站项目架构调整\"\n                ></p>\n<h2 id=\"最终版项目架构（Express-Vue-AMP-PWA）介绍\"><a href=\"#最终版项目架构（Express-Vue-AMP-PWA）介绍\" class=\"headerlink\" title=\"最终版项目架构（Express+Vue+AMP+PWA）介绍\"></a>最终版项目架构（Express+Vue+AMP+PWA）介绍</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>为什么我把Express放在前面,而不是Vue+AMP+Express? 因为项目架构发展到这里，其实<a class=\"link\"   href=\"http://expressjs.com/\" >Express<i class=\"fas fa-external-link-alt\"></i></a>服务端框架已经占了主体，他可以分发管理部署Vue的静态资源以及AMP页面，以后也还有跟多可扩展性的可能。</p>\n<h3 id=\"Vue多页面应用\"><a href=\"#Vue多页面应用\" class=\"headerlink\" title=\"Vue多页面应用\"></a>Vue多页面应用</h3><p>Vue-Cli3配置多页面入口只需要配置vue.config.js文件里面的<a class=\"link\"   href=\"https://cli.vuejs.org/zh/config/\" >全局CLI配置<i class=\"fas fa-external-link-alt\"></i></a>里面的<a class=\"link\"   href=\"https://cli.vuejs.org/zh/config/#pages\" >pages参数<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>我们项目的多页面经历了多次调整</p>\n<ul>\n<li>第零阶段：最开始担心单页面首屏资源过大，使用了每个页面新建一个page入口，导致VueRouter基本不能用，完全没利用上路由懒加载。</li>\n<li>第一阶段：后面为了方便用<code>&lt;router-link to=&quot;/&quot;&gt;</code>逐渐改为一个单页面应用。</li>\n<li>第二阶段：后面觉得业务功能太多，怕影响单页面首屏加载的资源大小。后面按照业务功能模块分了8个页面入口。</li>\n<li>第三阶段：业务功能间业务关联密切，且交互需求上希望页面跳转加动画且最求更平滑的过渡，那多页面入口就不能较好的支持这些需求，经常遇到需要强制刷新页面切换入口的情况，而且入口匹配错误容易导致404bug。改为按照站点分多页面入口：商城站点入口、App原生及第三方落地页入口、社区站点入口。目前就还是这三个入口，三个入口不会任何的业务性关联，完全独立。这样商城网站的任何单页面交互就可以较好的支持，并且App落地页的入口总资源也相对更小。</li>\n</ul>\n<h3 id=\"Vue-Cli3项目架构\"><a href=\"#Vue-Cli3项目架构\" class=\"headerlink\" title=\"Vue-Cli3项目架构\"></a>Vue-Cli3项目架构</h3><p>最开始我们也是用Vue-cli2，后面发现Vue-cli3项目的结构更清晰合理，配置更简单，并且也可选择深度配置。所有选择从Vue-cli2升级到Vue-cli3，请参考我的另一篇博客<a href=\"https://www.patpat.site/%E5%BC%80%E5%8F%91/Vue-Cli2%E5%88%B0Vue-Cli3-Vue%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84%E5%8D%87%E7%BA%A7/cjzeb0o7900135ifyjg2fpe4u/\">Vue-Cli2到Vue-Cli3 Vue项目架构升级</a><br>Vue-CLI3的几个优势点</p>\n<ol>\n<li>目录结构更清晰.</li>\n<li>弃用之前的的build文件夹的build.js和webpack.prod.conf.js</li>\n<li>使用新的<a class=\"link\"   href=\"https://cli.vuejs.org/zh/config/\" >vue.config.js配置<i class=\"fas fa-external-link-alt\"></i></a>文件包含了之前的wepack配置项。</li>\n<li>支持插件集成和插件开发。（比如<a class=\"link\"   href=\"https://github.com/vuejs/vue-docs-zh-cn/blob/master/vue-cli-plugin-typescript/README.md\" >typeScript<i class=\"fas fa-external-link-alt\"></i></a> 、<a class=\"link\"   href=\"https://github.com/vuejs/vue-docs-zh-cn/blob/master/vue-cli-plugin-unit-mocha/README.md\" >mocha<i class=\"fas fa-external-link-alt\"></i></a>）</li>\n<li>可以通过 vue ui 命令运行图形化界面，在图形化界面上创建和管理项目</li>\n<li><a class=\"link\"   href=\"https://github.com/vuejs/vue-docs-zh-cn/blob/master/vue-cli-plugin-pwa/README.md\" >@vue/cli-plugin-pwa<i class=\"fas fa-external-link-alt\"></i></a>插件方式快速<a class=\"link\"   href=\"https://cli.vuejs.org/zh/config/#pwa\" >配置<i class=\"fas fa-external-link-alt\"></i></a>PWA应用,这样<a class=\"link\"   href=\"https://developers.google.com/web/tools/workbox\" >PWA<i class=\"fas fa-external-link-alt\"></i></a>的功能可以通过插件一键集成</li>\n</ol>\n<h3 id=\"Express-Node服务端路由\"><a href=\"#Express-Node服务端路由\" class=\"headerlink\" title=\"Express Node服务端路由\"></a>Express Node服务端路由</h3><p>为什么需要服务端路由？</p>\n<ol>\n<li>根据不同路由输出不同的预取数据</li>\n<li>不同路由模块使用不同业务中间件</li>\n<li>根据不同路由配置不同Vue多页面入口或AMP资源</li>\n</ol>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/15697440334352.jpg\"\n                     \n                ></p>\n<h3 id=\"Express-Node服务端中间件\"><a href=\"#Express-Node服务端中间件\" class=\"headerlink\" title=\"Express Node服务端中间件\"></a>Express Node服务端中间件</h3><p>服务端中间件能做什么？什么是中间件？<br>用2019杭州·云栖大会上的程序员吐槽大会的一段说明就是<br>“我有个同事是做中间件的，我知道中间件很重要，什么是中间件？无非就是有很多人需要找马老师对接业务，马老师很忙没空跟这么多人对接业务，为了考虑马老师繁忙和安全问题，然后就找了水域去跟那些人对接，而马老师就只跟水域对接。说的好听叫中间件，其实就是个太监”。<br>哈哈！！！大家有啥要吐槽的吗？</p>\n<p>举例：例如需要在进入服务端的每个路由之前做出移动端PC端的判断并重定向到对应的环境域名url上，或者是需要在所有路由匹配之前做出广告链接的重定向等业务逻辑。这个时候就需要一个全局的web中间件，在处理在路由匹配之前的业务。</p>\n<h3 id=\"Node服务端动态注入SEO相关数据到Html\"><a href=\"#Node服务端动态注入SEO相关数据到Html\" class=\"headerlink\" title=\"Node服务端动态注入SEO相关\b数据到Html\"></a>Node服务端动态注入SEO相关\b数据到Html</h3><p>大家都知道一个单页面应用的问题，就是不利于SEO搜索引擎的爬虫抓取对应路由页面的内容。因为单页面应用多个路由都是同一个HTML源码，根据前端js路由渲染不同页面内容。所有这个时候要优化ESO其实有多种方案。<br>跟多方案，请参考我之前的博客<a href=\"https://www.patpat.site/%E5%BC%80%E5%8F%91/VueJs%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%BA%94%E7%94%A8SEO%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/cjzeb0o7c001a5ifyu664lfwk/\">VueJs单页面应用SEO解决方案</a><br>目前项目用的是node服务端注入动态SEO相关参数的方案。<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/Express+Vue+AMP.png\"\n                      alt=\"Express+Vue+AMP\"\n                ></p>\n<p>可以看到上项目架构思维导图的 Express核心控制器及中间—&gt;Vue打包静态资源的部分, 这个关系里面就是在node服务请求到页面内容数据，并把SEO相关参数通过Ejs或其他html模板语法注入到即将to浏览器的HTML(在Vue打包的.html文件的基础上注入)里面。</p>\n<h3 id=\"Node服务端预取首屏渲染所需业务数据\"><a href=\"#Node服务端预取首屏渲染所需业务数据\" class=\"headerlink\" title=\"Node服务端预取首屏渲染所需业务数据\"></a>Node服务端预取首屏渲染所需业务数据</h3><p>单页面应用一般在主静态框架渲染完需要对不同的页面在浏览器端请求API异步拿到数据后再渲染内容到页面上。这个过程用户看到的体验是会有一个API请求Loading的过程。而且这个过程跟用户的网络情况有直接关系，如果页面首屏需要渲染的数据在服务端返回HTML文档的时候就直接包含在HTML源代码里面了，那前端到浏览器可以省掉请求首屏数据的API，整个速度体验可以提升1秒左右。因为在node服务端请求API拿数据不取决于用户的网络，一般服务的网络情况比较稳定，ndoe服务端还可以对请求的相同数据利用Redis或其他缓存工具进行缓存，这样在服务端请求数据的速度可以从之前的平均1000ms降低到平均10ms以内。</p>\n<h3 id=\"Express架构内增加AMP开发模块\"><a href=\"#Express架构内增加AMP开发模块\" class=\"headerlink\" title=\"Express架构内增加AMP开发模块\"></a>Express架构内增加AMP开发模块</h3><p><a class=\"link\"   href=\"https://amp.dev/documentation/?format=websites\" >AMP<i class=\"fas fa-external-link-alt\"></i></a>是什么?<br><a class=\"link\"   href=\"https://amp.dev/documentation/?format=websites\" >AMP<i class=\"fas fa-external-link-alt\"></i></a>是Google主导的一个开源的网页性能优化组件库，我更多的认为AMP其实是为网站性能优化定制的一套规则，它有很多规则限制，不能自定义js代码，要使用组件必须按照规则来使用，避免制造出影响网页性能的代码。</p>\n<p><a class=\"link\"   href=\"https://amp.dev/documentation/?format=websites\" >AMP<i class=\"fas fa-external-link-alt\"></i></a>为什么要选择<a class=\"link\"   href=\"https://amp.dev/documentation/?format=websites\" >AMP<i class=\"fas fa-external-link-alt\"></i></a>他有什么优势？</p>\n<ol>\n<li><a class=\"link\"   href=\"https://amp.dev/documentation/?format=websites\" >AMP<i class=\"fas fa-external-link-alt\"></i></a>的静态页面会被Google收录并享受免费cdn服务。</li>\n<li><a class=\"link\"   href=\"https://amp.dev/documentation/?format=websites\" >AMP<i class=\"fas fa-external-link-alt\"></i></a>在Google的搜索结果页具有优先展示优势（虽然Google官方说并没特殊优先级，但是实际效果是确实会带来更多优质自然流量）</li>\n<li>在Google搜索结果页提前预加载你的AMP页面，这样在结果页面点击打开你的<a class=\"link\"   href=\"https://amp.dev/documentation/?format=websites\" >AMP<i class=\"fas fa-external-link-alt\"></i></a>页面能有秒开的体验，因为不需要重新加载页面资源。</li>\n<li><a class=\"link\"   href=\"https://amp.dev/documentation/?format=websites\" >AMP<i class=\"fas fa-external-link-alt\"></i></a>网页加载速度更快，性能更稳定。</li>\n</ol>\n<h2 id=\"总结及Demo代码分享\"><a href=\"#总结及Demo代码分享\" class=\"headerlink\" title=\"总结及Demo代码分享\"></a>总结及Demo代码分享</h2><p>前端项目架构并不是越复杂越好，并不是用最前沿的框架就是最好，最合适自己的业务的才是最好的，然后在能支持其现在的业务的基础上，再考虑一下明天的业务扩展，考虑怎么样快速高效的支持”明天的扩展业务”。再进一步就是考虑怎么样能够高效开发维护，并提高网站性能，给用户提供极致的用户体验。</p>\n<p>Express+Vue+AMP架构的模板代码地址：<a class=\"link\"   href=\"https://github.com/StriverF/express-vue-amp-template\" >StriverF/express-vue-amp-template<i class=\"fas fa-external-link-alt\"></i></a></p>\n","categories":["开发","前端"],"tags":["vue","node","express","vue-cli3"]},{"title":"IOS APP 电商平台项目架构重构-Swift语言(二)","url":"/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/App/IOS-APP-%E7%94%B5%E5%95%86%E5%B9%B3%E5%8F%B0%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84%E9%87%8D%E6%9E%84-Swift%E8%AF%AD%E8%A8%80-%E4%BA%8C.html","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>进几年新语言的浪潮都比较猛烈，服务端的的<a class=\"link\"   href=\"https://golang.org/doc/\" >Golang<i class=\"fas fa-external-link-alt\"></i></a>, <a class=\"link\"   href=\"https://deno.land/\" >Deno<i class=\"fas fa-external-link-alt\"></i></a>。安卓的<a class=\"link\"   href=\"https://www.kotlincn.net/docs/reference/\" >Kotlin<i class=\"fas fa-external-link-alt\"></i></a>，IOS的<a class=\"link\"   href=\"https://swift.org/documentation/\" >Swift<i class=\"fas fa-external-link-alt\"></i></a>。<br>这些新语言共同的优势都是运算性能更高，代码更简洁。让人难以抗拒，弱点是新语言技术社区不成熟，开源库较少，但是经过这几年的沉淀，这些问题也渐渐不再明显。由 Apple 创建，Swift 是当今发展最快的编程语言。作为著名的 Objective-C 的替代品，Swift 拥有大量优势，使其在iOS 开发中处于领先地位。</p>\n<span id=\"more\"></span>\n\n\n<h1 id=\"App项目重构语言选择\"><a href=\"#App项目重构语言选择\" class=\"headerlink\" title=\"App项目重构语言选择\"></a>App项目重构语言选择</h1><ul>\n<li><input disabled=\"\" type=\"checkbox\"> Objective-C</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> Swift<br>先说我的结论，我选Swift。<br>为什么？下面是我的理由。</li>\n</ul>\n<h2 id=\"Swift和Objective-C的联系\"><a href=\"#Swift和Objective-C的联系\" class=\"headerlink\" title=\"Swift和Objective-C的联系\"></a>Swift和Objective-C的联系</h2><p>Swift和Objective-C共用一套运行时环境，Swift的类型可以桥接到Objective-C</p>\n<h2 id=\"Swift比Objective-C有什么优势？\"><a href=\"#Swift比Objective-C有什么优势？\" class=\"headerlink\" title=\"Swift比Objective-C有什么优势？\"></a>Swift比Objective-C有什么优势？</h2><ol>\n<li>Swift容易阅读和编写，语法和文件结构简易化。</li>\n<li>Swift更易于维护，文件分离后结构更清晰。</li>\n<li>Swift更加安全，它是类型安全的语言。</li>\n<li>Swift代码更少，简洁的语法，可以省去大量冗余代码。</li>\n<li>Swift速度更快，运算性能更高。</li>\n<li>Swift构建速度更快，且打包资源大小更小。</li>\n<li>Swift是一个开源项目，拥有庞大的开发社区。</li>\n<li>Swift有更好的内存管理。</li>\n<li>Swift支持动态库。</li>\n</ol>\n<h3 id=\"Swift更快\"><a href=\"#Swift更快\" class=\"headerlink\" title=\"Swift更快\"></a>Swift更快</h3><p>现代技术需要高速的性能，而Swift完全满足了这种需求。根据大量测试，它在 FFT 和 Mandelbrot 算法方面显示出与 C++ 几乎相同的性能。早在 2015 年就发现 Xcode 6.3 beta 提高了 GEMM 算法的性能。</p>\n<p>考虑到 Swift 仍然是一门年轻的编程语言，越来越多的增强功能即将推出。每个人都在谈论这个工具的未来的原因很简单，因为 Swift 正在快速开发语言。它的潜力是不可否认的，而 Objective-C 显示出更糟糕的结果。</p>\n<p>根据 Apple 的研究，Objective-C 与 Swift 的速度比较：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16268399371021.png\"\n                      alt=\"根据 Apple 的研究，Objective-C 与 Swift 的速度比较\"\n                ></p>\n<h3 id=\"Swift更安全\"><a href=\"#Swift更安全\" class=\"headerlink\" title=\"Swift更安全\"></a>Swift更安全</h3><p>还记得 Objective-C 中的 nil 指针变量（未初始化）将表达式变为无操作并导致应用程序崩溃吗？使用 Swift 时您可以忘记这个问题。它的设计考虑了安全性，并且每次编写错误代码时都会产生编译器错误。这意味着可以在开发阶段修复所有错误，而无需随后查看整个代码。不会给客户带来不好的惊喜。</p>\n<h3 id=\"Swift更易于阅读和编写\"><a href=\"#Swift更易于阅读和编写\" class=\"headerlink\" title=\"Swift更易于阅读和编写\"></a>Swift更易于阅读和编写</h3><p>Swift 变得如此流行的原因之一是这种编程语言的简单语法。这一事实使代码更易于阅读和编写。另一方面，Objective-C 需要大量符号、分号来结束行、“if”或“else”语句中的条件表达式周围的括号等。Swift 没有这些。相反，它在括号内使用逗号分隔的参数列表。</p>\n<p>此外，实现任何选项是 Swift 需要编写比 Objective-C 语言更少的代码字符串，从而避免额外的错误，从而使代码更简洁。因此，与 Objective-C 相比，开发人员完成任务所需的时间更少。 </p>\n<p>Swift 类似于自然英语，对于使用 Java、JavaScript、Python、C# 和 C++ 的编码人员来说更容易理解。他们可以轻松地将用 Swift 编写的代码片段应用到您拥有的现有工具链中。  </p>\n<h3 id=\"Swift-有更好的内存管理\"><a href=\"#Swift-有更好的内存管理\" class=\"headerlink\" title=\"Swift 有更好的内存管理\"></a>Swift 有更好的内存管理</h3><p>Objective-C 的问题之一是 ARC（自动引用计数），它在 Cocoa API 和面向对象的代码中得到支持。但是，该代码不适用于过程 C 代码和诸如 Core Graphics 之类的 API。这导致了巨大的内存泄漏。</p>\n<p>Swift 通过使用过程和面向对象的代码路径使 ARK 完整，从而解决了这个问题。现在编码人员可以专注于应用程序逻辑及其功能，而不是管理应用程序内的内存。</p>\n<h3 id=\"Swift-支持动态库\"><a href=\"#Swift-支持动态库\" class=\"headerlink\" title=\"Swift 支持动态库\"></a>Swift 支持动态库</h3><p>正如我们上面提到的，Swift 是一种开发速度非常快的语言，但它也允许您在新的 Swift 版本到来时立即更新您的应用程序。这是可能的，因为使用了与 iOS 8 一起提供的动态库。以前，静态库更新是与新 iOS 版本等重大更新一起进行的。</p>\n<p>就其而言，动态库允许将代码段直接连接到应用程序。此功能有助于使您的项目保持最新状态，减少应用程序的初始大小，加快外部库的加载速度并最大限度地减少加载新内容所需的时间。</p>\n<p>在 Swift 中实现动态库是 Apple 如何专注于使 iOS 生态系统响应更快并为其用户提供扩展性能的另一个例子。  </p>\n<h3 id=\"Swift-是一个开源项目\"><a href=\"#Swift-是一个开源项目\" class=\"headerlink\" title=\"Swift 是一个开源项目\"></a>Swift 是一个开源项目</h3><p>作为一个开源项目，Swift 为其用户提供了额外的优势，其中之一是减少了 Objective-C 中常见的名称冲突。</p>\n<p>Swift 的另一个制胜点是庞大的开发社区，随时准备增强 iOS 开发语言。Apple 成功地为使用 Swift 作为iOS 开发主要语言的开发人员带来了最佳的客户体验，并提供了影响其未来的可能性。</p>\n<h2 id=\"Swift目前存在的缺点\"><a href=\"#Swift目前存在的缺点\" class=\"headerlink\" title=\"Swift目前存在的缺点\"></a>Swift目前存在的缺点</h2><p>社区的开源项目比OC相对偏少，但是经过这几年的沉淀也绝对不算少。<br>对ios低于ios11以下版本不兼容，对于还有兼容4年前的ios系统的项目就不建议使用。</p>\n<h2 id=\"那么Objective-C呢？\"><a href=\"#那么Objective-C呢？\" class=\"headerlink\" title=\"那么Objective-C呢？\"></a>那么Objective-C呢？</h2><p>在 2014 年 Swift 发布之前，Objective-C 是一种广泛使用的编程语言。可悲但真实，现在它无处可去，专家预测它不会收到任何重大更新。原因很简单：Swift 语言已经包含了 Objective-C 的所有解决方案。此外，还有许多 Objective-C 缺乏的进步。尽管 Objective-C 可能会借用 Swifts 的一些新特性，但它永远不会那么前沿。</p>\n<p>Objective-C 的另一个弱点是它的安全级别。如前所述，Swift 被认为更安全。由于数据保护是大多数用户最关心的问题，开发人员也不能忽视这一点。</p>\n<p>最重要的是，与 Swift 不同，不可能使用 Objective-C 以交互方式开发应用程序。这对每个软件工程师来说都是一个很大的缺点，它会对开发过程产生相当负面的影响。</p>\n<p>自从 Apple 发布 Xcode 6.3 以来，修复了 Apple Bug Report 实用程序中的许多恼人的错误，Objective-C 没有机会追赶 Swift。</p>\n<h1 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h1><p>虽然大多数现有的 iOS 应用程序都是用 Objective-C 编写的，但现在是时候考虑将它们转移到 Swift 上了。在更新方面，Swift 允许 iOS 开发人员在短时间内处理任何更改。这一切都归功于它更平易近人和负责任的性质。</p>\n","categories":["开发","前端","App"],"tags":["ios","swift","ios架构"]},{"title":"IOS APP 电商平台项目架构重构-架构演进(一)","url":"/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/App/IOS-APP-%E7%94%B5%E5%95%86%E5%B9%B3%E5%8F%B0%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84-%E6%9E%B6%E6%9E%84%E6%BC%94%E8%BF%9B%E7%9A%84%E6%9C%AC%E8%B4%A8-%E4%B8%80.html","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>过去两年对电商平台的web端项目进行了2次重大重构</p>\n<ol>\n<li>php-Laravel前后端混合开发项目架构改为前后端分离，后端php,前端vue框架单页面应用—解决前后端研发配合的高耦合度问题。</li>\n<li>vue框架升级，利用vue-cli3构建SSR服务端渲染项目，Node服务框架Express—解决了SEO优化局限性问题，以及移动端首屏渲染性能问题。</li>\n</ol>\n<p>以上两次重构都一定程度上提升了项目代码的可扩展性和可维护性，提升了研发团队的开发效率，提升了系统稳定性。<br>那接下来如果要对IOS APP做重构，我们先聊聊架构的演进的本质。</p>\n<span id=\"more\"></span>\n\n\n<h1 id=\"工程架构演进本质\"><a href=\"#工程架构演进本质\" class=\"headerlink\" title=\"工程架构演进本质\"></a>工程架构演进本质</h1><p>快速的业务发展对技术支撑提出了更高的要求，为了保障敏捷的业务开发，提升跨团队的协同合作效率，提高本地研发和 CI/CD 效率，iOS App工程架构在不同的阶段需要进行不同的技术方案的改进，满足合理的架构演化，同时又不影响正常的业务迭代速度。</p>\n<p>架构演进的本质是为了提高研发效率，提高代码稳定性和保证代码质量。架构要解决的问题是如何组织代码。</p>\n<p>合理的架构设计可以解决大型项目跨团队协作分工和多业务线并行开发的效率问题。抖音工程代码从一开始就采用了组件化思路，依赖管理工具是定制版的 Cocoapods。</p>\n<p>什么时候重构？很多时候，研发会因为各种原因，推迟重构，直到这件事情被一拖再拖，从重要而不紧急的事情变成了既重要也紧急的事情。重构需要提前计划，不要赶时间。大部分重构都是代码债务的偿清的过程，赶时间容易积累新的债务。而对于一个突发的重构需求，其实已经错过了解决问题的最佳时机。小步慢跑，尽可能保证肉眼可见的正确性。大多数时候，我们很难找到整块时间重构，这往往意味着你可能会相对分散地修改到正常需求开发不会触碰的逻辑，这种情形对于 QA 同学来说是非常容易发生误判的——即使和对方同步过，但双方仍然可能对问题的影响面判断不一致。</p>\n<h1 id=\"单兵收敛重点\"><a href=\"#单兵收敛重点\" class=\"headerlink\" title=\"单兵收敛重点\"></a>单兵收敛重点</h1><p>有些复杂的事情必须要有单点管控，人越多越乱，因为很多重构必须要有全局观，才能抽象出比较符合项目实际情况的方案。<br>可能的场景：</p>\n<ul>\n<li>组件化：接口打沉，代码规范</li>\n<li>代码逻辑收敛：大量散装代码的封箱</li>\n<li>不易切分的大块修改：复杂模块线程模型更新</li>\n</ul>\n<p>这可能是重构里面最棘手情况了，解法需要看实际情况来决定，没有定式。所以需要把握节奏<br>重构往往影响比较大，需要综合考虑和 QA 同学的协作。</p>\n<h1 id=\"团队杠杆\"><a href=\"#团队杠杆\" class=\"headerlink\" title=\"团队杠杆\"></a>团队杠杆</h1><p>在实际工作中，劣币逐良币是非常常见的：一旦烂代码成为普遍现象，写好的模块的成本就会变得非常高——这好比在浮沙筑高台。<br>这里涉及到两个关键问题：</p>\n<ul>\n<li>治理已经比较乱的模块</li>\n<li>保持重构的结果不滑坡</li>\n</ul>\n<p>从治理的角度来说，一个足够有经验的研发，如果被给予充裕的处理时间，往往是能够比较好的完成任务的</p>\n<p>但是这里仍然有几个关键因素可能会影响最终结果，按重要性：</p>\n<ul>\n<li>人——这个人必须足够了解过去的需求，以及用来填坑的代码，需要确保重构完的代码必须能够等效达到之前的体验。</li>\n<li>时间——如果要项目停下来等重构完成，是一个过于奢侈的要求。</li>\n<li>务实——重构容易过于理想化，比如为了代码的整洁，某些回调会被提前或者压后，类似的场景还有网络请求等。</li>\n</ul>\n<p>上面这些问题需要执行重构的人和使用方达成共识，才不会产生过于理想主义的问题；不过，这里没有标准答案，下面这条建议是很多即便很优秀的研发也容易弄反的东西。</p>\n<p>如果模块内部设计优雅和模块外部使用简洁发生冲突的时候，优先保证模块外部使用简洁——对复杂度的封装既是模块本身存在的意义，也是代码治理的目的。</p>\n","categories":["开发","前端","App"],"tags":["ios","swift","ios架构"]},{"title":"Js Console报错排查及解决方案","url":"/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/Js-Console%E6%8A%A5%E9%94%99%E6%8E%92%E6%9F%A5%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0.html","content":"<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/201307241901111966.jpg\"\n                      class=\"img-topic\" /\n                >\n# 前言\n开发过程中有时经常看到一个报错，脑海中浮现出曾经遇到过这样的错误，并也经历过解决方案，但是突然就说想不起来之前是怎么解决的，所以这里记录日常开发中Chrome浏览器Console报错排查及解决方案&思路\n<span id=\"more\"></span>\n\n<h2 id=\"Console报错：Unchecked-runtime-lastError-The-message-port-closed-before-a-response-was-received\"><a href=\"#Console报错：Unchecked-runtime-lastError-The-message-port-closed-before-a-response-was-received\" class=\"headerlink\" title=\"Console报错：Unchecked runtime.lastError: The message port closed before a response was received.\"></a>Console报错：<font color=red>Unchecked runtime.lastError: The message port closed before a response was received.</font></h2><h3 id=\"中文翻译：不受控制的运行时。lastError-消息端口在接收到响应之前关闭。\"><a href=\"#中文翻译：不受控制的运行时。lastError-消息端口在接收到响应之前关闭。\" class=\"headerlink\" title=\"中文翻译：不受控制的运行时。lastError:消息端口在接收到响应之前关闭。\"></a>中文翻译：不受控制的运行时。lastError:消息端口在接收到响应之前关闭。</h3><h3 id=\"原因：this-does-not-look-like-a-Caddy-error-Caddy-errors-would-not-be-rendered-client-side-是一个浏览器扩展问题，或者是由于您的页面上加载了一些JS。这里没有任何东西指向凯蒂的问题。参考链接\"><a href=\"#原因：this-does-not-look-like-a-Caddy-error-Caddy-errors-would-not-be-rendered-client-side-是一个浏览器扩展问题，或者是由于您的页面上加载了一些JS。这里没有任何东西指向凯蒂的问题。参考链接\" class=\"headerlink\" title=\"原因：this does not look like a Caddy error. (Caddy errors would not be rendered client-side.)  是一个浏览器扩展问题，或者是由于您的页面上加载了一些JS。这里没有任何东西指向凯蒂的问题。参考链接\"></a>原因：this does not look like a Caddy error. (Caddy errors would not be rendered client-side.)  是一个浏览器扩展问题，或者是由于您的页面上加载了一些JS。这里没有任何东西指向凯蒂的问题。<a class=\"link\"   href=\"https://stackoverflow.com/questions/43154963/promise-error-the-message-port-closed-before-a-reponse-was-received\" >参考链接<i class=\"fas fa-external-link-alt\"></i></a></h3><p>If that is not solving your issue. You could try disabling all the chrome extensions and check if that solve your issue.<br>To disable you could type the below code in chrome url:<br>chrome://extensions/<br>or could go on<br>Settings &gt; Extensions<br>After that you could enable each extensions and check the culprit.</p>\n<h3 id=\"解决方案：检查你浏览器安装的扩展程序，一个个关闭扩展程序看看是那个扩展程序影响的。\"><a href=\"#解决方案：检查你浏览器安装的扩展程序，一个个关闭扩展程序看看是那个扩展程序影响的。\" class=\"headerlink\" title=\"解决方案：检查你浏览器安装的扩展程序，一个个关闭扩展程序看看是那个扩展程序影响的。\"></a>解决方案：检查你浏览器安装的扩展程序，一个个关闭扩展程序看看是那个扩展程序影响的。</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/15506477794913.jpg\"\n                     \n                ></p>\n","categories":["开发","前端"],"tags":["js"]},{"title":"Node.js版本控制切换工具nvm","url":"/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/Node-js%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%88%87%E6%8D%A2%E5%B7%A5%E5%85%B7nvm.html","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>node版本号更新到最新后，有时候去run一些老项目会报错,大部分原因是node版本过高的原因。这个时候难道又卸载node去装老版本，要run新项目又去装新版本吗？<br>不！！！我用nvm工具来灵活切换node版本。<br>比如之前装的<a class=\"link\"   href=\"https://hexo.io/zh-cn/docs/?_blank\" >Hexo<i class=\"fas fa-external-link-alt\"></i></a>,在更新node版本到8.13.0后 hexo 所有命令都无效了 报错：command not found: hexo<br>这个就是因为node版本过高导致<a class=\"link\"   href=\"https://hexo.io/zh-cn/docs/?_blank\" >Hexo<i class=\"fas fa-external-link-alt\"></i></a> 命令失效，这个时候我们就可以在Hexo项目文件目录下<br>    <code>nvm use v7.1.0 </code></p>\n<span id=\"more\"></span>\n\n<h1 id=\"安装NVM\"><a href=\"#安装NVM\" class=\"headerlink\" title=\"安装NVM\"></a>安装<a class=\"link\"   href=\"https://github.com/creationix/nvm#install-script?_blank\" >NVM<i class=\"fas fa-external-link-alt\"></i></a></h1><p>可以使用curl安装<br><code>curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash</code><br>也可以使用Wget安装<br><code>wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash</code></p>\n<p>该脚本克隆NVM存储库<del>/.nvm，并添加源线到您的个人资料（</del>/.bash_profile，<del>/.zshrc，</del>/.profile，或~/.bashrc）。<br><strong>注意</strong>：如果存在环境变量$XDG_CONFIG_HOME，则会将nvm文件放在那里。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">export NVM_DIR&#x3D;&quot;$HOME&#x2F;.nvm&quot;</span><br><span class=\"line\">[ -s &quot;$NVM_DIR&#x2F;nvm.sh&quot; ] &amp;&amp; . &quot;$NVM_DIR&#x2F;nvm.sh&quot; # This loads nvm</span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：您可以添加–no-use到上述脚本（… nvm.sh –no-use）的末尾以推迟使用，nvm直到您手动执行use。</p>\n<p>您可以使用自定义安装源，目录，简介，以及版本NVM_SOURCE，NVM_DIR，PROFILE，和NODE_VERSION变量。例如：curl … | NVM_DIR=”path/to/nvm”。确保NVM_DIR不包含尾部斜杠。</p>\n<h2 id=\"验证安装\"><a href=\"#验证安装\" class=\"headerlink\" title=\"验证安装\"></a>验证安装</h2><p>要验证是否已安装nvm，请执行以下操作：<br><code>command -v nvm</code></p>\n<h3 id=\"重要笔记\"><a href=\"#重要笔记\" class=\"headerlink\" title=\"重要笔记\"></a>重要笔记</h3><p>如果您运行的系统没有预先打包的二进制文件，这意味着您要从其源代码安装nodejs或io.js，则需要确保您的系统具有C ++编译器。对于OS X，Xcode可以工作，对于基于Debian / Ubuntu的GNU / Linux，build-essential和libssl-dev包工作。</p>\n<h1 id=\"使用NVM\"><a href=\"#使用NVM\" class=\"headerlink\" title=\"使用NVM\"></a>使用<a class=\"link\"   href=\"https://github.com/creationix/nvm#usage?_blank\" >NVM<i class=\"fas fa-external-link-alt\"></i></a></h1><h3 id=\"要下载，编译和安装最新版本的node节点，请执行以下操作\"><a href=\"#要下载，编译和安装最新版本的node节点，请执行以下操作\" class=\"headerlink\" title=\"要下载，编译和安装最新版本的node节点，请执行以下操作\"></a>要下载，编译和安装最新版本的node节点，请执行以下操作</h3><p><code>nvm install node</code> # “node” is an alias for the latest version</p>\n<h3 id=\"安装特定版本的节点\"><a href=\"#安装特定版本的节点\" class=\"headerlink\" title=\"安装特定版本的节点\"></a>安装特定版本的节点</h3><p><code>nvm install 6.14.4</code> ＃或10.10.0,8.9.1等</p>\n<h3 id=\"在任何新的shell中只使用已安装的版本\"><a href=\"#在任何新的shell中只使用已安装的版本\" class=\"headerlink\" title=\"在任何新的shell中只使用已安装的版本\"></a>在任何新的shell中只使用已安装的版本</h3><p><code>nvm use node --version</code></p>\n<h3 id=\"切换已安装的node版本号\"><a href=\"#切换已安装的node版本号\" class=\"headerlink\" title=\"切换已安装的node版本号\"></a>切换已安装的node版本号</h3><p><code>nvm use v7.1.1</code></p>\n<h3 id=\"查看本地安装的node版本\"><a href=\"#查看本地安装的node版本\" class=\"headerlink\" title=\"查看本地安装的node版本\"></a>查看本地安装的node版本</h3><p><code>nvm ls</code></p>\n<h3 id=\"查看远端可安装的node版本\"><a href=\"#查看远端可安装的node版本\" class=\"headerlink\" title=\"查看远端可安装的node版本\"></a>查看远端可安装的node版本</h3><p><code>nvm ls-remote</code></p>\n<h3 id=\"要恢复PATH，您可以停用它\"><a href=\"#要恢复PATH，您可以停用它\" class=\"headerlink\" title=\"要恢复PATH，您可以停用它\"></a>要恢复PATH，您可以停用它</h3><p><code>nvm deactivate</code></p>\n<h3 id=\"要设置要在任何新shell中使用的默认节点版本，请使用别名“default”\"><a href=\"#要设置要在任何新shell中使用的默认节点版本，请使用别名“default”\" class=\"headerlink\" title=\"要设置要在任何新shell中使用的默认节点版本，请使用别名“default”\"></a>要设置要在任何新shell中使用的默认节点版本，请使用别名“default”</h3><p><code>nvm alias default node</code></p>\n","categories":["开发","前端"],"tags":["node","nvm"]},{"title":"React Native项目初始化问题记录及排查解决","url":"/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/React-Native%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%E5%8F%8A%E6%8E%92%E6%9F%A5%E8%A7%A3%E5%86%B3.html","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p><a class=\"link\"   href=\"https://reactnative.dev/\" >React Native<i class=\"fas fa-external-link-alt\"></i></a> 是一种生态活跃且成熟的现代跨平台解决方案，目前已经有很多大公司（FB, Tesla 等）正在使用React Native构建ios和安卓原生应用。那我们就来看看按照官方文档构建一个React Native项目有多简单。<br>我的环境配置：</p>\n<ul>\n<li>MacOS Big sur v11.2</li>\n<li>Node v15.12.0</li>\n<li>Cocoapods v1.8.4</li>\n<li>Xcode v12.5</li>\n<li>vsCode v1.56.0</li>\n</ul>\n<span id=\"more\"></span>\n\n<h1 id=\"创建项目React-Native\"><a href=\"#创建项目React-Native\" class=\"headerlink\" title=\"创建项目React Native\"></a>创建项目React Native</h1><p>按照官方文档，我们使用npx 脚本来创建React Native项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npx react-native init MyTestApp</span><br></pre></td></tr></table></figure>\n<p>执行脚本前面是顺利的，项目也创建成功了，但是项目内部的ios项目模块的pod install按照失败了。报错如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">✖ Installing CocoaPods dependencies (this may take a few minutes)</span><br><span class=\"line\">✖ Installing CocoaPods dependencies (this may take a few minutes)</span><br><span class=\"line\">error Error: Failed to install CocoaPods dependencies for iOS project, which is required by this template.</span><br><span class=\"line\">Please try again manually: &quot;cd .&#x2F;MyTestApp&#x2F;ios &amp;&amp; pod install&quot;.</span><br><span class=\"line\">CocoaPods documentation: https:&#x2F;&#x2F;cocoapods.org&#x2F;</span><br></pre></td></tr></table></figure>\n<p>pod install 按照失败的原因可能就比较多了，我先查看了一下pod –version得到我的pod版本好是1.8.4</p>\n<p>然后我就进入项目的MyTestApp/ios目录，做过ios都知道这个目录下面就是一个oc代码的一个原生ios项目的结构，有.xcodeproj 还有一个Podfile文件。<br>因为我们pod install还没成功，所以还没有.xcworkspace文件。<br>我尝试直接在这个ios项目的目录下面直接执行 <code>pod install</code>，得到报错如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">➜  ios pod install         </span><br><span class=\"line\">Analyzing dependencies</span><br><span class=\"line\"></span><br><span class=\"line\">――― MARKDOWN TEMPLATE ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――</span><br><span class=\"line\"></span><br><span class=\"line\">### Command</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;cocoapods&#x2F;1.8.4&#x2F;libexec&#x2F;bin&#x2F;pod install</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### Report</span><br><span class=\"line\"></span><br><span class=\"line\">* What did you do?</span><br><span class=\"line\"></span><br><span class=\"line\">* What did you expect to happen?</span><br><span class=\"line\"></span><br><span class=\"line\">* What happened instead?</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### Stack</span><br><span class=\"line\"></span><br><span class=\"line\">   CocoaPods : 1.8.4</span><br><span class=\"line\">        Ruby : ruby 2.6.3p62 (2019-04-16 revision 67580) [universal.x86_64-darwin20]</span><br><span class=\"line\">    RubyGems : 3.0.3</span><br><span class=\"line\">        Host : macOS 11.2 (20D64)</span><br><span class=\"line\">       Xcode : 12.5 (12E262)</span><br><span class=\"line\">         Git : git version 2.22.0</span><br><span class=\"line\">Ruby lib dir : &#x2F;System&#x2F;Library&#x2F;Frameworks&#x2F;Ruby.framework&#x2F;Versions&#x2F;2.6&#x2F;usr&#x2F;lib</span><br><span class=\"line\">Repositories : mafeng-bryant - git - https:&#x2F;&#x2F;github.com&#x2F;mafeng-Bryant&#x2F;Specs.git @ d5a4174277606abff4018d727701fdb8a3e3700a</span><br><span class=\"line\">               master - git - https:&#x2F;&#x2F;github.com&#x2F;CocoaPods&#x2F;Specs.git @ dc48fb42d4da9ff168194324f817416eea583a47</span><br><span class=\"line\">               pinterest - git - git@github.com:pinterest&#x2F;ios-pdk.git @ dc22537d7634a2fef6dbefc6917723d46ad2adfe</span><br><span class=\"line\">               trunk - CDN - https:&#x2F;&#x2F;cdn.cocoapods.org&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">### Plugins</span><br><span class=\"line\"></span><br><span class=\"line\">cocoapods-deintegrate : 1.0.4</span><br><span class=\"line\">cocoapods-plugins     : 1.0.0</span><br><span class=\"line\">cocoapods-search      : 1.0.0</span><br><span class=\"line\">cocoapods-stats       : 1.1.0</span><br><span class=\"line\">cocoapods-trunk       : 1.4.1</span><br><span class=\"line\">cocoapods-try         : 1.1.0</span><br><span class=\"line\"></span><br><span class=\"line\">### Podfile</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">require_relative &#39;..&#x2F;node_modules&#x2F;react-native&#x2F;scripts&#x2F;react_native_pods&#39;</span><br><span class=\"line\">require_relative &#39;..&#x2F;node_modules&#x2F;@react-native-community&#x2F;cli-platform-ios&#x2F;native_modules&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">platform :ios, &#39;10.0&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">target &#39;MyTestApp&#39; do</span><br><span class=\"line\">  config &#x3D; use_native_modules!</span><br><span class=\"line\"></span><br><span class=\"line\">  use_react_native!(</span><br><span class=\"line\">    :path &#x3D;&gt; config[:reactNativePath],</span><br><span class=\"line\">    # to enable hermes on iOS, change &#96;false&#96; to &#96;true&#96; and then install pods</span><br><span class=\"line\">    :hermes_enabled &#x3D;&gt; false</span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\">  target &#39;MyTestAppTests&#39; do</span><br><span class=\"line\">    inherit! :complete</span><br><span class=\"line\">    # Pods for testing</span><br><span class=\"line\">  end</span><br><span class=\"line\"></span><br><span class=\"line\">  # Enables Flipper.</span><br><span class=\"line\">  #</span><br><span class=\"line\">  # Note that if you have use_frameworks! enabled, Flipper will not work and</span><br><span class=\"line\">  # you should disable the next line.</span><br><span class=\"line\">  use_flipper!()</span><br><span class=\"line\"></span><br><span class=\"line\">  post_install do |installer|</span><br><span class=\"line\">    react_native_post_install(installer)</span><br><span class=\"line\">  end</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">### Error</span><br><span class=\"line\"></span><br><span class=\"line\">RuntimeError - [Xcodeproj] Unknown object version.</span><br><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;cocoapods&#x2F;1.8.4&#x2F;libexec&#x2F;gems&#x2F;xcodeproj-1.13.0&#x2F;lib&#x2F;xcodeproj&#x2F;project.rb:227:in &#96;initialize_from_file&#39;</span><br><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;cocoapods&#x2F;1.8.4&#x2F;libexec&#x2F;gems&#x2F;xcodeproj-1.13.0&#x2F;lib&#x2F;xcodeproj&#x2F;project.rb:112:in &#96;open&#39;</span><br><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;cocoapods&#x2F;1.8.4&#x2F;libexec&#x2F;gems&#x2F;cocoapods-1.8.4&#x2F;lib&#x2F;cocoapods&#x2F;installer&#x2F;analyzer.rb:1098:in &#96;block (2 levels) in inspect_targets_to_integrate&#39;</span><br><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;cocoapods&#x2F;1.8.4&#x2F;libexec&#x2F;gems&#x2F;cocoapods-1.8.4&#x2F;lib&#x2F;cocoapods&#x2F;installer&#x2F;analyzer.rb:1097:in &#96;each&#39;</span><br><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;cocoapods&#x2F;1.8.4&#x2F;libexec&#x2F;gems&#x2F;cocoapods-1.8.4&#x2F;lib&#x2F;cocoapods&#x2F;installer&#x2F;analyzer.rb:1097:in &#96;block in inspect_targets_to_integrate&#39;</span><br><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;cocoapods&#x2F;1.8.4&#x2F;libexec&#x2F;gems&#x2F;cocoapods-1.8.4&#x2F;lib&#x2F;cocoapods&#x2F;user_interface.rb:64:in &#96;section&#39;</span><br><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;cocoapods&#x2F;1.8.4&#x2F;libexec&#x2F;gems&#x2F;cocoapods-1.8.4&#x2F;lib&#x2F;cocoapods&#x2F;installer&#x2F;analyzer.rb:1092:in &#96;inspect_targets_to_integrate&#39;</span><br><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;cocoapods&#x2F;1.8.4&#x2F;libexec&#x2F;gems&#x2F;cocoapods-1.8.4&#x2F;lib&#x2F;cocoapods&#x2F;installer&#x2F;analyzer.rb:106:in &#96;analyze&#39;</span><br><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;cocoapods&#x2F;1.8.4&#x2F;libexec&#x2F;gems&#x2F;cocoapods-1.8.4&#x2F;lib&#x2F;cocoapods&#x2F;installer.rb:410:in &#96;analyze&#39;</span><br><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;cocoapods&#x2F;1.8.4&#x2F;libexec&#x2F;gems&#x2F;cocoapods-1.8.4&#x2F;lib&#x2F;cocoapods&#x2F;installer.rb:234:in &#96;block in resolve_dependencies&#39;</span><br><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;cocoapods&#x2F;1.8.4&#x2F;libexec&#x2F;gems&#x2F;cocoapods-1.8.4&#x2F;lib&#x2F;cocoapods&#x2F;user_interface.rb:64:in &#96;section&#39;</span><br><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;cocoapods&#x2F;1.8.4&#x2F;libexec&#x2F;gems&#x2F;cocoapods-1.8.4&#x2F;lib&#x2F;cocoapods&#x2F;installer.rb:233:in &#96;resolve_dependencies&#39;</span><br><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;cocoapods&#x2F;1.8.4&#x2F;libexec&#x2F;gems&#x2F;cocoapods-1.8.4&#x2F;lib&#x2F;cocoapods&#x2F;installer.rb:156:in &#96;install!&#39;</span><br><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;cocoapods&#x2F;1.8.4&#x2F;libexec&#x2F;gems&#x2F;cocoapods-1.8.4&#x2F;lib&#x2F;cocoapods&#x2F;command&#x2F;install.rb:52:in &#96;run&#39;</span><br><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;cocoapods&#x2F;1.8.4&#x2F;libexec&#x2F;gems&#x2F;claide-1.0.3&#x2F;lib&#x2F;claide&#x2F;command.rb:334:in &#96;run&#39;</span><br><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;cocoapods&#x2F;1.8.4&#x2F;libexec&#x2F;gems&#x2F;cocoapods-1.8.4&#x2F;lib&#x2F;cocoapods&#x2F;command.rb:52:in &#96;run&#39;</span><br><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;cocoapods&#x2F;1.8.4&#x2F;libexec&#x2F;gems&#x2F;cocoapods-1.8.4&#x2F;bin&#x2F;pod:55:in &#96;&lt;top (required)&gt;&#39;</span><br><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;cocoapods&#x2F;1.8.4&#x2F;libexec&#x2F;bin&#x2F;pod:23:in &#96;load&#39;</span><br><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;cocoapods&#x2F;1.8.4&#x2F;libexec&#x2F;bin&#x2F;pod:23:in &#96;&lt;main&gt;&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">――― TEMPLATE END ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――</span><br><span class=\"line\"></span><br><span class=\"line\">[!] Oh no, an error occurred.</span><br><span class=\"line\"></span><br><span class=\"line\">Search for existing GitHub issues similar to yours:</span><br><span class=\"line\">https:&#x2F;&#x2F;github.com&#x2F;CocoaPods&#x2F;CocoaPods&#x2F;search?q&#x3D;%5BXcodeproj%5D+Unknown+object+version.&amp;type&#x3D;Issues</span><br><span class=\"line\"></span><br><span class=\"line\">If none exists, create a ticket, with the template displayed above, on:</span><br><span class=\"line\">https:&#x2F;&#x2F;github.com&#x2F;CocoaPods&#x2F;CocoaPods&#x2F;issues&#x2F;new</span><br><span class=\"line\"></span><br><span class=\"line\">Be sure to first read the contributing guide for details on how to properly submit a ticket:</span><br><span class=\"line\">https:&#x2F;&#x2F;github.com&#x2F;CocoaPods&#x2F;CocoaPods&#x2F;blob&#x2F;master&#x2F;CONTRIBUTING.md</span><br><span class=\"line\"></span><br><span class=\"line\">Don&#39;t forget to anonymize any private data!</span><br><span class=\"line\"></span><br><span class=\"line\">Looking for related issues on cocoapods&#x2F;cocoapods...</span><br><span class=\"line\"> - [Xcodeproj] Unknown object version.  Help Please</span><br><span class=\"line\">   https:&#x2F;&#x2F;github.com&#x2F;CocoaPods&#x2F;CocoaPods&#x2F;issues&#x2F;10604 [open] [2 comments]</span><br><span class=\"line\">   a week ago</span><br><span class=\"line\"></span><br><span class=\"line\"> - RuntimeError - [Xcodeproj] Unknown object version.</span><br><span class=\"line\">   https:&#x2F;&#x2F;github.com&#x2F;CocoaPods&#x2F;CocoaPods&#x2F;issues&#x2F;10259 [closed] [7 comments]</span><br><span class=\"line\">   2 weeks ago</span><br><span class=\"line\"></span><br><span class=\"line\"> - RuntimeError - [Xcodeproj] Unknown object version</span><br><span class=\"line\">   https:&#x2F;&#x2F;github.com&#x2F;CocoaPods&#x2F;CocoaPods&#x2F;issues&#x2F;10432 [closed] [6 comments]</span><br><span class=\"line\">   11 Mar 2021</span><br><span class=\"line\"></span><br><span class=\"line\">and 59 more at:</span><br><span class=\"line\">https:&#x2F;&#x2F;github.com&#x2F;cocoapods&#x2F;cocoapods&#x2F;search?q&#x3D;%5BXcodeproj%5D%20Unknown%20object%20version.&amp;type&#x3D;Issues&amp;utf8&#x3D;✓</span><br></pre></td></tr></table></figure>\n\n<p>让后根据错误提示找到GitHub的解决方案：<a class=\"link\"   href=\"https://github.com/CocoaPods/CocoaPods/issues/10604\" >https://github.com/CocoaPods/CocoaPods/issues/10604<i class=\"fas fa-external-link-alt\"></i></a><br>我执行如下命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">➜  ios gem uninstall xcodeproj</span><br><span class=\"line\">Gem &#39;xcodeproj&#39; is not installed</span><br><span class=\"line\">➜  ios gem install xcodeproj</span><br><span class=\"line\">Fetching xcodeproj-1.19.0.gem</span><br><span class=\"line\">Fetching nanaimo-0.3.0.gem</span><br><span class=\"line\">ERROR:  While executing gem ... (Gem::FilePermissionError)</span><br><span class=\"line\">    You don&#39;t have write permissions for the &#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.6.0 directory.</span><br><span class=\"line\">➜  ios gem install xcodeproj</span><br><span class=\"line\">ERROR:  While executing gem ... (Gem::FilePermissionError)</span><br><span class=\"line\">    You don&#39;t have write permissions for the &#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.6.0 directory.</span><br></pre></td></tr></table></figure>\n\n<p>在执行<code>gem install xcodeproj</code>报错了目录权限不够。按照我的常规懒习惯直接加<code>sudo</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">➜  ios sudo gem install xcodeproj                                     </span><br><span class=\"line\">Password:</span><br><span class=\"line\">Fetching atomos-0.1.3.gem</span><br><span class=\"line\">Fetching claide-1.0.3.gem</span><br><span class=\"line\">Fetching xcodeproj-1.19.0.gem</span><br><span class=\"line\">Fetching colored2-3.1.2.gem</span><br><span class=\"line\">Fetching nanaimo-0.3.0.gem</span><br><span class=\"line\">Successfully installed atomos-0.1.3</span><br><span class=\"line\">Successfully installed claide-1.0.3</span><br><span class=\"line\">Successfully installed colored2-3.1.2</span><br><span class=\"line\">Successfully installed nanaimo-0.3.0</span><br><span class=\"line\">xcodeproj&#39;s executable &quot;xcodeproj&quot; conflicts with &#x2F;usr&#x2F;local&#x2F;bin&#x2F;xcodeproj</span><br><span class=\"line\">Overwrite the executable? [yN]  y</span><br><span class=\"line\">Successfully installed xcodeproj-1.19.0</span><br><span class=\"line\">Parsing documentation for atomos-0.1.3</span><br><span class=\"line\">Installing ri documentation for atomos-0.1.3</span><br><span class=\"line\">Parsing documentation for claide-1.0.3</span><br><span class=\"line\">Installing ri documentation for claide-1.0.3</span><br><span class=\"line\">Parsing documentation for colored2-3.1.2</span><br><span class=\"line\">Installing ri documentation for colored2-3.1.2</span><br><span class=\"line\">Parsing documentation for nanaimo-0.3.0</span><br><span class=\"line\">Installing ri documentation for nanaimo-0.3.0</span><br><span class=\"line\">Parsing documentation for xcodeproj-1.19.0</span><br><span class=\"line\">Installing ri documentation for xcodeproj-1.19.0</span><br><span class=\"line\">Done installing documentation for atomos, claide, colored2, nanaimo, xcodeproj after 1 seconds</span><br><span class=\"line\">5 gems installed</span><br></pre></td></tr></table></figure>\n<p>问题解决，现在终于可以愉快的<code>pod install</code>了吧？<br>不幸的是，还是报错如下，pod版本不够，OpenSSL-Universal这个依赖需要<code>&gt;= 1.9</code>的版本号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">➜  ios pod install</span><br><span class=\"line\">Analyzing dependencies</span><br><span class=\"line\">Fetching podspec for &#96;DoubleConversion&#96; from &#96;..&#x2F;node_modules&#x2F;react-native&#x2F;third-party-podspecs&#x2F;DoubleConversion.podspec&#96;</span><br><span class=\"line\">Fetching podspec for &#96;RCT-Folly&#96; from &#96;..&#x2F;node_modules&#x2F;react-native&#x2F;third-party-podspecs&#x2F;RCT-Folly.podspec&#96;</span><br><span class=\"line\">Fetching podspec for &#96;glog&#96; from &#96;..&#x2F;node_modules&#x2F;react-native&#x2F;third-party-podspecs&#x2F;glog.podspec&#96;</span><br><span class=\"line\">[!] &#96;OpenSSL-Universal&#96; requires CocoaPods version &#96;&gt;&#x3D; 1.9&#96;, which is not satisfied by your current version, &#96;1.8.4&#96;.</span><br></pre></td></tr></table></figure>\n\n<p>那我就只能把pod 升级了。注意，pod 升级不是 <code>pod update</code> 这个是更新pod依赖库的版本好。我们现在需要更新<code>Cocoapods</code>这个软件本身的版本。<br>我之前是用brew安装的Cocoapods, 那为了避免冲突，我还是用brew去升级这个Cocoapods软件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew upgrade cocoapods</span><br></pre></td></tr></table></figure>\n\n<p>更新Cocoapods版本到v1.10.1了，软件更新成功，使用 <code>pod --version</code>查看版本直接找不到pod这个命令<code>zsh: command not found: pod</code>。这种情况一般是软件引用链接没关联到zsh导致，看下面执行升级cocoapods命令时的报错：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Error: The &#96;brew link&#96; step did not complete successfully</span><br><span class=\"line\">The formula built, but is not symlinked into &#x2F;usr&#x2F;local</span><br><span class=\"line\">Could not symlink bin&#x2F;xcodeproj</span><br><span class=\"line\">Target &#x2F;usr&#x2F;local&#x2F;bin&#x2F;xcodeproj</span><br><span class=\"line\">already exists. You may want to remove it:</span><br><span class=\"line\">  rm &#39;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;xcodeproj&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">To force the link and overwrite all conflicting files:</span><br><span class=\"line\">  brew link --overwrite cocoapods</span><br><span class=\"line\"></span><br><span class=\"line\">To list all files that would be deleted:</span><br><span class=\"line\">  brew link --overwrite --dry-run cocoapods</span><br></pre></td></tr></table></figure>\n<p>有文件冲突，和文件引用链接 没关联，按照报错提升执行，先删除冲突文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">rm &#39;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;xcodeproj&#39;</span><br></pre></td></tr></table></figure>\n<p>然后强制brew link关联软件引用路径。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew link --overwrite cocoapods</span><br></pre></td></tr></table></figure>\n<p>pod 版本更新成功看下图：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16206319562213.jpg\"\n                     \n                ></p>\n<p>这个时候回到React Native项目的ios目录执行 <code>pod install</code> pod 安装成功，如下图：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16206320636718.jpg\"\n                     \n                ></p>\n<p>模拟器上运行初始化好的项目效果如图<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16206333850630.jpg\"\n                     \n                ></p>\n","categories":["开发","前端"],"tags":["ios","react","pod"]},{"title":"React 核心概念重点笔记","url":"/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/React-%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E9%87%8D%E7%82%B9%E7%AC%94%E8%AE%B0.html","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>把之前阅读React官方文档，重点笔记做一下归纳。以及会提及到React和Vue的共同点和核心概念差异。<br>提示：此篇文章纯属作者的一个学习笔记，对其他人可能没有实际上的学习帮助，只是为了作者自己日后翻看能快速回顾之前学习时的思想碰撞点。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"React重点笔记归纳\"><a href=\"#React重点笔记归纳\" class=\"headerlink\" title=\"React重点笔记归纳\"></a>React重点笔记归纳</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>react支持多种接入方式：</p>\n<ol>\n<li>在网站中按需添加React部分功能，基于老项目渐进式适配。</li>\n<li>使用前端工程化CLI脚本创建功能完整，且能支撑起大型项目React应用。</li>\n<li>CDN链接引入，支持开发版本和生产版本。</li>\n</ol>\n<h2 id=\"核心概念\"><a href=\"#核心概念\" class=\"headerlink\" title=\"核心概念\"></a>核心概念</h2><ol>\n<li>React的起点函数 <code>ReactDOM.render()</code>，也能理解是终点函数。</li>\n<li>React认为渲染逻辑本质上与其他UI逻辑内在耦合，所以不采取人为的分离方式，而是放在“组件”的松散耦合单元之中来实现关注点分离。</li>\n<li>JSX 语法上更接近 <code>JavaScript</code> 而不是 <code>HTML</code>，所以 <code>React DOM</code> 使用 camelCase（小驼峰命名）来定义属性的名称，而不使用 <code>HTML</code> 属性名称的命名约定</li>\n<li>明确子元素和组件的区别：元素是构成 React 应用的最小砖块，组件允许你将 UI 拆分为独立可复用的代码片段，并对每个片段进行独立构思。</li>\n<li>React 会将以小写字母开头的组件视为原生 DOM 标签元素，所以所有组件都以大写开头。</li>\n<li>React组件中的数据流是’单向’的数据流，并且是自上而下的。</li>\n<li>State作为局部状态只能通过setState()函数更新，并且setState更新时异步的，可能会合并同时的多个更新。</li>\n<li>在React的事件函数中不能通过返回<code>false</code>来阻止默认行为，需要显示的使用<code>preventDefault</code></li>\n<li>class的函数默认不会绑定JSX回调函数中的<code>this</code>,如果你忘记使用<code>this</code>.去绑定函数，当调用这个函数的时候，函数里面的<code>this</code>为<code>undefined</code></li>\n<li>与运算符 &amp;&amp;判断渲染逻辑时，React只会忽略false, 如果是0不会跳过，不会渲染逻辑&amp;&amp;后面的组件，会直接渲染0</li>\n<li>key 会传递信息给 React ，但不会传递给你的组件</li>\n<li>表单受控组件的value使 React 的 <code>state</code> 成为“唯一数据源”，<code>value</code>可以传入数组以支持在 select 标签中选择多个选项。</li>\n<li>为了不打破局部状态自上而下的单向流规则，React建议将共享状态提升到最近的共同父组件中去。</li>\n<li>如果你想要在组件间复用非 UI 的功能，我们建议将其提取为一个单独的 JavaScript 模块，如函数、对象或者类。组件可以直接引入（import）而无需通过 extend 继承它们</li>\n</ol>\n<h2 id=\"高级指引\"><a href=\"#高级指引\" class=\"headerlink\" title=\"高级指引\"></a>高级指引</h2><ol>\n<li>代码分割<code>import()</code>语法，代码分割并懒加载 <code>React.lazy()</code>, 利用父级组件的fallback属性做优雅降级（如 loading 指示器等）</li>\n<li>Context 主要应用场景在于很多不同层级的组件需要访问同样一些的数据。请谨慎使用，因为这会使得组件的复用性变差。</li>\n<li>一个处理错误的优雅方式 Error Boundaries，<code>try / catch</code> 很棒但它仅能用于命令式代码</li>\n<li>错误边界无法捕获事件处理器内部的错误，如果你需要在事件处理器内部捕获错误，使用普通的 <code>JavaScript try / catch</code> </li>\n<li>高阶组件（HOC）它是一种基于 React 的组合特性而形成的设计模式, 高阶组件是参数为组件，返回值为新组件的函数。</li>\n<li>Portal 提供了一种将子节点渲染到存在于父组件以外的 DOM 节点的优秀的方案，适合弹窗等脱离父节点的组件。</li>\n<li>Profiler 测量渲染一个 React 应用多久渲染一次以及渲染一次的“代价”</li>\n<li>避免使用 <code>refs</code> 来做任何可以通过声明式实现来完成的事情，勿过度使用 Refs</li>\n<li>React强烈建议不要创建自己的组件基类。 在 React 组件中，代码重用的主要方式是组合而不是继承.</li>\n</ol>\n<h2 id=\"API-Reference\"><a href=\"#API-Reference\" class=\"headerlink\" title=\"API Reference\"></a>API Reference</h2><h3 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h3><ul>\n<li><a class=\"link\"   href=\"https://zh-hans.reactjs.org/docs/react-api.html#reactcomponent\" >React.Component<i class=\"fas fa-external-link-alt\"></i></a>：定义 React 组件的基类</li>\n<li><a class=\"link\"   href=\"https://zh-hans.reactjs.org/docs/react-api.html#reactpurecomponent\" >React.PureComponent<i class=\"fas fa-external-link-alt\"></i></a>：与React.Component相似，但是他并未实现<a class=\"link\"   href=\"https://zh-hans.reactjs.org/docs/react-component.html#shouldcomponentupdate\" >shouldComponentUpdate()<i class=\"fas fa-external-link-alt\"></i></a> 某些情况下可提高性能</li>\n<li><a class=\"link\"   href=\"https://zh-hans.reactjs.org/docs/react-api.html#reactmemo\" >React.memo()<i class=\"fas fa-external-link-alt\"></i></a>：React 组件也可以被定义为可被包装的函数的<a class=\"link\"   href=\"https://zh-hans.reactjs.org/docs/higher-order-components.html\" >高阶组件<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"https://zh-hans.reactjs.org/docs/react-api.html#createelement\" >React.createElement()<i class=\"fas fa-external-link-alt\"></i></a>：创建React元素，一般来说如果你使用了JSX就不再需要调用</li>\n<li><a class=\"link\"   href=\"https://zh-hans.reactjs.org/docs/react-api.html#createfactory\" >React.createFactory()<i class=\"fas fa-external-link-alt\"></i></a>：创建React元素，返回用于生成指定类型React 元素的函数</li>\n<li><a class=\"link\"   href=\"https://zh-hans.reactjs.org/docs/react-api.html#cloneelement\" >React.cloneElement()<i class=\"fas fa-external-link-alt\"></i></a>：以<code>element</code>元素为样板克隆并返回新的React元素</li>\n<li><a class=\"link\"   href=\"https://zh-hans.reactjs.org/docs/react-api.html#createfactory\" >React.createFactory()<i class=\"fas fa-external-link-alt\"></i></a>：返回用于生成指定类型 React 元素的函数</li>\n<li><a class=\"link\"   href=\"https://zh-hans.reactjs.org/docs/react-api.html#isvalidelement\" >React.isValidElement()<i class=\"fas fa-external-link-alt\"></i></a>：验证对象是否为 React 元素</li>\n<li><a class=\"link\"   href=\"https://zh-hans.reactjs.org/docs/react-api.html#reactchildren\" >React.Children<i class=\"fas fa-external-link-alt\"></i></a>：提供了用于处理<code>this.props.children</code>不透明数据结构的实用方法 <code>.map</code> <code>.forEach</code> <code>.count</code> <code>.only</code> <code>.toArray</code></li>\n<li><a class=\"link\"   href=\"https://zh-hans.reactjs.org/docs/react-api.html#reactfragment\" >React.Fragment<i class=\"fas fa-external-link-alt\"></i></a>：在不额外创建<code>DOM</code>元素的情况下，让<code>render()</code>方法中返回多个元素</li>\n<li><a class=\"link\"   href=\"https://zh-hans.reactjs.org/docs/react-api.html#reactcreateref\" >React.createRef<i class=\"fas fa-external-link-alt\"></i></a>：创建一个能够通过 ref 属性附加到 React 元素的 <a class=\"link\"   href=\"https://zh-hans.reactjs.org/docs/refs-and-the-dom.html\" >ref<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"https://zh-hans.reactjs.org/docs/react-api.html#reactforwardref\" >React.forwardRef<i class=\"fas fa-external-link-alt\"></i></a>：创建一个React组件，这个组件能够将其接受的<code>ref</code>属性转发到其组件树下的另一个组件中</li>\n<li><a class=\"link\"   href=\"https://zh-hans.reactjs.org/docs/react-api.html#reactlazy\" >React.lazy<i class=\"fas fa-external-link-alt\"></i></a>：import一个动态懒加载的组件</li>\n<li><a class=\"link\"   href=\"https://zh-hans.reactjs.org/docs/react-api.html#reactsuspense\" >React.Suspense<i class=\"fas fa-external-link-alt\"></i></a>：指定加载指示器，以防其组件树中的某些子组件尚未具备渲染条件</li>\n</ul>\n<h3 id=\"ReactDOM\"><a href=\"#ReactDOM\" class=\"headerlink\" title=\"ReactDOM\"></a>ReactDOM</h3><ul>\n<li><a class=\"link\"   href=\"https://zh-hans.reactjs.org/docs/react-dom.html#render\" >ReactDOM.render()<i class=\"fas fa-external-link-alt\"></i></a>：在提供的 container 里渲染一个 React 元素，并返回对该组件的引用</li>\n<li><a href=\"\">ReactDOM.hydrate()</a>：用于在 <code>ReactDOMServer</code> 渲染的容器中对 HTML 的内容进行 <code>hydrate</code> 操作</li>\n<li><a class=\"link\"   href=\"https://zh-hans.reactjs.org/docs/react-dom.html#unmountcomponentatnode\" >ReactDOM.unmountComponentAtNode()<i class=\"fas fa-external-link-alt\"></i></a>：从 DOM 中卸载组件，会将其事件处理器（event handlers）和 state 一并清除</li>\n<li><a class=\"link\"   href=\"https://zh-hans.reactjs.org/docs/react-dom.html#finddomnode\" >ReactDOM.findDOMNode()<i class=\"fas fa-external-link-alt\"></i></a>：如果组件已经被挂载到 DOM 上，此方法会返回浏览器中相应的原生 DOM 元素</li>\n<li><a class=\"link\"   href=\"https://zh-hans.reactjs.org/docs/react-dom.html#createportal\" >ReactDOM.createPortal()<i class=\"fas fa-external-link-alt\"></i></a>：创建 portal。Portal 将提供一种将子节点渲染到 DOM 节点中的方式</li>\n</ul>\n<h3 id=\"ReactDOMServer\"><a href=\"#ReactDOMServer\" class=\"headerlink\" title=\"ReactDOMServer\"></a>ReactDOMServer</h3><p><em>ReactDOMServer 对象允许你将组件渲染成静态标记。通常，它被使用在 Node 服务端上</em></p>\n<ul>\n<li><a class=\"link\"   href=\"https://zh-hans.reactjs.org/docs/react-dom-server.html#rendertostring\" >ReactDOMServer.renderToString()<i class=\"fas fa-external-link-alt\"></i></a>：将 React 元素渲染为初始 HTML。React 将返回一个 HTML 字符串</li>\n<li><a class=\"link\"   href=\"https://zh-hans.reactjs.org/docs/react-dom-server.html#rendertostaticmarkup\" >ReactDOMServer.renderToStaticMarkup()<i class=\"fas fa-external-link-alt\"></i></a>：此方法与<code>renderToString</code>相似，但它不会在<code>React</code>内部创建的额外<code>DOM</code>属性，如果你需要的是静态页面生成器那它非常适合。</li>\n<li><a class=\"link\"   href=\"https://zh-hans.reactjs.org/docs/react-dom-server.html#rendertonodestream\" >ReactDOMServer.renderToNodeStream()<i class=\"fas fa-external-link-alt\"></i></a>：将一个 React 元素渲染成其初始 HTM。这个 API 仅允许在服务端使用。不允许在浏览器使用。</li>\n<li><a class=\"link\"   href=\"https://zh-hans.reactjs.org/docs/react-dom-server.html#rendertostaticnodestream\" >ReactDOMServer.renderToStaticNodeStream()<i class=\"fas fa-external-link-alt\"></i></a>：此方法与 renderToNodeStream 相似，但此方法不会在 React 内部创建的额外 DOM 属性，例如 data-reactroot。如果你希望把 React 当作静态页面生成器来使用，此 API 仅限于服务端使用</li>\n</ul>\n<h3 id=\"DOM-元素\"><a href=\"#DOM-元素\" class=\"headerlink\" title=\"DOM 元素\"></a>DOM 元素</h3><ul>\n<li>React 与 HTML 之间有很多属性存在差异，具体参考<a class=\"link\"   href=\"https://zh-hans.reactjs.org/docs/dom-elements.html#differences-in-attributes\" >文档<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li>在 React 16 中，任何标准的或自定义的 DOM 属性都是完全支持的。具体参考<a class=\"link\"   href=\"https://zh-hans.reactjs.org/docs/dom-elements.html#all-supported-html-attributes\" >All Supported HTML Attributes<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n<h3 id=\"合成事件\"><a href=\"#合成事件\" class=\"headerlink\" title=\"合成事件\"></a>合成事件</h3><p><code>SyntheticEvent</code> 实例将被传递给你的事件处理函数，它是浏览器的原生事件的跨浏览器包装器。除兼容所有浏览器外，它还拥有和浏览器原生事件相同的接口，包括 <code>stopPropagation()</code> 和 <code>preventDefault()</code></p>\n<p>React 通过将事件 normalize 以让他们在不同浏览器中拥有一致的属性，<a class=\"link\"   href=\"https://zh-hans.reactjs.org/docs/events.html#supported-events\" >支持的事件<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"JavaScript-环境要求\"><a href=\"#JavaScript-环境要求\" class=\"headerlink\" title=\"JavaScript 环境要求\"></a>JavaScript 环境要求</h3><p>React 16 依赖集合类型 Map 和 Set 。如果你要支持无法原生提供这些能力（例如 IE &lt; 11）或实现不规范（例如 IE 11）的旧浏览器与设备，考虑在你的应用库中包含一个全局的 polyfill ，例如 core-js。React 16 跟<a class=\"link\"   href=\"https://cli.vuejs.org/zh/guide/browser-compatibility.html#polyfill\" >Vue-cli v3 浏览器兼容性<i class=\"fas fa-external-link-alt\"></i></a>一样使用 core-js 支持老版本浏览器</p>\n<h2 id=\"HOOK\"><a href=\"#HOOK\" class=\"headerlink\" title=\"HOOK\"></a>HOOK</h2><p>Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。</p>\n<ul>\n<li>HOOK没有破坏性改动，完全可选，100%向后兼容</li>\n<li>虽然HOOK可以解决组件开发很多似曾相识的问题，但是React采用<strong>渐进策略</strong>：没有计划从 React 中移除 class</li>\n<li>使用<code>useState</code>和<code>useEffect</code>可以体验到HOOK的奇妙，可以参考这两个思路去自定义自己的HOOK,反正HOOK能根据你的使用情况明显的放大价值</li>\n<li>Hook API 索引参考<a class=\"link\"   href=\"https://zh-hans.reactjs.org/docs/hooks-reference.html\" >文档<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n<h1 id=\"Vue和React的共同点\"><a href=\"#Vue和React的共同点\" class=\"headerlink\" title=\"Vue和React的共同点\"></a>Vue和React的共同点</h1><ol>\n<li>都是虚拟doc，虚拟doc的性能开销都很小，通过虚拟doc计算完再去操作具体对应的真实doc。</li>\n<li>循环列表都需要给子节点指定key，不然会报警告。</li>\n<li>都支持路由懒加载，Webpack分割代码块。</li>\n<li>都支持SSR，并都有各自的服务端渲染框架 Vue(Nuxt), React(Next)</li>\n<li>React 和 Vue运行时性能都是非常快</li>\n<li>Vue 和 React 都提供了强大的路由来应对大型应用</li>\n</ol>\n<h1 id=\"Vue和React的核心概念差异\"><a href=\"#Vue和React的核心概念差异\" class=\"headerlink\" title=\"Vue和React的核心概念差异\"></a>Vue和React的核心概念差异</h1><ol>\n<li>vue局部状态支持双向绑定，React局部状态是’单向’的数据流，并且是自上而下的。</li>\n<li>Vue局部状态支持直接=’value’等于号赋值更新状态，React必须通过setState()函数（有点类似<a class=\"link\"   href=\"https://vuex.vuejs.org/api/#mutations\" >Vuex<i class=\"fas fa-external-link-alt\"></i></a>的<code>mutations</code>）</li>\n<li>Vue模板语法更贴合像<code>Html</code>, React的<code>jsx</code>语法更贴合js，并且vue也支持让你选择jsx的语法来编写组件。</li>\n<li>条件渲染的差别: Vue直接在模板中<code>v-if</code>(更直观), React还是真正的通过js语法<code>if</code>来判断接收组件变量插入到对应位置（更具逻辑性）</li>\n<li>Vue子组件需要声明props有哪些属性，React不需要，除了特殊的<code>key</code>关键属性不能在子组件props中获取。</li>\n<li>在 React 应用中，当某个组件的状态发生变化时，它会以该组件为根，重新渲染整个组件子树。如要避免不必要的子组件的重渲染，你需要在所有可能的地方使用 PureComponent，或是手动实现 shouldComponentUpdate 方法。在 Vue 应用中，组件的依赖是在渲染过程中自动追踪的，所以系统能精确知晓哪个组件确实需要被重渲染。Vue 的这个特点使得开发者不再需要考虑此类优化，从而能够更好地专注于应用本身。</li>\n<li>React Native原生渲染生态比Vue好</li>\n</ol>\n","categories":["开发","前端"],"tags":["react"]},{"title":"SSR项目optimization.runtimeChunk还有哪些优化的可能","url":"/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/SSR%E9%A1%B9%E7%9B%AEoptimization-runtimeChunk%E8%BF%98%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%98%E5%8C%96%E7%9A%84%E5%8F%AF%E8%83%BD.html","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>webpack之optimization.runtimeChunk有什么作用？<br>runtimeChunk，直观翻译是运行时的chunk文件，其作用是啥呢，通过调研了解了一波，在此记录下。<br><strong>何为运行时代码？</strong><br>形如import(‘abc’).then(res=&gt;{})这种异步加载的代码，在webpack中即为运行时代码。<br>在VueCli工程中常见的异步加载路由即为runtime代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    path: <span class=\"string\">&#x27;/about&#x27;</span>,</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;About&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// route level code-splitting</span></span><br><span class=\"line\">    <span class=\"comment\">// this generates a separate chunk (about.[hash].js) for this route</span></span><br><span class=\"line\">    <span class=\"comment\">// which is lazy-loaded when the route is visited.</span></span><br><span class=\"line\">    component: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: &quot;about&quot; */</span> <span class=\"string\">&#x27;../views/About.vue&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// component: About</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n<h1 id=\"optimization-runtimeChunk作用验证\"><a href=\"#optimization-runtimeChunk作用验证\" class=\"headerlink\" title=\"optimization.runtimeChunk作用验证\"></a>optimization.runtimeChunk作用验证</h1><p>实践才是真理，直接上测试。不过要是有时间仔细阅读理解webpack关于optimization.runtimeChunk的源码也是可以的。</p>\n<p>1、搭建简单的vue项目，使用vuecli新建一个只需要router的项目，脚手架默认路由配置了一个异步加载的about路由，如上图所示</p>\n<p>2、不设置runtimeChunk时，查看打包文件，此时不需要做任何操作，因为其默认是false，直接yarn build，此时生成的主代码文件的hash值为7d50fa23。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16637323504468.jpg\"\n                     \n                ></p>\n<p>3、接着改变about.vue文件的内容，再次build，查看打包结果，发现app文件的hash值发生了变化。<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16637323697772.jpg\"\n                     \n                ></p>\n<blockquote>\n<p>设置runtimeChunk是将包含chunks 映射关系的 list单独从 app.js里提取出来，因为每一个 chunk 的 id 基本都是基于内容 hash 出来的，所以每次改动都会影响它，如果不将它提取出来的话，等于app.js每次都会改变。缓存就失效了。设置runtimeChunk之后，webpack就会生成一个个runtime~xxx.js的文件。<br>然后每次更改所谓的运行时代码文件时，打包构建时app.js的hash值是不会改变的。如果每次项目更新都会更改app.js的hash值，那么用户端浏览器每次都需要重新加载变化的app.js，如果项目大切优化分包没做好的话会导致第一次加载很耗时，导致用户体验变差。现在设置了runtimeChunk，就解决了这样的问题。所以这样做的目的是避免文件的频繁变更导致浏览器缓存失效，所以其是更好的利用缓存。提升用户体验。具体关于浏览器缓存参考：<a class=\"link\"   href=\"https://web.dev/use-long-term-caching/\" >https://web.dev/use-long-term-caching/<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<p>4、新建vue.config.js，配置runtimeChunk，第一次打包，然后修改about，在打包一次，查看2次打包之后app文件的hash值的变化。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vue.config.client.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  productionSourceMap: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  configureWebpack: &#123;</span><br><span class=\"line\">     runtimeChunk:&#123;</span><br><span class=\"line\">        name: <span class=\"string\">&#x27;manifest&#x27;</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>设置了runtimeChunk配置后，就算对应页面组件内容变更了，打包的app.xxxxxxxx.js的哈希版本号不会变更。会报表抽离生成一个manifest.xxxxxxx.js的文件。</p>\n<h1 id=\"设置runtimeChunk导致的新问题\"><a href=\"#设置runtimeChunk导致的新问题\" class=\"headerlink\" title=\"设置runtimeChunk导致的新问题\"></a>设置runtimeChunk导致的新问题</h1><p>1、查看一下manifest.xxxxxxx.js文件内容：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16637408550028.jpg\"\n                     \n                ></p>\n<p>发现文件很小，且就是加载chunk的依赖关系的文件。虽然每次构建后app的hash没有改变，但是manifest.xxxxxxx.js会变啊。每次重新构建上线后，浏览器每次都需要重新请求它，它的 http 耗时远大于它的执行时间了，所以建议不要将它单独拆包，而是将它内联到我们的 index.html 之中。</p>\n<h1 id=\"最终解决方案\"><a href=\"#最终解决方案\" class=\"headerlink\" title=\"最终解决方案\"></a>最终解决方案</h1><h2 id=\"SPA解决方案\"><a href=\"#SPA解决方案\" class=\"headerlink\" title=\"SPA解决方案\"></a>SPA解决方案</h2><p>对于单页面应用（SPA）可以webpack的html相关插件。这边我们使用<a class=\"link\"   href=\"https://github.com/numical/script-ext-html-webpack-plugin\" >script-ext-html-webpack-plugin<i class=\"fas fa-external-link-alt\"></i></a>来实现。（也可使用<a class=\"link\"   href=\"https://github.com/dustinjackson/html-webpack-inline-source-plugin\" >html-webpack-inline-source-plugin<i class=\"fas fa-external-link-alt\"></i></a>，其不会删除manifest.xxxxxxx.js文件。）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vue.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ScriptExtHtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;script-ext-html-webpack-plugin&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  productionSourceMap: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  configureWebpack: &#123;</span><br><span class=\"line\">    optimization: &#123;</span><br><span class=\"line\">      runtimeChunk:&#123;</span><br><span class=\"line\">        name: <span class=\"string\">&#x27;manifest&#x27;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">      <span class=\"keyword\">new</span> ScriptExtHtmlWebpackPlugin(&#123;</span><br><span class=\"line\">        inline: <span class=\"regexp\">/manifest.+\\.js$/</span>  <span class=\"comment\">//正则匹配runtime文件名</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  chainWebpack: <span class=\"function\"><span class=\"params\">config</span> =&gt;</span> &#123;</span><br><span class=\"line\">    config.plugin(<span class=\"string\">&#x27;preload&#x27;</span>)</span><br><span class=\"line\">      .tap(<span class=\"function\"><span class=\"params\">args</span> =&gt;</span> &#123;</span><br><span class=\"line\">        args[<span class=\"number\">0</span>].fileBlacklist.push(<span class=\"regexp\">/manifest.+\\.js$/</span>) <span class=\"comment\">//正则匹配runtime文件名，去除该文件的preload</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> args</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>重新打包，查看index.html文件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">en</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">utf-8</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">X-UA-Compatible</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">viewport</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width,initial-scale=1&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">icon</span> <span class=\"attr\">href</span>=<span class=\"string\">/favicon.ico</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>runtime-chunk<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">/js/about.cccc71df.js</span> <span class=\"attr\">rel</span>=<span class=\"string\">prefetch</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">/css/app.b087a504.css</span> <span class=\"attr\">rel</span>=<span class=\"string\">preload</span> <span class=\"attr\">as</span>=<span class=\"string\">style</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">/js/app.9f1ba6f7.js</span> <span class=\"attr\">rel</span>=<span class=\"string\">preload</span> <span class=\"attr\">as</span>=<span class=\"string\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">/css/app.b087a504.css</span> <span class=\"attr\">rel</span>=<span class=\"string\">stylesheet</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">noscript</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>We&#x27;re sorry but runtime-chunk doesn&#x27;t work properly without JavaScript enabled. Please enable it</span><br><span class=\"line\">            to continue.<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">noscript</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">app</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123; <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">r</span>(<span class=\"params\">r</span>) </span>&#123; <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> n, a, i = r[<span class=\"number\">0</span>], c = r[<span class=\"number\">1</span>], l = r[<span class=\"number\">2</span>], f = <span class=\"number\">0</span>, s = []; f &lt; i.length; f++)a = i[f], <span class=\"built_in\">Object</span>.prototype.hasOwnProperty.call(o, a) &amp;&amp; o[a] &amp;&amp; s.push(o[a][<span class=\"number\">0</span>]), o[a] = <span class=\"number\">0</span>; <span class=\"keyword\">for</span> (n <span class=\"keyword\">in</span> c) <span class=\"built_in\">Object</span>.prototype.hasOwnProperty.call(c, n) &amp;&amp; (e[n] = c[n]); p &amp;&amp; p(r); <span class=\"keyword\">while</span> (s.length) s.shift()(); <span class=\"keyword\">return</span> u.push.apply(u, l || []), t() &#125; <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">t</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> e, r = <span class=\"number\">0</span>; r &lt; u.length; r++) &#123; <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> t = u[r], n = !<span class=\"number\">0</span>, a = <span class=\"number\">1</span>; a &lt; t.length; a++) &#123; <span class=\"keyword\">var</span> c = t[a]; <span class=\"number\">0</span> !== o[c] &amp;&amp; (n = !<span class=\"number\">1</span>) &#125; n &amp;&amp; (u.splice(r--, <span class=\"number\">1</span>), e = i(i.s = t[<span class=\"number\">0</span>])) &#125; <span class=\"keyword\">return</span> e &#125; <span class=\"keyword\">var</span> n = &#123;&#125;, o = &#123; <span class=\"string\">&quot;runtime~app&quot;</span>: <span class=\"number\">0</span> &#125;, u = []; <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\">e</span>) </span>&#123; <span class=\"keyword\">return</span> i.p + <span class=\"string\">&quot;js/&quot;</span> + (&#123; <span class=\"attr\">about</span>: <span class=\"string\">&quot;about&quot;</span> &#125;[e] || e) + <span class=\"string\">&quot;.&quot;</span> + &#123; <span class=\"attr\">about</span>: <span class=\"string\">&quot;cccc71df&quot;</span> &#125;[e] + <span class=\"string\">&quot;.js&quot;</span> &#125; <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">i</span>(<span class=\"params\">r</span>) </span>&#123; <span class=\"keyword\">if</span> (n[r]) <span class=\"keyword\">return</span> n[r].exports; <span class=\"keyword\">var</span> t = n[r] = &#123; <span class=\"attr\">i</span>: r, <span class=\"attr\">l</span>: !<span class=\"number\">1</span>, <span class=\"attr\">exports</span>: &#123;&#125; &#125;; <span class=\"keyword\">return</span> e[r].call(t.exports, t, t.exports, i), t.l = !<span class=\"number\">0</span>, t.exports &#125; i.e = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123; <span class=\"keyword\">var</span> r = [], t = o[e]; <span class=\"keyword\">if</span> (<span class=\"number\">0</span> !== t) <span class=\"keyword\">if</span> (t) r.push(t[<span class=\"number\">2</span>]); <span class=\"keyword\">else</span> &#123; <span class=\"keyword\">var</span> n = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>((<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">r, n</span>) </span>&#123; t = o[e] = [r, n] &#125;)); r.push(t[<span class=\"number\">2</span>] = n); <span class=\"keyword\">var</span> u, c = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&quot;script&quot;</span>); c.charset = <span class=\"string\">&quot;utf-8&quot;</span>, c.timeout = <span class=\"number\">120</span>, i.nc &amp;&amp; c.setAttribute(<span class=\"string\">&quot;nonce&quot;</span>, i.nc), c.src = a(e); <span class=\"keyword\">var</span> l = <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>; u = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">r</span>) </span>&#123; c.onerror = c.onload = <span class=\"literal\">null</span>, <span class=\"built_in\">clearTimeout</span>(f); <span class=\"keyword\">var</span> t = o[e]; <span class=\"keyword\">if</span> (<span class=\"number\">0</span> !== t) &#123; <span class=\"keyword\">if</span> (t) &#123; <span class=\"keyword\">var</span> n = r &amp;&amp; (<span class=\"string\">&quot;load&quot;</span> === r.type ? <span class=\"string\">&quot;missing&quot;</span> : r.type), u = r &amp;&amp; r.target &amp;&amp; r.target.src; l.message = <span class=\"string\">&quot;Loading chunk &quot;</span> + e + <span class=\"string\">&quot; failed.\\n(&quot;</span> + n + <span class=\"string\">&quot;: &quot;</span> + u + <span class=\"string\">&quot;)&quot;</span>, l.name = <span class=\"string\">&quot;ChunkLoadError&quot;</span>, l.type = n, l.request = u, t[<span class=\"number\">1</span>](l) &#125; o[e] = <span class=\"keyword\">void</span> <span class=\"number\">0</span> &#125; &#125;; <span class=\"keyword\">var</span> f = <span class=\"built_in\">setTimeout</span>((<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; u(&#123; <span class=\"attr\">type</span>: <span class=\"string\">&quot;timeout&quot;</span>, <span class=\"attr\">target</span>: c &#125;) &#125;), <span class=\"number\">12e4</span>); c.onerror = c.onload = u, <span class=\"built_in\">document</span>.head.appendChild(c) &#125; <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.all(r) &#125;, i.m = e, i.c = n, i.d = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e, r, t</span>) </span>&#123; i.o(e, r) || <span class=\"built_in\">Object</span>.defineProperty(e, r, &#123; <span class=\"attr\">enumerable</span>: !<span class=\"number\">0</span>, <span class=\"attr\">get</span>: t &#125;) &#125;, i.r = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123; <span class=\"string\">&quot;undefined&quot;</span> !== <span class=\"keyword\">typeof</span> <span class=\"built_in\">Symbol</span> &amp;&amp; <span class=\"built_in\">Symbol</span>.toStringTag &amp;&amp; <span class=\"built_in\">Object</span>.defineProperty(e, <span class=\"built_in\">Symbol</span>.toStringTag, &#123; <span class=\"attr\">value</span>: <span class=\"string\">&quot;Module&quot;</span> &#125;), <span class=\"built_in\">Object</span>.defineProperty(e, <span class=\"string\">&quot;__esModule&quot;</span>, &#123; <span class=\"attr\">value</span>: !<span class=\"number\">0</span> &#125;) &#125;, i.t = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e, r</span>) </span>&#123; <span class=\"keyword\">if</span> (<span class=\"number\">1</span> &amp; r &amp;&amp; (e = i(e)), <span class=\"number\">8</span> &amp; r) <span class=\"keyword\">return</span> e; <span class=\"keyword\">if</span> (<span class=\"number\">4</span> &amp; r &amp;&amp; <span class=\"string\">&quot;object&quot;</span> === <span class=\"keyword\">typeof</span> e &amp;&amp; e &amp;&amp; e.__esModule) <span class=\"keyword\">return</span> e; <span class=\"keyword\">var</span> t = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>); <span class=\"keyword\">if</span> (i.r(t), <span class=\"built_in\">Object</span>.defineProperty(t, <span class=\"string\">&quot;default&quot;</span>, &#123; <span class=\"attr\">enumerable</span>: !<span class=\"number\">0</span>, <span class=\"attr\">value</span>: e &#125;), <span class=\"number\">2</span> &amp; r &amp;&amp; <span class=\"string\">&quot;string&quot;</span> != <span class=\"keyword\">typeof</span> e) <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> n <span class=\"keyword\">in</span> e) i.d(t, n, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">r</span>) </span>&#123; <span class=\"keyword\">return</span> e[r] &#125;.bind(<span class=\"literal\">null</span>, n)); <span class=\"keyword\">return</span> t &#125;, i.n = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123; <span class=\"keyword\">var</span> r = e &amp;&amp; e.__esModule ? <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> e[<span class=\"string\">&quot;default&quot;</span>] &#125; : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> e &#125;; <span class=\"keyword\">return</span> i.d(r, <span class=\"string\">&quot;a&quot;</span>, r), r &#125;, i.o = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e, r</span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.hasOwnProperty.call(e, r) &#125;, i.p = <span class=\"string\">&quot;/&quot;</span>, i.oe = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123; <span class=\"keyword\">throw</span> <span class=\"built_in\">console</span>.error(e), e &#125;; <span class=\"keyword\">var</span> c = <span class=\"built_in\">window</span>[<span class=\"string\">&quot;webpackJsonp&quot;</span>] = <span class=\"built_in\">window</span>[<span class=\"string\">&quot;webpackJsonp&quot;</span>] || [], l = c.push.bind(c); c.push = r, c = c.slice(); <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> f = <span class=\"number\">0</span>; f &lt; c.length; f++)r(c[f]); <span class=\"keyword\">var</span> p = l; t() &#125;)([]);</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">/js/chunk-vendors.1e5c55d3.js</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">/js/app.9f1ba6f7.js</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>index.html中已经没有对manifest.xxxxxxx.js的引用了，而是直接将其代码写入到了index.html中，故不会在请求文件，减少http请求。</p>\n<h2 id=\"SSR解决方案\"><a href=\"#SSR解决方案\" class=\"headerlink\" title=\"SSR解决方案\"></a>SSR解决方案</h2><p>webpack打包插件对于服务端渲染的html没有用，因为服务端的js引用关系都是根据 <a class=\"link\"   href=\"https://v2.ssr.vuejs.org/zh/api/#clientmanifest\" >vue-ssr-server-bundle.json<i class=\"fas fa-external-link-alt\"></i></a> 动态注入的。所以我就没有从webpack插件入手，直接从Node服务端去调整，不动webpack打包配置。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> serverBundle = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../public/vue-ssr-server-bundle.json&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> clientManifest = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../public/vue-ssr-client-manifest.json&#x27;</span>)</span><br><span class=\"line\">clientManifest.initial = clientManifest.initial.filter(<span class=\"function\"><span class=\"params\">path</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isManifestPath = <span class=\"regexp\">/manifest.+\\.js$/</span>.test(path)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isManifestPath) manifestPath = path</span><br><span class=\"line\">  <span class=\"keyword\">return</span> !isManifestPath</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">vueRenderer = createRenderer(serverBundle, &#123; template, clientManifest &#125;)</span><br></pre></td></tr></table></figure>\n<p>在createRenderer之前把从vue-ssr-client-manifest.json获取到的initial文件路径中把manifest.xxxxxxx.js文件筛选出来并从initial中移除（移除后在自动注入引用link的时候就不会把manifest文件用link标签引入），并记录manifest.xxxxxxx.js的具体值，因为这个manifestPath后面我们还要用到，后面需要读取这个文件路径里面的js代码注入到渲染的html里面去。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> exportManifestJsCode = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> script = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (manifestPath) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> manifestJsCode = fs.readFileSync(resolve(<span class=\"string\">`../public/<span class=\"subst\">$&#123;manifestPath&#125;</span>`</span>), <span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">    script = <span class=\"string\">`&lt;script&gt;<span class=\"subst\">$&#123;manifestJsCode&#125;</span>&lt;/script&gt;`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> script</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>获取manifestPath里面的代码，生成script代码段。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">context.manifestJsCode &#x3D; exportManifestJsCode()</span><br><span class=\"line\">vueRenderer.renderToString(context, (err, html) &#x3D;&gt; &#123;</span><br><span class=\"line\">  if (err) &#123;</span><br><span class=\"line\">      return handleError(err, req, res)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  res.send(html)</span><br></pre></td></tr></table></figure>\n<p>把生成的ManifestJsCode导出给context.manifestJsCode</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  &#123;&#123;&#123;manifestJsCode&#125;&#125;&#125;</span><br><span class=\"line\">  <span class=\"comment\">&lt;!--vue-ssr-outlet--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>最后在ssr的html模版对应位置用3大括号<code>&#123;&#123;&#123;manifestJsCode&#125;&#125;&#125;</code>将manifestJsCode注入到html对应位置。</p>\n<p>⚠️这个是对VueSSR指南手动构建项目的解决方案，Nuxt服务端渲染框架解决办法还没研究。</p>\n","categories":["开发","前端"],"tags":["vue","ssr","webpack"]},{"title":"Single-spa 成熟的微前端架构方案","url":"/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/Single-spa-%E6%88%90%E7%86%9F%E7%9A%84%E5%BE%AE%E5%89%8D%E7%AB%AF%E6%9E%B6%E6%9E%84%E6%96%B9%E6%A1%88.html","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>由于多个中后台系统做前后端分离，各个业务模块集合在一个项目里面开发会造成后期不好维护且容易出问题，也不方便独立部署。<br>所以需要设计一套高度解耦又聚合在一个平台方便管理的系统架构。</p>\n<p>微前端是一种多个团队通过独立发布功能的方式来共同构建现代化 web 应用的技术手段及方法策略。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"方案选项\"><a href=\"#方案选项\" class=\"headerlink\" title=\"方案选项\"></a>方案选项</h1><p>首先，我们整理了核心诉求，按优先级排序如下：</p>\n<ul>\n<li>希望异地开发时不同的模块能够独立开发、独立部署。</li>\n<li>各个子系统独立运行，互不影响，但允许我们在开发阶段与其他子系统进行联调。</li>\n<li>保持单页应用的体验。</li>\n<li>由于现有项目都是基于Vue技术栈开发，因此，我们的框架并不需要做到技术栈无关，只要满足Vue的项目即可。</li>\n</ul>\n<p>基于以上这些诉求，我们调研了目前市面上常用的微前端方案，最常见的方案有：</p>\n<ul>\n<li>基于Nginx的路由分发。</li>\n<li>使用Iframe将页面嵌入。</li>\n<li>single-spa成熟落地的框架。</li>\n</ul>\n<p>这些方案的优劣整理如下：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16182001002838.png\"\n                     \n                ></p>\n<h1 id=\"微前端概念理解\"><a href=\"#微前端概念理解\" class=\"headerlink\" title=\"微前端概念理解\"></a>微前端概念理解</h1><h2 id=\"微前端对比微服务\"><a href=\"#微前端对比微服务\" class=\"headerlink\" title=\"微前端对比微服务\"></a>微前端对比微服务</h2><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16182001571570.png\"\n                     \n                ></p>\n<h2 id=\"微前端整体架构\"><a href=\"#微前端整体架构\" class=\"headerlink\" title=\"微前端整体架构\"></a>微前端整体架构</h2><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16182002461297.png\"\n                     \n                ></p>\n<h1 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h1><h2 id=\"安装single-spa-CLI\"><a href=\"#安装single-spa-CLI\" class=\"headerlink\" title=\"安装single-spa CLI\"></a>安装single-spa CLI</h2><p>官方文档 <a class=\"link\"   href=\"https://zh-hans.single-spa.js.org/docs/create-single-spa\" >single-spa CLI <i class=\"fas fa-external-link-alt\"></i></a><br>安装single-spa CLI 执行如下命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install --global create-single-spa</span><br><span class=\"line\"># or</span><br><span class=\"line\">yarn global add create-single-spa</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Single-spa-CLI创建主应用\"><a href=\"#Single-spa-CLI创建主应用\" class=\"headerlink\" title=\"Single-spa CLI创建主应用\"></a>Single-spa CLI创建主应用</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">create-single-spa</span><br></pre></td></tr></table></figure>\n<p>出现可选项选择<br>? Directory for new project (.)   // 输入项目名字<br>? Select type to generate 方向键上下选择❯ single-spa root config<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16182115311305.jpg\"\n                     \n                ><br>后续按自己需求选择</p>\n<h2 id=\"Single-spa-CLI创建微应用\"><a href=\"#Single-spa-CLI创建微应用\" class=\"headerlink\" title=\"Single-spa CLI创建微应用\"></a>Single-spa CLI创建微应用</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">create-single-spa --framework vue</span><br></pre></td></tr></table></figure>\n<p>要创建其他前端框架的微项目只要修改 vue 参数为 react, angular 即可<br>创建vue框架微项目前确保你的环境已经安装了 Vue-CLI, 执行命令 vue -V 确认是否安装， 如没有安装过，可点击链接查看<a class=\"link\"   href=\"https://cli.vuejs.org/zh/guide/installation.html\" >Vue-CLI官方文档<i class=\"fas fa-external-link-alt\"></i></a>自行安装</p>\n<p>执行以上命令后会有一系列选项填写，按照如下填写<br>? Directory for new project （项目名称按照这样命名方式填写 f2e-xxx）f2e-util<br>? Organization name (can use letters, numbers, dash or underscore) f2e<br>Vue CLI v4.5.11<br>┌───────────────────────────────────────────┐<br>│                                           │<br>│   New version available 4.5.11 → 4.5.12   │<br>│     Run npm i -g @vue/cli to update!      │<br>│                                           │<br>└───────────────────────────────────────────┘</p>\n<p>? Please pick a preset:（选择预设，如果有存过构建预设可以选，不确定用什么构建配置就选Manually select features。上下键控制键选择，回车确认）<br>? Check the features needed for your project:（选要用的vue框架配置，上下键控制选择，空格键勾选，回车键确认）<br>? Choose a version of Vue.js that you want to start the project with 2.x</p>\n<p>? Use history mode for router? Y<br>? Pick a CSS pre-processor (现在css预编译器，less)<br>? Pick a linter / formatter config:（为了代码规范ESLing 配置建议选 ❯ESLint + Standard config）<br>? Pick additional lint features: （为了避免提交错误代码，勾选Lint and fix on commit）<br>? Where do you prefer placing config for Babel, ESLint, etc.? （❯ In dedicated config files）<br>? Save this as a preset for future projects? （保存预设？为了方便下次新建同样配置微项目，可以选择保存预设 Y）<br>? Save preset as: （为预设取个名字方便下次选取）</p>\n<h2 id=\"demo源码地址\"><a href=\"#demo源码地址\" class=\"headerlink\" title=\"demo源码地址\"></a>demo源码地址</h2><p><a class=\"link\"   href=\"https://github.com/microWebApp\" >https://github.com/microWebApp<i class=\"fas fa-external-link-alt\"></i></a></p>\n","categories":["开发","前端"],"tags":["vue","singleSPA","微前端"]},{"title":"Mac Sublime Text 3 插件管理工具安装-Package Control","url":"/%E5%BC%80%E5%8F%91/%E5%90%8E%E7%AB%AF/Sublime-Text-3-Package%E2%80%94Control.html","content":"<h3 id=\"Sublime-Text这个工具不用多说，所有程序员基本都喜欢用。轻便，且功能强大，快捷。\"><a href=\"#Sublime-Text这个工具不用多说，所有程序员基本都喜欢用。轻便，且功能强大，快捷。\" class=\"headerlink\" title=\"Sublime Text这个工具不用多说，所有程序员基本都喜欢用。轻便，且功能强大，快捷。\"></a>Sublime Text这个工具不用多说，所有程序员基本都喜欢用。轻便，且功能强大，快捷。</h3><p>最近用Sublime text做批量编辑真的很方便。然后更新了最新版本。对于喜欢探索新东西的我，想把所有功能都试个遍，然后看到官方说的Package Control,插件管理工具的使用说明。<br>利用这个Package Control可以给Sublime Text扩展更多的实用功能。<br><em>比如Python code API</em></p>\n<span id=\"more\"></span>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/WechatIMG103.jpeg\"\n                      alt=\"sublime test\"\n                ></p>\n<h2 id=\"1-安装Package-Control\"><a href=\"#1-安装Package-Control\" class=\"headerlink\" title=\"1.安装Package Control\"></a>1.安装Package Control</h2><ul>\n<li>点击屏幕最左上角 Sublime Text &gt; Preferences &gt; Browse Packages 菜单</li>\n<li>浏览文件夹，然后进入Installed Packages/ 文件夹</li>\n<li>下载<a class=\"link\"   href=\"https://packagecontrol.io/Package%20Control.sublime-package\"  title=\"点击下载\">Package Control.sublime-package<i class=\"fas fa-external-link-alt\"></i></a> 并将其复制到Installed Packages /目录中</li>\n<li>重新启动sublime test</li>\n</ul>\n<p><a class=\"link\"   href=\"https://packagecontrol.io/installation#st3\"  title=\"查看官方文档\">官方安装文档<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"2-使用Package-Control安装插件\"><a href=\"#2-使用Package-Control安装插件\" class=\"headerlink\" title=\"2.使用Package Control安装插件\"></a>2.使用Package Control安装插件</h2><ul>\n<li>快捷键 command+shift+p 打开一个插件工具的功能搜索输入框。</li>\n<li>在输入框输入 Install 找到 Install Package,选择这个功能。</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/WechatIMG102.jpeg\"\n                      alt=\"sublime test\"\n                ></p>\n<ul>\n<li>然后弹出一个搜索插件的搜索框。</li>\n<li>这里搜索会到插件库去搜索插件，要1秒左右的搜索时间。</li>\n<li>输入”Chinese”选择”ChineseLocalizations”，我这里图片上搜索出来的没有”ChineseLocalizations”因为我已经按照过这个插件了。没安装的一般搜索出来第一个就是”ChineseLocalizations”</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/WechatIMG105.jpeg\"\n                      alt=\"sublime test\"\n                ></p>\n<h2 id=\"3-使用安装好的插件（这里安装的是语言包插件）\"><a href=\"#3-使用安装好的插件（这里安装的是语言包插件）\" class=\"headerlink\" title=\"3.使用安装好的插件（这里安装的是语言包插件）\"></a>3.使用安装好的插件（这里安装的是语言包插件）</h2><ul>\n<li>在菜单栏找到 Help &gt; Language &gt;选择你要的语言。</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/WechatIMG104.jpeg\"\n                      alt=\"sublime test\"\n                ></p>\n<h2 id=\"4-Package-Control的其他功能。\"><a href=\"#4-Package-Control的其他功能。\" class=\"headerlink\" title=\"4.Package Control的其他功能。\"></a>4.Package Control的其他功能。</h2><ul>\n<li>它是一个插件管理器，所以它除了安装插件外还有很多功能。</li>\n<li>删除插件 Remove Package、禁用插件：Disable Package …等</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/WechatIMG108.jpeg\"\n                      alt=\"sublime test\"\n                ></p>\n<h2 id=\"5-使用中文后首选项内容查看。\"><a href=\"#5-使用中文后首选项内容查看。\" class=\"headerlink\" title=\"5.使用中文后首选项内容查看。\"></a>5.使用中文后首选项内容查看。</h2><ul>\n<li>这里可以设置很多个性化内容。</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/WechatIMG109.jpeg\"\n                      alt=\"sublime test\"\n                ></p>\n<p>本文主要讲 Sublime Text 3 的 Package Control 插件管理器的使用，用Package Control安装了多语言包插件，实现了 Sublime Text 3 汉化，Sublime Text 3 简体中文，繁体中文，Japanese, English..</p>\n","categories":["开发","后端"],"tags":["Tool","Text"]},{"title":"Swift状态管理库有哪些","url":"/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/Swift%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E5%BA%93%E6%9C%89%E5%93%AA%E4%BA%9B.html","content":"<h1 id=\"Swift状态管理库有哪些\"><a href=\"#Swift状态管理库有哪些\" class=\"headerlink\" title=\"Swift状态管理库有哪些\"></a>Swift状态管理库有哪些</h1><p>接触过Vue和React前端框架的小伙伴应该都知道，Vue的状态管理有<a class=\"link\"   href=\"https://vuex.vuejs.org/zh/guide/state.html\" >Vuex<i class=\"fas fa-external-link-alt\"></i></a>, <a class=\"link\"   href=\"https://pinia.vuejs.org/\" >pinia<i class=\"fas fa-external-link-alt\"></i></a>(vue3)，React的状态管理有 <a class=\"link\"   href=\"https://redux.js.org/\" >Redux<i class=\"fas fa-external-link-alt\"></i></a> <a class=\"link\"   href=\"https://cn.mobx.js.org/intro/overview.html\" >mobx<i class=\"fas fa-external-link-alt\"></i></a>。<br>那如果swift也用MVVM模式进行开发，那swift有实用的状态管理库供使用吗？</p>\n<span id=\"more\"></span>\n\n<p>在 Swift 中，可以使用以下库来管理状态：</p>\n<ol>\n<li>Redux：一个基于 Flux 架构的状态管理库，可以帮助你维护应用程序的状态。</li>\n<li>ReactiveSwift：一个响应式编程框架，可以帮助你管理状态和处理异步事件。</li>\n<li>Combine：苹果提供的响应式编程框架，可以帮助你管理状态和处理异步事件。</li>\n<li>RxSwift：一个响应式编程框架，可以帮助你管理状态和处理异步事件。</li>\n<li>StatefulViewController：一个轻量级的库，可以帮助你在视图控制器中管理状态。</li>\n<li>SwiftState：一个状态机库，可以帮助你管理状态转换。</li>\n</ol>\n","categories":["开发","前端"],"tags":["ios"]},{"title":"Ubuntu Nginx 配置https免费SSL证书安全环境","url":"/%E5%BC%80%E5%8F%91/%E5%90%8E%E7%AB%AF/Ubuntu-Nginx-%E9%85%8D%E7%BD%AE%E5%85%8D%E8%B4%B9https-SSL-%E5%AE%89%E5%85%A8%E7%8E%AF%E5%A2%83.html","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>有时候在某些开发场景必须需要用到https安全环境来测试，比如FB的登录sdk调试，FB的<a class=\"link\"   href=\"https://developers.facebook.com/docs/applinks\" >App Links<i class=\"fas fa-external-link-alt\"></i></a>，<a class=\"link\"   href=\"https://developers.google.com/web/ilt/pwa\" >PWA<i class=\"fas fa-external-link-alt\"></i></a>的调试等等。那我们就需要搭建一个https安全环境,这种情况我有两种解决方案。</p>\n<ol>\n<li>用<a class=\"link\"   href=\"https://github.com/FiloSottile/mkcert\" >mkcert<i class=\"fas fa-external-link-alt\"></i></a>本地生成免费安全证书</li>\n<li>去<a class=\"link\"   href=\"https://s.qiniu.com/ZfumU3\" >七牛云<i class=\"fas fa-external-link-alt\"></i></a>或者阿里云白嫖免费安全证书</li>\n</ol>\n<p>第1种本地生成的证书只能在自己电脑上信任证书来确保https安全环境为绿色，在其他设备上会显示https不安全。<br>要使用公网认证的https就用第2种方式，去白嫖SSL安全证书，第2钟方式要有几个前提条件</p>\n<ul>\n<li>自己拥有ECS云服务器（这个阿里与好像也有能白嫖的低配机器）</li>\n<li>自己拥有一个域名（去阿里云购买非特殊域名也不贵几块钱一年）</li>\n<li>注册七牛云账户去0元购买SSL免费证书</li>\n<li>还有就是你需要基本熟悉Linux操作命令</li>\n</ul>\n<p>我下面主要介绍第2种方案，想要实现第1种方案的可以去查看<a class=\"link\"   href=\"https://github.com/FiloSottile/mkcert\" >mkcert<i class=\"fas fa-external-link-alt\"></i></a>的文档</p>\n<span id=\"more\"></span>\n\n<h1 id=\"七牛云购买免费证书\"><a href=\"#七牛云购买免费证书\" class=\"headerlink\" title=\"七牛云购买免费证书\"></a>七牛云购买免费证书</h1><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16137146697268.jpg\"\n                      alt=\"购买免费证书\"\n                ></p>\n<p>没有七牛云的朋友我推荐大家去注册一下，特别接地气的云服务商。<br><a class=\"link\"   href=\"https://s.qiniu.com/ZfumU3\" >https://s.qiniu.com/ZfumU3<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"登录注册七牛云购买免费SSL证书\"><a href=\"#登录注册七牛云购买免费SSL证书\" class=\"headerlink\" title=\"登录注册七牛云购买免费SSL证书\"></a>登录注册七牛云购买免费SSL证书</h2><p>注册登录后点击左上角菜单栏 &gt; SSL证书 &gt; 购买证书 &gt; 选择证书品牌（TrustAsia）&gt; DV域名型</p>\n<h2 id=\"购买成功后补全信息\"><a href=\"#购买成功后补全信息\" class=\"headerlink\" title=\"购买成功后补全信息\"></a>购买成功后补全信息</h2><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16137158019193.jpg\"\n                      alt=\"补全信息\"\n                ></p>\n<h2 id=\"DNS验证域名\"><a href=\"#DNS验证域名\" class=\"headerlink\" title=\"DNS验证域名\"></a>DNS验证域名</h2><p>因为不能随便填别人的域名添加SSL证书配置，所以需要验证域名所有权确认域名是你的。<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16137168050786.jpg\"\n                      alt=\"DNS验证域名\"\n                ></p>\n<p>按照SSL订单详情给的TXT记录值，去添加TXT域名解析用来验证域名所有权<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16137174974979.jpg\"\n                      alt=\"DNS验证域名\"\n                ></p>\n<p>在阿里云控制台域名解析添加完TXT记录值，再回来七牛云的SSL订单详情页 点击检测验证结果，一般1分钟都不要就通过了。<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16137176683041.jpg\"\n                      alt=\"DNS验证域名\"\n                ></p>\n<h1 id=\"下载证书并导入阿里云ECS服务器\"><a href=\"#下载证书并导入阿里云ECS服务器\" class=\"headerlink\" title=\"下载证书并导入阿里云ECS服务器\"></a>下载证书并导入阿里云ECS服务器</h1><p>在七牛云SSL证书服务/证书管理列表 下载刚刚验证完的证书文件。<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16137178060785.jpg\"\n                      alt=\"下载证书\"\n                ></p>\n<h2 id=\"使用scp命令把证书文件上传到ECS服务器\"><a href=\"#使用scp命令把证书文件上传到ECS服务器\" class=\"headerlink\" title=\"使用scp命令把证书文件上传到ECS服务器\"></a>使用scp命令把证书文件上传到ECS服务器</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">scp ~user/ssl/xxx.com.zip root@<span class=\"number\">47.244</span><span class=\"number\">.10</span><span class=\"number\">.110</span>:<span class=\"regexp\">/usr/</span>local/cert</span><br><span class=\"line\">scp 要上传的文件名 ECS主机用户@ECS主机公网ip:要上传到ECS主机的目录</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"新增Nginx配置\"><a href=\"#新增Nginx配置\" class=\"headerlink\" title=\"新增Nginx配置\"></a>新增Nginx配置</h1><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen <span class=\"number\">80</span>;</span><br><span class=\"line\">    server_name app.patpat.link;</span><br><span class=\"line\">\t # 80端口重定向到 https 443</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">301</span> https:<span class=\"comment\">//$server_name$request_uri;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen <span class=\"number\">443</span> ssl;</span><br><span class=\"line\">    server_name  app.patpat.link;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_log             /<span class=\"keyword\">var</span>/log/nginx/app_link_error.log;</span><br><span class=\"line\">    access_log            /<span class=\"keyword\">var</span>/log/nginx/app_link_access.log;</span><br><span class=\"line\"></span><br><span class=\"line\">    # ssl验证相关配置</span><br><span class=\"line\">    ssl on;</span><br><span class=\"line\">    ssl_certificate /usr/local/cert/app.patpat.link.crt; # 证书路径配置</span><br><span class=\"line\">    ssl_certificate_key /usr/local/cert/app.patpat.link.key; # 证书key路径配置</span><br><span class=\"line\">    </span><br><span class=\"line\">    #ssl_session_timeout  5m;    #缓存有效期</span><br><span class=\"line\">    ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2; #安全链接可选的加密协议</span><br><span class=\"line\">    ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP; #加密算法</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\"></span><br><span class=\"line\">    root /var/www/app-link/dist; # 网站根目录配置</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        #vue router configure</span><br><span class=\"line\">        try_files $uri $uri/ /index.html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置阿里云ECS安全组端口443规则\"><a href=\"#配置阿里云ECS安全组端口443规则\" class=\"headerlink\" title=\"配置阿里云ECS安全组端口443规则\"></a>配置阿里云ECS安全组端口443规则</h1><p>上面的配置往访问域名你会发现http能正常重定向到https了，但是到了https的请求，请求一直没响应。<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16137187528909.jpg\"\n                      alt=\"请求一直没响应\"\n                ></p>\n<p>然后用curl命令访问发现报错 port 443: Connection timed out<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16137187737030.jpg\"\n                      alt=\"curl命令访问发现报错\"\n                ></p>\n<p>这个时候就是最后一步配置了。ECS云服务器安全组端口规则配置，可参考下面这篇文章。<br><a class=\"link\"   href=\"https://blog.csdn.net/Alen_xiaoxin/article/details/104853828\" >https://blog.csdn.net/Alen_xiaoxin/article/details/104853828<i class=\"fas fa-external-link-alt\"></i></a><br>阿里云ECS允许公网通过HTTP、HTTPS等服务访问实例如何配置？<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16137188659798.jpg\"\n                      alt=\"ECS允许443\"\n                ></p>\n<p>阿里云ECS安全组规则入口：云服务器 ECS  &gt;  网络云安全 &gt; 安全组 &gt; 创建安全组 或者 在现有安全组配置规则 配置入方向</p>\n<p>添加安全组规则<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16137191499796.jpg\"\n                      alt=\"ECS允许443\"\n                ></p>\n<p>OK 现在去访问你的域名就是绿色的https安全环境了，可以愉快的开发调试了。</p>\n","categories":["开发","后端"],"tags":["nginx","ssl","ECS"]},{"title":"Vue CLI3 仿ios NavigationBar & TabBar布局","url":"/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/Vue-CLI3-%E4%BB%BFios-NavigationBar-TabBar%E5%B8%83%E5%B1%80.html","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>一个仿ios App的NavigationBar和TabBar布局,加自动轮播Banner。<br><strong>环境</strong></p>\n<ul>\n<li>node 8.13</li>\n<li>vue 2.6.9</li>\n<li>vue-cli3</li>\n<li>mac os 10.14.2</li>\n</ul>\n<p><strong>js依赖</strong></p>\n<ul>\n<li><a class=\"link\"   href=\"https://github.com/surmon-china/vue-awesome-swiper\" >vue-awesome-swiper<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"https://www.html.cn/doc/less/\" >less-loader<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n<p><strong>主要实现组件</strong></p>\n<ul>\n<li>NavigationBar.vue</li>\n<li>TabBar.vue</li>\n<li>Swiper.vue</li>\n</ul>\n<span id=\"more\"></span>\n\n<h1 id=\"页面交互效果\"><a href=\"#页面交互效果\" class=\"headerlink\" title=\"页面交互效果\"></a>页面交互效果</h1><p>先看gif效果图，觉得可以在去下面👇找源码。<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/1553170556165.gif\"\n                      width = \"400\" alt=\"图片名称\" align=center /\n                ></p>\n<p>生成的gif图不是很清晰，如果觉得有用，源码在这里。<br><a class=\"link\"   href=\"https://github.com/StriverF/vue-cli3-tabbar-navigationbar-layout\" >vue-cli3 仿ios TabBar NavigationBar GitHub源码<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h1 id=\"代码使用\"><a href=\"#代码使用\" class=\"headerlink\" title=\"代码使用\"></a>代码使用</h1><p><strong>TabBar.vue</strong><br>在App.vue引用组件的地方传入tabBarList数组<br>vue data定义<strong>tabBarList</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">data () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      navBarOptions: &#123;&#125;,</span><br><span class=\"line\">      tabBarList: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          text: <span class=\"string\">&#x27;好运&#x27;</span>,</span><br><span class=\"line\">          path: <span class=\"string\">&#x27;/&#x27;</span>,</span><br><span class=\"line\">          normalImg: <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./assets/images/tabbar/icon-good-luck-normal.png&#x27;</span>),</span><br><span class=\"line\">          activeImg: <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./assets/images/tabbar/icon-good-luck-active.png&#x27;</span>)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          text: <span class=\"string\">&#x27;码报&#x27;</span>,</span><br><span class=\"line\">          path: <span class=\"string\">&#x27;/code-news&#x27;</span>,</span><br><span class=\"line\">          normalImg: <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./assets/images/tabbar/icon-code-news-normal.png&#x27;</span>),</span><br><span class=\"line\">          activeImg: <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./assets/images/tabbar/icon-code-news-active.png&#x27;</span>)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          text: <span class=\"string\">&#x27;发现&#x27;</span>,</span><br><span class=\"line\">          path: <span class=\"string\">&#x27;/found&#x27;</span>,</span><br><span class=\"line\">          normalImg: <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./assets/images/tabbar/icon-found-normal.png&#x27;</span>),</span><br><span class=\"line\">          activeImg: <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./assets/images/tabbar/icon-found-active.png&#x27;</span>)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          text: <span class=\"string\">&#x27;我的&#x27;</span>,</span><br><span class=\"line\">          path: <span class=\"string\">&#x27;/mine&#x27;</span>,</span><br><span class=\"line\">          normalImg: <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./assets/images/tabbar/icon-mine-normal.png&#x27;</span>),</span><br><span class=\"line\">          activeImg: <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./assets/images/tabbar/icon-mine-active.png&#x27;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>在引用组件时传入<strong>tabBarList</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tab-bar</span> <span class=\"attr\">:tabBarList</span>=<span class=\"string\">&quot;tabBarList&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tab-bar</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>NavigationBar.vue</strong><br>在各个页面上调取this.$emit(‘contentViewChang’, {})</p>\n<p>传入导航栏上需要的数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span>.$emit(<span class=\"string\">&#x27;contentViewChang&#x27;</span>, &#123;</span><br><span class=\"line\">      navBarOptions: &#123;</span><br><span class=\"line\">        title: <span class=\"string\">&#x27;好运&#x27;</span>,</span><br><span class=\"line\">        subTitle: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">        leftItem: &#123;</span><br><span class=\"line\">          icon: <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../assets/images/navbar/icon-download-app.png&#x27;</span>),</span><br><span class=\"line\">          text: <span class=\"string\">&#x27;App&#x27;</span>,</span><br><span class=\"line\">          path: <span class=\"string\">&#x27;/download-app&#x27;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        rightItem: &#123;</span><br><span class=\"line\">          icon: <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../assets/images/navbar/icon-hple-center.png&#x27;</span>),</span><br><span class=\"line\">          text: <span class=\"string\">&#x27;帮助&#x27;</span>,</span><br><span class=\"line\">          path: <span class=\"string\">&#x27;/hple&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>经过 $emit 会把数据传入到App.vue在由App.vue把数据set给NavigationBar.vue的options根据各个页面回传的数据来决定渲染的Tiele和左右操作按钮。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">navigation-bar</span> <span class=\"attr\">:options</span>=<span class=\"string\">&quot;navBarOptions&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">navigation-bar</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n","categories":["开发","前端"],"tags":["vue","Layout","TabBar","NavigationBar","swiper"]},{"title":"Vue-Cli2到Vue-Cli3 Vue项目架构升级","url":"/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/Vue-Cli2%E5%88%B0Vue-Cli3-Vue%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84%E5%8D%87%E7%BA%A7.html","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>由于<a class=\"link\"   href=\"https://github.com/vuejs/vue-cli/tree/v2#vue-cli--\" >Vue-cli2<i class=\"fas fa-external-link-alt\"></i></a>老板官方不维护，且不推荐使用<a class=\"link\"   href=\"https://github.com/vuejs/vue-cli/tree/v2#vue-cli--\" >Vue-Cli2<i class=\"fas fa-external-link-alt\"></i></a>版本，推荐大家使用<a class=\"link\"   href=\"https://cli.vuejs.org/zh/guide/installation.html\" >Vue-Cli3<i class=\"fas fa-external-link-alt\"></i></a>版本。然后我看了一下Vue-Cli3的文档，确实比之前的老版本体验好了很多。</p>\n<ol>\n<li>目录结构更清晰.</li>\n<li>弃用之前的的build文件夹的build.js和webpack.prod.conf.js</li>\n<li>使用新的<a class=\"link\"   href=\"https://cli.vuejs.org/zh/config/\" >vue.config.js<i class=\"fas fa-external-link-alt\"></i></a>配置文件包含了之前的wepack配置项。</li>\n<li>支持插件集成和插件开发。（比如PWA这样的功能可以通过插件一键集成）</li>\n<li>可以通过 vue ui 命令运行图形化界面，在图形化界面上创建和管理项目<span id=\"more\"></span></li>\n</ol>\n<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><h2 id=\"安装-Vue-CLI\"><a href=\"#安装-Vue-CLI\" class=\"headerlink\" title=\"安装 Vue CLI\"></a>安装 Vue CLI</h2><p>Node 版本要求<br>Vue CLI 需要 Node.js 8.9 或更高版本 (推荐 8.11.0+)。你可以使用 <a href=\"https://www.patpat.site/%E5%BC%80%E5%8F%91/Node-js%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%88%87%E6%8D%A2%E5%B7%A5%E5%85%B7nvm/cjtjovlc2000tbq04bgnl1vl3/\">nvm</a> 或 nvm-windows 在同一台电脑中管理多个 Node 版本。</p>\n<p>可以使用下列任一命令安装这个新的包：</p>\n<pre><code>npm install -g @vue/cli\n# OR\nyarn global add @vue/cli\n</code></pre>\n<p>用这个命令来检查其版本是否正确 (3.x)：</p>\n<pre><code>vue --version\n</code></pre>\n<h2 id=\"创建Vue-CLI3版本的新项目\"><a href=\"#创建Vue-CLI3版本的新项目\" class=\"headerlink\" title=\"创建Vue CLI3版本的新项目\"></a>创建Vue CLI3版本的新项目</h2><p>创建项目可以用vue命令也可以用vue图形化界面<br>运行以下命令来创建一个新项目：</p>\n<pre><code>vue create hello-world\n</code></pre>\n<p>我下面介绍是使用图形界面创建项目：<br>执行以下名运行图形化界面</p>\n<pre><code>vue ui\n</code></pre>\n<p>执行完浏览器会自动打开一个<a class=\"link\"   href=\"http://localhost:8000/dashboard%E7%9A%84%E7%BD%91%E9%A1%B5%E3%80%82%E5%85%B6%E5%AE%9E%E5%B0%B1%E6%98%AF%E4%B8%80%E4%B8%AA%E6%9C%ACnode%E7%8E%AF%E5%A2%83%E8%BF%90%E8%A1%8C%E7%9A%84%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE%E3%80%82\" >http://localhost:8000/dashboard的网页。其实就是一个本node环境运行的一个项目。<i class=\"fas fa-external-link-alt\"></i></a><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/15590279512386.jpg\"\n                     \n                ></p>\n<p>在Vue项目管理器的界面可以查看项目列表，创建项目，导入已有的项目。</p>\n<p>选择目录创建项目<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/15590280578702.jpg\"\n                     \n                ></p>\n<p>取项目名字和选包管理器。<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/15590281262570.jpg\"\n                     \n                ></p>\n<p>选择项目需要的配置或现在已经保存的预设配置<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/15590283159001.jpg\"\n                     \n                ></p>\n<p>创建项目中，这个过程中会装好npm依赖库<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/15590283445727.jpg\"\n                     \n                ></p>\n<p>当前项目配置，及依赖选装<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/15590286439291.jpg\"\n                     \n                ></p>\n<h2 id=\"迁移老项目的src目录组件到新项目\"><a href=\"#迁移老项目的src目录组件到新项目\" class=\"headerlink\" title=\"迁移老项目的src目录组件到新项目\"></a>迁移老项目的src目录组件到新项目</h2><ol>\n<li>直接把老项目的src目录复制到新项目，把新项目的src改一个名字例如src_bk 备份放这里以便过程中参考。</li>\n<li>把老项目的static目录复制到新项目的public目录。</li>\n<li>在新项目运行 npm run build, 这个时候肯定会报错，会提示你需要安装src里面用到的依赖，直接复制报错提示 需要运行的命 类似下图<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/15590289868578.jpg\"\n                     \n                ></li>\n<li>配置项目环境变量Vue Cli3环境变量参考<a class=\"link\"   href=\"https://cli.vuejs.org/zh/guide/mode-and-env.html#%E6%A8%A1%E5%BC%8F\" >官方文档<i class=\"fas fa-external-link-alt\"></i></a> 在项目根目录创建各个环境的.env配置。如下图<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/15590291883313.jpg\"\n                     \n                ></li>\n<li>再就是src目录下老老代码可能会有运行时编译的报错, 可以配置vue.conifg.js的<a class=\"link\"   href=\"https://cli.vuejs.org/zh/config/#runtimecompiler\" >runtimeCompiler<i class=\"fas fa-external-link-alt\"></i></a>配置为true,但是这样会让应用额外增加 10kb 。所以我是吧老项目有用到运行时编译的组件都改掉，让其打包时编译。</li>\n</ol>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/15590301297524.jpg\"\n                     \n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/15590302939199.jpg\"\n                     \n                ></p>\n<h2 id=\"本地运行项目\"><a href=\"#本地运行项目\" class=\"headerlink\" title=\"本地运行项目\"></a>本地运行项目</h2><pre><code>npm run serve\n</code></pre>\n<p>如果有报错再根据错误提示修复问题。我这边目前没遇到什么大的问题。项目迁移完后一切正常。并且打包的文件比老项目架构大小少了大概30%。</p>\n","categories":["开发","前端"],"tags":["vue","js","css","vue-cli3"]},{"title":"Vue SSR服务端渲染-SRR指南构建","url":"/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/Vue-SSR%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93-SRR%E6%8C%87%E5%8D%97%E6%9E%84%E5%BB%BA.html","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>基于Vue-CLI v4版本构建的SPA项目改造成VueSSR服务端渲染项目。</p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>前段时间对网站项目进行了大的架构重构，上线已经半年了。一直想分享Vue-SSR项目架构，但是一直在忙SSR网站的架构优化迭代。<br>首先说一下做SSR项目重构的项目目的是什么</p>\n<ol>\n<li>更全面的SEO优化</li>\n<li>网站首屏渲染性能优化</li>\n<li>项目可维护性优化</li>\n<li>项目高可用性优化</li>\n</ol>\n<span id=\"more\"></span>\n\n<h2 id=\"技术选型\"><a href=\"#技术选型\" class=\"headerlink\" title=\"技术选型\"></a>技术选型</h2><p>我们这次选用的是Vue SSR指南自定义搭建Vue-SSR项目架构, 为啥不选用Vue开箱即用的SSR框架Nuxt?</p>\n<ol>\n<li>我们需要更多设置和选择的余地，Nuxt是更高级别的抽象，它为开发者做出了很多选择</li>\n<li>我们想更深度的了解SSR的工作原理</li>\n<li>Nuxt根据目录生成动态路由，让人感觉有点不自由（虽然有约束不一定是负面的）</li>\n</ol>\n<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><h2 id=\"需要熟悉的技术栈\"><a href=\"#需要熟悉的技术栈\" class=\"headerlink\" title=\"需要熟悉的技术栈\"></a>需要熟悉的技术栈</h2><ul>\n<li>Node.js</li>\n<li>Vue</li>\n<li>Webpack</li>\n<li>Nginx</li>\n<li>Redis</li>\n<li>CF动态CDN</li>\n</ul>\n<h2 id=\"事先阅读一遍相关文档\"><a href=\"#事先阅读一遍相关文档\" class=\"headerlink\" title=\"事先阅读一遍相关文档\"></a>事先阅读一遍相关文档</h2><ul>\n<li><a class=\"link\"   href=\"https://ssr.vuejs.org/zh/\" >Vue SSR指南<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"http://expressjs.com/en/guide/routing.html\" >Node.js框架Express<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"https://nuxtjs.org/docs/2.x/get-started/installation\" >Nuxt的文档<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"http://redisdoc.com/string/get.html\" >Redis文档<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><ul>\n<li>node v10以上环境</li>\n<li><a class=\"link\"   href=\"https://cli.vuejs.org/zh/guide/installation.html\" >Vue-CLI<i class=\"fas fa-external-link-alt\"></i></a>前端工具</li>\n</ul>\n<h1 id=\"创建SSR架构项目\"><a href=\"#创建SSR架构项目\" class=\"headerlink\" title=\"创建SSR架构项目\"></a>创建SSR架构项目</h1><p>下面构建的服务端渲染架构图如下图<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/%E7%BD%91%E7%AB%99SSR%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84%E5%9B%BE.png\"\n                      alt=\"网站SSR项目架构图\"\n                ></p>\n<h2 id=\"Vue-CLI创建项目\"><a href=\"#Vue-CLI创建项目\" class=\"headerlink\" title=\"Vue-CLI创建项目\"></a>Vue-CLI创建项目</h2><p>使用<code>vue ui</code>(项目管理界面)或者<code>vue create [options] &lt;app-name&gt;</code> Vue命令创建项目（具体Vue命令介绍使用<code>vue -h</code>命令查看）</p>\n<h3 id=\"Vue-ui-管理界面创建项目\"><a href=\"#Vue-ui-管理界面创建项目\" class=\"headerlink\" title=\"Vue ui 管理界面创建项目\"></a>Vue ui 管理界面创建项目</h3><p>执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">vue ui</span><br></pre></td></tr></table></figure>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16160806486175.jpg\"\n                     \n                ><br>进入<a class=\"link\"   href=\"http://localhost:8000/project/create\" >http://localhost:8000/project/create<i class=\"fas fa-external-link-alt\"></i></a> 图形界面按步骤创建项目<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16160807691660.jpg\"\n                     \n                ><br>选择Vue版本&amp;选择路由模式等<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16160809720243.jpg\"\n                     \n                ></p>\n<h3 id=\"Vue-命令创建项目\"><a href=\"#Vue-命令创建项目\" class=\"headerlink\" title=\"Vue 命令创建项目\"></a>Vue 命令创建项目</h3><p>这里就不详细介绍了，执行<code>vue create [options] &lt;app-name&gt;</code>命令根据提示选项选择需要的配置就好了。或查阅<a class=\"link\"   href=\"https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create\" >Vue-CLI官方文档<i class=\"fas fa-external-link-alt\"></i></a><br>创建项目有哪些可选项可通过<code>vue create --help</code>查看</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">vue create --help</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">vue create hello-world</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"调整项目目录结构\"><a href=\"#调整项目目录结构\" class=\"headerlink\" title=\"调整项目目录结构\"></a>调整项目目录结构</h2><p>创建完项目，我们现在得到的是一个Vue单页面应用，要把他改造成服务端渲染项目根据以下步骤调整项目结构</p>\n<h3 id=\"在根目录下新建server目录\"><a href=\"#在根目录下新建server目录\" class=\"headerlink\" title=\"在根目录下新建server目录\"></a>在根目录下新建server目录</h3><h4 id=\"server目录功能概述\"><a href=\"#server目录功能概述\" class=\"headerlink\" title=\"server目录功能概述\"></a>server目录功能概述</h4><p>server主要是负责服务端相关代码的配置，包含了之前单页面<code>npm run serve</code>的本地服务器功能。<br>主要包括以下主要功能</p>\n<ol>\n<li>服务端路由分配管理</li>\n<li>服务端控制中心</li>\n<li>服务端中间件，全局参数初始化</li>\n<li>服务端开发环境热更新</li>\n<li>服务端渲染以及缓存等</li>\n</ol>\n<h4 id=\"在server目录下面新建目录和文件\"><a href=\"#在server目录下面新建目录和文件\" class=\"headerlink\" title=\"在server目录下面新建目录和文件\"></a>在server目录下面新建目录和文件</h4><p>在server目录下面新建以下文件夹和文件<br>.<br>├── controllers<br>│   └── appController.js<br>├── middlewares<br>│   └── initMiddleware.js<br>├── routes<br>│   └── index.js<br>├── render<br>│   └── index.js<br>├── tools<br>│   ├── utill.js<br>│   └── cache<br>│       ├── redisCluster.js<br>│       └── constants.js<br>├── app.js<br>└── setup-dev.js</p>\n<p>server目录截图<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16161404797411.jpg\"\n                     \n                ></p>\n<h3 id=\"调整src目录\"><a href=\"#调整src目录\" class=\"headerlink\" title=\"调整src目录\"></a>调整src目录</h3><p>src目录还是主要负责前端业务逻辑/页面路由/页面组件/子组件/全局状态store等<br>新增文件夹<code>template</code>,<code>utils</code>。新增文件<code>entry-client.js</code>, <code>entry-server.js</code><br>修改main.js代码，接下来很多之前spa的new Vue/new Vuex等代码都会改为函数式return<br>因为在服务端我们要 <a class=\"link\"   href=\"https://ssr.vuejs.org/zh/guide/structure.html#%E9%81%BF%E5%85%8D%E7%8A%B6%E6%80%81%E5%8D%95%E4%BE%8B\" >避免状态单例（点击查看VueSSR指南文档了解更多）<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"调整public目录\"><a href=\"#调整public目录\" class=\"headerlink\" title=\"调整public目录\"></a>调整public目录</h3><p>public目前其实没啥调整的，把你需要的静态资源放public目录就好了，唯一重要的就是要把public目录下面的index.html删掉。<br>因为服务端渲染的时候用不上这个空壳的index.html，服务端渲染会重新按照对应路由渲染出来对应完整内容的index.html。</p>\n<h2 id=\"修改vue-config-js配置\"><a href=\"#修改vue-config-js配置\" class=\"headerlink\" title=\"修改vue.config.js配置\"></a>修改vue.config.js配置</h2><p>修改vue.config.js 新增vue.config.cilent.js 和 vue.config.server.js 来区分服务端渲染的打包配置，和客户端的打包配置。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vue.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> cilentConfig = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./vue.config.cilent&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> serverConfig = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./vue.config.server&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> lessToJs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;less-vars-to-js&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> paletteLess = fs.readFileSync(<span class=\"string\">&#x27;./src/styles/variables.less&#x27;</span>, <span class=\"string\">&#x27;utf8&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> globalVars = lessToJs(paletteLess, &#123; <span class=\"attr\">resolveVariables</span>: <span class=\"literal\">true</span>, <span class=\"attr\">stripPrefix</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// const isProd = process.env.NODE_ENV === &#x27;production&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  outputDir: <span class=\"string\">&#x27;server/public&#x27;</span>,</span><br><span class=\"line\">  configureWebpack: process.env.TARGET_ENV === <span class=\"string\">&#x27;server&#x27;</span> ? serverConfig : cilentConfig,</span><br><span class=\"line\">  chainWebpack: <span class=\"function\"><span class=\"params\">config</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> lessRule = config.module.rule(<span class=\"string\">&#x27;less&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(lessRule)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  css: &#123;</span><br><span class=\"line\">    requireModuleExtension: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    loaderOptions: &#123;</span><br><span class=\"line\">      less: &#123;</span><br><span class=\"line\">        globalVars,</span><br><span class=\"line\">        modules: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        javascriptEnabled: <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  pwa: &#123;</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;vue cli4 ssr&#x27;</span>,</span><br><span class=\"line\">    themeColor: <span class=\"string\">&#x27;#ff2556&#x27;</span>,</span><br><span class=\"line\">    appleMobileWebAppStatusBarStyle: <span class=\"string\">&#x27;black-translucent&#x27;</span>,</span><br><span class=\"line\">    workboxOptions: &#123;</span><br><span class=\"line\">      swDest: <span class=\"string\">&#x27;vue-cli4-ssr-sw.js&#x27;</span>,</span><br><span class=\"line\">      skipWaiting: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      clientsClaim: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      include: [</span><br><span class=\"line\">        /js\\/main.[<span class=\"number\">0</span>-9A-Za-z]&#123;<span class=\"number\">8</span>,<span class=\"number\">8</span>&#125;.js$/,</span><br><span class=\"line\">        /js\\/vendor.[<span class=\"number\">0</span>-9A-Za-z]&#123;<span class=\"number\">8</span>,<span class=\"number\">8</span>&#125;.js$/,</span><br><span class=\"line\">        /css\\/main.[<span class=\"number\">0</span>-9A-Za-z]&#123;<span class=\"number\">8</span>,<span class=\"number\">8</span>&#125;.css$/</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      cacheId: <span class=\"string\">&#x27;vue-cli4-ssr-sw-cache&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vue.config.cilent.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> VueSSRClientPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-server-renderer/client-plugin&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// const isProd = process.env.NODE_ENV === &#x27;production&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">&#x27;./src/entry-client.js&#x27;</span>,</span><br><span class=\"line\">  optimization: &#123;</span><br><span class=\"line\">    runtimeChunk: &#123;</span><br><span class=\"line\">      name: <span class=\"string\">&#x27;manifest&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    splitChunks: &#123;</span><br><span class=\"line\">      cacheGroups: &#123;</span><br><span class=\"line\">        vendor: &#123;</span><br><span class=\"line\">          test: <span class=\"regexp\">/[\\\\/]node_modules[\\\\/]/</span>,</span><br><span class=\"line\">          name: <span class=\"string\">&#x27;vendor&#x27;</span>,</span><br><span class=\"line\">          chunks: <span class=\"string\">&#x27;all&#x27;</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"comment\">// This plugins generates `vue-ssr-client-manifest.json` in the</span></span><br><span class=\"line\">    <span class=\"comment\">// output directory.</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> VueSSRClientPlugin(),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vue.config.server.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> nodeExternals = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack-node-externals&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> VueSSRServerPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-server-renderer/server-plugin&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">&#x27;./src/entry-server.js&#x27;</span>,</span><br><span class=\"line\">  target: <span class=\"string\">&#x27;node&#x27;</span>,</span><br><span class=\"line\">  devtool: <span class=\"string\">&#x27;source-map&#x27;</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    libraryTarget: <span class=\"string\">&#x27;commonjs2&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  externals: nodeExternals(&#123;</span><br><span class=\"line\">    whitelist: [<span class=\"regexp\">/\\.css$/</span>, <span class=\"regexp\">/vant\\/lib/</span>, <span class=\"regexp\">/ant-design-vue\\/lib/</span>],</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">  optimization: &#123;</span><br><span class=\"line\">    splitChunks: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// This is the plugin that turns the entire output of the server build</span></span><br><span class=\"line\">  <span class=\"comment\">// into a single JSON file. The default file name will be</span></span><br><span class=\"line\">  <span class=\"comment\">// `vue-ssr-server-bundle.json`</span></span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> VueSSRServerPlugin(),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"服务端vue-router客户端router同步\"><a href=\"#服务端vue-router客户端router同步\" class=\"headerlink\" title=\"服务端vue router客户端router同步\"></a>服务端vue router客户端router同步</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/main.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; sync &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex-router-sync&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App.vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> createRouter <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./router&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> createStore <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./store&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// import &#123; Sticky &#125; from &#x27;vant&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.config.productionTip = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Vue.use(Sticky) // 可以在main.js中全局按需引入，也可以在对应子组件中按需引入</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> createApp = <span class=\"function\">(<span class=\"params\">context</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// create router and store instances</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> router = createRouter()</span><br><span class=\"line\">  <span class=\"keyword\">const</span> store = createStore()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// sync so that route state is available as part of the store</span></span><br><span class=\"line\">  sync(store, router)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    data: &#123; <span class=\"attr\">url</span>: context ? context.url : <span class=\"string\">&#x27;&#x27;</span> &#125;,</span><br><span class=\"line\">    router,</span><br><span class=\"line\">    store,</span><br><span class=\"line\">    render: <span class=\"function\">(<span class=\"params\">h</span>) =&gt;</span> h(App),</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; app, router, store &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装依赖库\"><a href=\"#安装依赖库\" class=\"headerlink\" title=\"安装依赖库\"></a>安装依赖库</h2><p>最核心就是要选择node服务端的框架 <a class=\"link\"   href=\"http://expressjs.com/en/starter/installing.html\" >Express<i class=\"fas fa-external-link-alt\"></i></a></p>\n<ul>\n<li>express                // node服务端框架，当然也可以选择其他node框架，例如koa</li>\n<li>register-service-worker// PWA注册service worker的插件</li>\n<li>vue-server-renderer    // vue服务端渲染指南里面介绍的必须要用到的库，用户服务端渲染vue组件</li>\n<li>vuex-router-sync       // 同步服务端和客户端的路由</li>\n<li>webpack-hot-middleware // node端打包排查不必要打包的相关依赖</li>\n</ul>\n<p>其他相关依赖查看<a class=\"link\"   href=\"https://github.com/StriverF/vue-cli4-ssr/blob/master/package.json\" >demo的package.json<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"Vuex-全局状态\"><a href=\"#Vuex-全局状态\" class=\"headerlink\" title=\"Vuex 全局状态\"></a>Vuex 全局状态</h2><h3 id=\"服务端vuex-store初始化以及挂载\"><a href=\"#服务端vuex-store初始化以及挂载\" class=\"headerlink\" title=\"服务端vuex store初始化以及挂载\"></a>服务端vuex store初始化以及挂载</h3><p>服务端注入全局状态</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; src&#x2F;entry-server.js</span><br><span class=\"line\">\t&#x2F;&#x2F; serialized and injected into the HTML as &#96;window.__INITIAL_STATE__&#96;.</span><br><span class=\"line\">  \tcontext.rendered &#x3D; () &#x3D;&gt; context.state &#x3D; store.state</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"客户端接管服务端的vuex-store并动态注册\"><a href=\"#客户端接管服务端的vuex-store并动态注册\" class=\"headerlink\" title=\"客户端接管服务端的vuex store并动态注册\"></a>客户端接管服务端的vuex store并动态注册</h3><p>客户端接管状态</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; src&#x2F;entry-client.js</span><br><span class=\"line\">if (window.__INITIAL_STATE__) &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; We initialize the store state with the data injected from the server</span><br><span class=\"line\">  store.replaceState(window.__INITIAL_STATE__)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"环境变量配置\"><a href=\"#环境变量配置\" class=\"headerlink\" title=\"环境变量配置\"></a>环境变量配置</h2><p>服务端的.env配置跟Vue CLI里面的前端打包.env配置不一样。服务端的env配置的值是不公开的，一般情况下只有运维知道产生环境的.env配置只。<br>因为服务端的.env配置经常会要配置一些私钥或者一些 Redis集群的链接地址和授权，这些都是不对外公开的。<br>所以项目根目录下面的 .env要被.gitignore忽略，开发可以提交一个.env.example 环境变量名称和变量用途的例子给运维部署的时候参照。开发环境时大家可以在项目根目录本地创建.env单独配置自己本地环境的环境变量，一般都是测试环境的环境变量值。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>服务端渲染主要需要注意以下几点概念</p>\n<ol>\n<li>服务端跟客户端渲染环境不同，容易造成客户端能直接获取的全局变量在服务端获取不到如windows、document</li>\n<li>服务端渲染的数据状态会注入到html的window.<strong>INITIAL_STATE</strong> 客户端接管的时候会用这个状态数据验证客户端虚拟doc的内容是否和服务端一致，不一致会导致重新渲染甚至报错页面交互卡死。需要注意在客户端mounted什么周期前不要轻易对页面渲染的全局状态数据做修改，不然验证容易导致不一致。</li>\n<li>部分重定向逻辑和前置逻辑默认数据，可以在node服务端新建middlewares目录在下面编写服务端前置中间件逻辑</li>\n<li>验证Network里面的Doc请求是否首屏内容是否真的实现了服务端渲染，服务端渲染的数据需要在serverPrefetch生命周期提前加载好渲染页面相关数据，并挂载在全局状态。</li>\n</ol>\n<h1 id=\"GitHub-demo链接\"><a href=\"#GitHub-demo链接\" class=\"headerlink\" title=\"GitHub demo链接\"></a>GitHub demo链接</h1><p><a class=\"link\"   href=\"https://github.com/StriverF/vue-cli4-ssr\" >vue-cli4-ssr<i class=\"fas fa-external-link-alt\"></i></a></p>\n","categories":["开发","前端"],"tags":["vue","vue-cli","SSR"]},{"title":"Vue-Cli3、multi-page多页面、i18n多语言项目打包优化","url":"/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/Vue-Cli3%E3%80%81multi-page%E5%A4%9A%E9%A1%B5%E9%9D%A2%E3%80%81i18n%E5%A4%9A%E8%AF%AD%E8%A8%80%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E4%BC%98%E5%8C%96.html","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>这次主要是对打包文件 chunk-vendors文件拆包，和 chunk-common提取通用chunk 里面的多语言包进行分语言环境懒加载。<br>要做这这些事情，需要先了解以下内容：</p>\n<ul>\n<li>Webpack打包分析工具 <a class=\"link\"   href=\"https://github.com/webpack-contrib/webpack-bundle-analyzer\" >webpack-bundle-analyzer<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"https://kazupon.github.io/vue-i18n/zh/guide/lazy-loading.html\" >Vue i18n<i class=\"fas fa-external-link-alt\"></i></a> 延迟加载翻译包</li>\n<li>Webpack<a class=\"link\"   href=\"https://webpack.js.org/plugins/split-chunks-plugin/\" >splitChunks<i class=\"fas fa-external-link-alt\"></i></a> 根据主要常用的npm库拆分</li>\n<li>Vue-cli3<a class=\"link\"   href=\"https://cli.vuejs.org/zh/config/#pages\" >多页面<i class=\"fas fa-external-link-alt\"></i></a>入口配置</li>\n<li>Webpack<a class=\"link\"   href=\"https://webpack.js.org/plugins/dll-plugin/#dllplugin\" >dllPlugin<i class=\"fas fa-external-link-alt\"></i></a>预构建配置 </li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"i18n多语言包拆分\"><a href=\"#i18n多语言包拆分\" class=\"headerlink\" title=\"i18n多语言包拆分\"></a>i18n多语言包拆分</h2><h3 id=\"1-优化效果对比\"><a href=\"#1-优化效果对比\" class=\"headerlink\" title=\"1.优化效果对比\"></a>1.优化效果对比</h3><p>首先看一下优化前后的<a class=\"link\"   href=\"https://github.com/webpack-contrib/webpack-bundle-analyzer\" >webpack-bundle-analyzer<i class=\"fas fa-external-link-alt\"></i></a>的分析截图<br><strong>优化前</strong><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/15611061213051.jpg\"\n                     \n                ><br>从上图可以看到chunk-common.xxx.js 和chunk-vendors.xxx.js文件都特别大。700kb以上。<br>然而chunk-common.xxx.js文件大小主要被lang多语言包占了90%以上，然而网站加载显示的时候其实一次性加载所有语言包是没必要的。<br>下面看我们对多语言包进行拆分后的打包分析截图。<br><strong>多语言拆包优化后</strong><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/15611064529088.jpg\"\n                     \n                ><br>从优化后的截图看到vendors.xxx.js文件还是很大（后面我们再细讲vendors.xxx.js文件拆包优化）。再看chunk-common.xxx.js文件大小以及是160kb，这个时候它里面已经没有多语言包了。只有提取的通用代码，不过这通用代码其实我们还可以优化，让它变的更小。再看有多个多语言包的js都是按照语言分包的js。比如ar zh都是单独的语言包。在对应语言环境的时候只需要加载一种语言包就好了。拆分后的语言包js每个都小于200kb，这个状态下还有很大优化空间，我们的语言包还可以分页面以及优化语言包的key命名来减少大小。</p>\n<h3 id=\"2-多语言拆包实施\"><a href=\"#2-多语言拆包实施\" class=\"headerlink\" title=\"2.多语言拆包实施\"></a>2.多语言拆包实施</h3><p>我们优化前使用vue i18n的方式都是直接 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.use(VueI18n)</span><br><span class=\"line\"><span class=\"keyword\">const</span> i18n = <span class=\"keyword\">new</span> VueI18n(&#123;</span><br><span class=\"line\">  locale: store.getters.currentLang,</span><br><span class=\"line\">  messages: &#123;</span><br><span class=\"line\">    ar: &#123;...&#125;,</span><br><span class=\"line\">    zh: &#123;...&#125;,</span><br><span class=\"line\">    en: &#123;...&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这样虽然单页面切换语言可以不强制刷新页面就直接切换语言，但是带来的后果是打包资源大量被语言包占用。</p>\n<p>所以我们看看vue-i18n的<a class=\"link\"   href=\"https://kazupon.github.io/vue-i18n/zh/guide/lazy-loading.html\" >延迟加载翻译<i class=\"fas fa-external-link-alt\"></i></a>的文档</p>\n<p>可以看到，文档最前面就说到：一次加载所有翻译文件是过度和不必要的。使用 Webpack 时，延迟加载或异步加载转换文件非常简单。<br>这就是我们想要的！<br>按照文档搞完后，调整了语言包的结构，通过在router.beforeEach里面来懒加载要切换的语言包，这样不仅语言包打包被拆分。单页面切换语言也可以达到不强制刷新页面的体验。（如果你们网站的路由里面就有多语言参数那就更好处理了）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> lang = to.params.lang</span><br><span class=\"line\">  loadLanguageAsync(lang).then(<span class=\"function\">() =&gt;</span> next())</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>我们可以通过检查 lang 是否实际上是否支持来改进这一点，调用 reject 这样我们就可以在 beforeEach 捕获路由转换。</p>\n<h2 id=\"弃用占用资源超大并使用价值不打的依赖库\"><a href=\"#弃用占用资源超大并使用价值不打的依赖库\" class=\"headerlink\" title=\"弃用占用资源超大并使用价值不打的依赖库\"></a>弃用占用资源超大并使用价值不打的依赖库</h2><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/15635179016664.jpg\"\n                     \n                ><br>以我们项目为例，从打包分析图看出我们的chunk-vendors.xxx.js目前占用767kb。算是单文件比较大的了，如果用户网速比较慢加载大概需要2秒左右。</p>\n<p>我们在看看分析图chunk-vendors.xxx.js里面主要被moment和swiper.js所占据。<br>去看了项目里面对moment依赖库的使用，主要是用来做时间格式显示的转换。这个小功能完全不用这样的一个依赖库。在看moment里面主要是被多语言资源给占据，因为这个依赖库主要为了适配各个地区国家的时间显示格式。所有决定把moment这个依赖库uninstall。</p>\n<p>去看了一下vue-i18n(多语言国际化依赖库)的文档发现我们用的多语言库就可以帮我们实现时间格式化 <a class=\"link\"   href=\"https://kazupon.github.io/vue-i18n/zh/guide/datetime.html\" >Vue I18n 日期时间本地化<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>然后我们就进行了代码替换，使用 vue-i18n 的 $d(Date, ‘YMD’)<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/15635195412784.jpg\"\n                     \n                ></p>\n<p>然后uninstall moment依赖库后的打包分析图，chunk-vendors.xxx.js减少到502KB<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/15635274050674.jpg\"\n                     \n                ></p>\n<h2 id=\"依赖库拆包减少vendors-xxx-js文件大小\"><a href=\"#依赖库拆包减少vendors-xxx-js文件大小\" class=\"headerlink\" title=\"依赖库拆包减少vendors.xxx.js文件大小\"></a>依赖库拆包减少vendors.xxx.js文件大小</h2><p>从上面看的我们 chunk-vendors.xxx.js 虽然moment依赖弃用后，在chunk-vendors.xxx.js 中Swiper.js就浮现，目前swiper.js是占了大头，所以枪打出头鸟，我们现在就来想办法把Swiper.js进行拆包出来。<br>修改vue.config.js的configureWebpack配置，配置splitChunks</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    configureWebpack: &#123;</span><br><span class=\"line\">        optimization: &#123;</span><br><span class=\"line\">            splitChunks: &#123;</span><br><span class=\"line\">                cacheGroups: &#123;</span><br><span class=\"line\">                    common: &#123;</span><br><span class=\"line\">                        name: <span class=\"string\">&#x27;chunk-common&#x27;</span>,</span><br><span class=\"line\">                        minChunks: <span class=\"number\">2</span>,</span><br><span class=\"line\">                        priority: -<span class=\"number\">20</span>,</span><br><span class=\"line\">                        chunks: <span class=\"string\">&#x27;initial&#x27;</span>,</span><br><span class=\"line\">                        reuseExistingChunk: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                        enforce: <span class=\"literal\">true</span> <span class=\"comment\">// 加chunk-common的复写配置，主要是设置强制，因为发现加了下面的chunk-swiper，chunk-common就不生成了。资源会被合并到入口页面的js里面。可能是splitChunks有啥机制判断适当情况才生成chunk-common。</span></span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    swiper: &#123;</span><br><span class=\"line\">                        name: <span class=\"string\">&#x27;chunk-swiper&#x27;</span>,</span><br><span class=\"line\">                        test: <span class=\"regexp\">/[\\\\/]node_modules[\\\\/]swiper[\\\\/]/</span>,</span><br><span class=\"line\">                        chunks: <span class=\"string\">&#x27;initial&#x27;</span>,</span><br><span class=\"line\">                        priority: <span class=\"number\">1</span>,</span><br><span class=\"line\">                        reuseExistingChunk: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                        enforce: <span class=\"literal\">true</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后在vue.config.js 的<a class=\"link\"   href=\"https://cli.vuejs.org/zh/config/#pages\" >pages配置<i class=\"fas fa-external-link-alt\"></i></a><br>的chunks属性加上’chunk-swiper’的引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">pages:[&#123;</span><br><span class=\"line\">    entry: path,</span><br><span class=\"line\">    template: &#39;.&#x2F;src&#x2F;public&#x2F;index.html&#39;,</span><br><span class=\"line\">    filename: &#39;index.html&#39;,</span><br><span class=\"line\">    &#x2F;&#x2F;   title: &#39;title&#39;,</span><br><span class=\"line\">    chunks: [&#39;chunk-vendors&#39;, &#39;chunk-common&#39;, &#39;chunk-swiper&#39;, index]</span><br><span class=\"line\">&#125;]</span><br></pre></td></tr></table></figure>\n<p>然后再执行打包，看的打包分析图，vendors.xxx.js减少到375KB🤩</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/15635304045741.jpg\"\n                     \n                ></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>优化打包的方法有很多种，选择适合自己的就好了。<br>比如还可以把vue相关的js<a class=\"link\"   href=\"https://juejin.im/post/5c3c544c6fb9a049d37f5903#heading-13\" >用cdn减少文件打包体积等<i class=\"fas fa-external-link-alt\"></i></a>。<br>利用Webpack dllPlugin提示打包热编译速度，减少打包文件大小。<br>只要你想去做，意愿够强，看似很难完成的事情其实有千万中方式可以解决。</p>\n","categories":["开发","前端"],"tags":["vue","js","vue-cli3","webpack","i18n"]},{"title":"Vue-l10n 货币本地化Vue插件","url":"/%E5%BC%80%E5%8F%91/Vue-l10n-%E8%B4%A7%E5%B8%81%E6%9C%AC%E5%9C%B0%E5%8C%96Vue%E6%8F%92%E4%BB%B6.html","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>前段时间看到项目里面的货币符号和金额转换的Vue 全局过滤器，感觉这样实现一点都不优雅，而且存在不完善，不统一的问题。比如每次都需要实时算，每次切换货币要强刷页面重新加载。然后就想到了<a class=\"link\"   href=\"https://kazupon.github.io/vue-i18n/guide/number.html\" >vue-i18n<i class=\"fas fa-external-link-alt\"></i></a>这个vue官方插件，多语言国际化，他是怎么做到不刷新页面切换语言的？于是就去观摩<a class=\"link\"   href=\"https://github.com/kazupon/vue-i18n\" >vue-i18n的源码<i class=\"fas fa-external-link-alt\"></i></a>，然后我就参考<a class=\"link\"   href=\"https://kazupon.github.io/vue-i18n/guide/number.html\" >vue-i18n<i class=\"fas fa-external-link-alt\"></i></a>写了一个<a class=\"link\"   href=\"https://docs.patpat.site/doc\" >vue-l10n<i class=\"fas fa-external-link-alt\"></i></a>的货币转换本地化的Vue插件。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"vue-l10n-一个货币显示本地化的Vue插件\"><a href=\"#vue-l10n-一个货币显示本地化的Vue插件\" class=\"headerlink\" title=\"vue-l10n 一个货币显示本地化的Vue插件\"></a>vue-l10n 一个货币显示本地化的Vue插件</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>vue-l10n-currency 是参照vue-i18n 的vue插件方式实现的一个 货币本地化转换Vue插件。<br>Dmoe预览和文档 <a class=\"link\"   href=\"http://docs.patpat.site/\" >vue-l10n example<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install vue-l10n -D</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><h4 id=\"在Vue项目的main-js中\"><a href=\"#在Vue项目的main-js中\" class=\"headerlink\" title=\"在Vue项目的main.js中\"></a>在Vue项目的main.js中</h4><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> VueL10nCurrency <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue-l10n&#x27;</span></span><br><span class=\"line\">Vue.use(VueL10nCurrency)</span><br><span class=\"line\"><span class=\"keyword\">const</span> l10nCurrency = <span class=\"keyword\">new</span> VueL10nCurrency(&#123;</span><br><span class=\"line\">  isoCode: <span class=\"string\">&#x27;USD&#x27;</span>,</span><br><span class=\"line\">  stuExchangeRate: <span class=\"number\">1</span>,</span><br><span class=\"line\">  utsExchangeRate: <span class=\"number\">1</span>,</span><br><span class=\"line\">  symbolDisplay: <span class=\"string\">&#x27;$&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  l10nCurrency,</span><br><span class=\"line\">  router,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App)</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在Vue项目的模板中\"><a href=\"#在Vue项目的模板中\" class=\"headerlink\" title=\"在Vue项目的模板中\"></a>在Vue项目的模板中</h4><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;&#123;&#123;$uts(<span class=\"number\">34.62</span>)&#125;&#125;&lt;<span class=\"regexp\">/p&gt; /</span><span class=\"regexp\">/ 按照汇率从USD(美元)转换为Self(本地货币)，保留两位小数四舍五入</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;p&gt;&#123;&#123;$utsc(34.62)&#125;&#125;&lt;/</span>p&gt; <span class=\"comment\">// 按照汇率从USD(美元)转换为Self(本地货币)，保留两位小数,两位小数后值大于0就进位</span></span><br><span class=\"line\">&lt;p&gt;&#123;&#123;$utst(<span class=\"number\">34.62</span>)&#125;&#125;&lt;<span class=\"regexp\">/p&gt; /</span><span class=\"regexp\">/ 按照汇率从USD(美元)转换为Self(本地货币)，保留两位小数,舍去两位小数后的值不进位</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;p&gt;&#123;&#123;$stu(237.41)&#125;&#125;&lt;/</span>p&gt; <span class=\"comment\">// 按照汇率从Self(本地货币)转换为USD(美元)保留两位小数四舍五入</span></span><br><span class=\"line\">&lt;p&gt;&#123;&#123;$textUts(<span class=\"string\">&quot;这个金额是$23.5,那个金额是$18.99&quot;</span>)&#125;&#125;&lt;<span class=\"regexp\">/p&gt; /</span><span class=\"regexp\">/ 将一段字符串中的$符号的金额，按照汇率从USD(美元)转换为Self(本地货币)，保留两位小数四舍五入</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;p&gt;&#123;&#123;$textUtsi(&quot;这个金额是$23.5,那个金额是$18.99&quot;)&#125;&#125;&lt;/</span>p&gt; <span class=\"comment\">// 将一段字符串中的$符号的金额，按照汇率从USD(美元)转换为Self(本地货币)，保留整数四舍五入</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在js中切换货币\"><a href=\"#在js中切换货币\" class=\"headerlink\" title=\"在js中切换货币\"></a>在js中切换货币</h4><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> isoCode = <span class=\"string\">&#x27;CNY&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> utsExchangeRate = <span class=\"number\">6.85765</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> stuExchangeRate = <span class=\"number\">0.14582</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> symbolDisplay = <span class=\"string\">&#x27;￥&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.$l10nCurrency.currency = &#123;</span><br><span class=\"line\">  isoCode,</span><br><span class=\"line\">  stuExchangeRate,</span><br><span class=\"line\">  utsExchangeRate,</span><br><span class=\"line\">  symbolDisplay</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"API文档\"><a href=\"#API文档\" class=\"headerlink\" title=\"API文档\"></a>API文档</h3><p><strong>Vue全局对象</strong></p>\n<p>l10nCurrency</p>\n<p><code>this.$l10nCurrency </code></p>\n<p>对象属性：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">currency: &#123;</span><br><span class=\"line\">    isoCode:&#39;USD&#39;,</span><br><span class=\"line\">    stuExchangeRate: 1,</span><br><span class=\"line\">    utsExchangeRate: 1,</span><br><span class=\"line\">    symbolDisplay: ‘$’</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">_computeTypeEnum: &#123;</span><br><span class=\"line\">    ROUNDING: &#39;rounding&#39;, &#x2F;&#x2F; 保留两位小数，四舍五入</span><br><span class=\"line\">    CARRY: &#39;carry&#39;, &#x2F;&#x2F; 保留两位小数，后面有值就进位</span><br><span class=\"line\">    TRUNCATION: &#39;truncation&#39;, &#x2F;&#x2F; 保留两位小数，直接舍去后面的小数</span><br><span class=\"line\">    INT: &#39;int&#39;, &#x2F;&#x2F; 保留整数，四舍五入</span><br><span class=\"line\">    ORIGINAL: &#39;original&#39; &#x2F;&#x2F; 保留原始计算结果</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>Vue全局函数</th>\n<th>使用</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>uts</td>\n<td>$uts(34.62)</td>\n<td>美元转当地货币金额（保留两位小数，四舍五入）</td>\n</tr>\n<tr>\n<td>utsc</td>\n<td>$utsc(34.62)</td>\n<td>美元转当地货币金额（保留两位小数，后面有值就进位）</td>\n</tr>\n<tr>\n<td>utst</td>\n<td>$utst(34.62)</td>\n<td>美元转当地货币金额（保留两位小数，直接舍去后面的小数）</td>\n</tr>\n<tr>\n<td>stu</td>\n<td>$stu(237.41)</td>\n<td>当地货币美元金额（保留两位小数，四舍五入）</td>\n</tr>\n<tr>\n<td>stuo</td>\n<td>$stuo(237.41)</td>\n<td>当地货币美元金额（保留原始计算结果）</td>\n</tr>\n<tr>\n<td>textUts</td>\n<td>$textUts(“这个金额是$23.5,那个金额是$18.99”)</td>\n<td>美元字符串转当地货币字符串（保留两位小数，四舍五入）</td>\n</tr>\n<tr>\n<td>textUtsi</td>\n<td>$textUtsi(“这个金额是$23.5,那个金额是$18.99”)</td>\n<td>美元字符串转当地货币字符串（保留整数，四舍五入）</td>\n</tr>\n</tbody></table>\n","categories":["开发"],"tags":["vue","js","plugin"]},{"title":"VueJs单页面应用SEO解决方案","url":"/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/VueJs%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%BA%94%E7%94%A8SEO%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html","content":"<h1 id=\"首先我们来科普一下几个概念：\"><a href=\"#首先我们来科普一下几个概念：\" class=\"headerlink\" title=\"首先我们来科普一下几个概念：\"></a>首先我们来科普一下几个概念：</h1><p>1）SPA：单页面应用，基于vue框架开发的项目很多都属于单页面应用；<br>2）SSR ：server side rendering, 服务端渲染，额，这个不是订阅那个SSR，我一开始就弄混了；<br>3）Prerender：预渲染，Prerender.io是基于Node.js的程序，它可以让你的JavaScript网站支持搜索引擎，社交媒体，并且它兼容所有的JavaScript框架和库。它采用PhantomJS渲染JavaScript的网页然后呈现为HTML。此外，我们可以实现的prerender服务层来缓存访问过的页面，这将大大提高性能；<br>4）SEO：搜索引擎优化，指通过对网站进行站内优化、修复和站外优化，从而提高网站的网站关键词排名以及公司产品的曝光度。<br>5）Nuxt：是一个基于 Vue.js 的通用应用框架，预设了利用Vue.js开发服务端渲染的应用所需要的各种配置，可以为基于 Vue.js 的应用提供生成对应的静态站点的功能。</p>\n<span id=\"more\"></span>\n\n<p>SPA 进化到如今，已经从「拼能力」逐渐过渡到「拼体验」,大家也把目光转向了 SPA 相对多页后端渲染应用的两个最大缺陷</p>\n<ul>\n<li>首屏时间</li>\n<li>SEO（Search Engine Optimization）</li>\n</ul>\n<p>这次我主要讲解决SEO的问题，下面请看思维导图:<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/SEO%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.png\"\n                      alt=\"SEO解决方案\"\n                ></p>\n<h1 id=\"Nuxt-js-服务端渲染-静态资源生成器方案\"><a href=\"#Nuxt-js-服务端渲染-静态资源生成器方案\" class=\"headerlink\" title=\"Nuxt.js 服务端渲染/静态资源生成器方案\"></a><a class=\"link\"   href=\"https://zh.nuxtjs.org/guide\" >Nuxt.js<i class=\"fas fa-external-link-alt\"></i></a> 服务端渲染/静态资源生成器方案</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>从头搭建一个服务端渲染的应用是相当复杂的。Nuxt.js 让这一切变得简单。Nuxt 是一个基于 Vue 生态的更高层的框架，为开发服务端渲染的 Vue 应用提供了极其便利的开发体验。更酷的是，你甚至可以用它来做为静态站生成器。</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>Nuxt.js 默认的配置涵盖了大部分使用情形，可通过 nuxt.config.js 来覆盖默认的配置。</p>\n<h2 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h2><p>Nuxt.js 依据 pages 目录结构自动生成 vue-router 模块的路由配置。<br>可自定义动态路由，嵌套路由 甚至给路由跳转定义过度动效</p>\n<h2 id=\"视图\"><a href=\"#视图\" class=\"headerlink\" title=\"视图\"></a>视图</h2><p>方便灵活的自定义应用模板、页面、布局和HTML头部等内容。</p>\n<h2 id=\"异步数据\"><a href=\"#异步数据\" class=\"headerlink\" title=\"异步数据\"></a>异步数据</h2><p>Nuxt.js 扩展了 Vue.js，增加了一个叫 asyncData 的方法，使得我们可以在设置组件的数据之前能异步获取或处理数据。</p>\n<h2 id=\"资源文件\"><a href=\"#资源文件\" class=\"headerlink\" title=\"资源文件\"></a>资源文件</h2><p>区分Webpack构建资源和静态资源<br>资源文件随心管理，对于不需要通过 Webpack 处理的静态资源文件，可以放置在 static 目录中。</p>\n<h2 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h2><p>可以配置需要在 根vue.js应用 实例化之前需要运行的 Javascript 插件，可以是你自己写的库或第三方模块。</p>\n<h2 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h2><p>模块是Nuxt.js扩展，可以扩展其核心功能并添加无限的集成。</p>\n<h2 id=\"Vuex状态树\"><a href=\"#Vuex状态树\" class=\"headerlink\" title=\"Vuex状态树\"></a>Vuex状态树</h2><p>对于每个大项目来说，使用状态树 (store) 管理状态 (state) 十分有必要。Nuxt.js内核实现了Vuex。</p>\n<h2 id=\"命令和部署\"><a href=\"#命令和部署\" class=\"headerlink\" title=\"命令和部署\"></a>命令和部署</h2><p>Nuxt.js 提供了一系列常用的命令, 用于开发或发布部署。<br>Nuxt.js 提供了两种发布部署应用的方式：服务端渲染应用部署 和 静态应用部署。</p>\n<h1 id=\"Prerender（将JS网站生成静态HTLM被搜索引擎完美地抓取）\"><a href=\"#Prerender（将JS网站生成静态HTLM被搜索引擎完美地抓取）\" class=\"headerlink\" title=\"Prerender（将JS网站生成静态HTLM被搜索引擎完美地抓取）\"></a><a class=\"link\"   href=\"https://prerender.io/\" >Prerender<i class=\"fas fa-external-link-alt\"></i></a>（将JS网站生成静态HTLM被搜索引擎完美地抓取）</h1><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/15432847324890.jpg\"\n                      alt=\"15432847324890\"\n                ></p>\n<h2 id=\"介绍-1\"><a href=\"#介绍-1\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>在服务器上安装的Prerender.io中间件将检查每个请求，以查看它是否是来自爬网程序的请求。如果它是来自爬虫的请求，则中间件将向Prerender.io发送请求以获取该页面的静态HTML。如果没有，请求将继续到您的正常服务器路由。爬虫永远不会知道您正在使用Prerender.io，因为响应始终通过您的服务器。</p>\n<h2 id=\"谷歌批准\"><a href=\"#谷歌批准\" class=\"headerlink\" title=\"谷歌批准\"></a>谷歌批准</h2><p>Google编写了Prerender.io遵循的AJAX抓取规范，因此Google和其他搜索引擎可以保证您的网站正确抓取</p>\n<h2 id=\"服务端中间件\"><a href=\"#服务端中间件\" class=\"headerlink\" title=\"服务端中间件\"></a>服务端中间件</h2><p>拥有多种编程语言中间件：ExpressJS、Rails(Ruby)、Nginx、Apahe等</p>\n<h2 id=\"价钱\"><a href=\"#价钱\" class=\"headerlink\" title=\"价钱\"></a>价钱</h2><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/15432851581549.jpg\"\n                      alt=\"15432851581549\"\n                ></p>\n<h1 id=\"SSR-（server-side-rendering-服务端渲染）方案\"><a href=\"#SSR-（server-side-rendering-服务端渲染）方案\" class=\"headerlink\" title=\"SSR （server side rendering, 服务端渲染）方案\"></a><a class=\"link\"   href=\"https://ssr.vuejs.org/zh/\" >SSR<i class=\"fas fa-external-link-alt\"></i></a> （server side rendering, 服务端渲染）方案</h1><h2 id=\"介绍-2\"><a href=\"#介绍-2\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>将同一个组件渲染为服务器端的 HTML 字符串，将它们直接发送到浏览器，最后将这些静态标记”激活”为客户端上完全可交互的应用程序。</p>\n<h2 id=\"服务器端渲染\"><a href=\"#服务器端渲染\" class=\"headerlink\" title=\"服务器端渲染\"></a>服务器端渲染</h2><ul>\n<li>更好的 SEO，由于搜索引擎爬虫抓取工具可以直接查看完全渲染的页面。</li>\n<li>更快的内容到达时间(time-to-content)，特别是对于缓慢的网络情况或运行缓慢的设备。</li>\n</ul>\n<h2 id=\"使用服SSR时需要权衡之处\"><a href=\"#使用服SSR时需要权衡之处\" class=\"headerlink\" title=\"使用服SSR时需要权衡之处\"></a>使用服SSR时需要权衡之处</h2><ul>\n<li>开发条件所限。浏览器特定的代码，只能在某些生命周期钩子函数(lifecycle hook)中使用；一些外部扩展库(external library)可能需要特殊处理，才能在服务器渲染应用程序中运行。</li>\n<li>涉及构建设置和部署的更多要求。与可以部署在任何静态文件服务器上的完全静态单页面应用程序(SPA)不同，服务器渲染应用程序，需要处于 Node.js server 运行环境。</li>\n<li>更多的服务器端负载。在 Node.js 中渲染完整的应用程序，显然会比仅仅提供静态文件的 server 更加大量占用 CPU 资源(CPU-intensive - CPU 密集)，因此如果你预料在高流量环境(high traffic)下使用，请准备相应的服务器负载，并明智地采用缓存策略。</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><h4 id=\"综上所述3种方案\"><a href=\"#综上所述3种方案\" class=\"headerlink\" title=\"综上所述3种方案\"></a>综上所述3种方案</h4><ul>\n<li>Nuxt.js（对后期可维护性，以及开发效率会比较高，可轻松展核心插件）</li>\n<li>Prerender（可作为临时解决SEO的方案，但不是长期和倾向完美的方案）</li>\n<li>SSR（对研发团队要求高，对服务器要求高。）</li>\n</ul>\n","categories":["开发","前端"],"tags":["vue","js","SSR","SEO","Nuxt"]},{"title":"Xcode10.1 iPhone has denied the launch request","url":"/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/Xcode10-1-iPhone-has-denied-the-launch-request.html","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>测试环境<br>Xcode10.1<br>iPhone8 ios12.1.4<br>真机调试的时出现下图报错<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/15525532058593.jpg\"\n                     \n                ></p>\n<span id=\"more\"></span>\n\n<h2 id=\"Google上找答案\"><a href=\"#Google上找答案\" class=\"headerlink\" title=\"Google上找答案\"></a>Google上找答案</h2><div style='background-color: blanchedalmond;padding: 10px 10px 10px 10px'>\nAfter days of research and thanks for the help @Little Green Viper I found a solution.\n\n<p>Basically, some Apple Worldwide Developer Relations Certification Authority weren’t working after the update, but were able to compile successful for the iOS 11. Then, the most risky solution is deleting all the Apple Worldwide Developer Certificates, BUT before to do that, try creating a new user on your Mac</p>\n<p>(System Preferences &gt; Users and groups &gt; New User ) that should work.</p>\n<p>Now you have to options, work in the new user or re-sign the certificates, in my personal case, I picked up the first option.</p>\n</div>\n翻译上面的👆\n<div style='background-color: aqua;padding: 10px 10px 10px 10px'>\n基本上，有些Apple Worldwide Developer Relations Certification Authority人在更新后没有工作，但能够成功编译iOS 11。然后，最危险的解决方案是删除所有Apple Worldwide Developer Certificates，但在此之前，尝试创建一个新用户Mac\n\n<p>（System Preferences&gt; Users and groups&gt; New User）应该工作。</p>\n<p>现在你必须选择，在新用户中工作或重新签署证书，在我个人的情况下，我选择了第一个选项。</p>\n</div>\n\n<p><a class=\"link\"   href=\"https://stackoverflow.com/questions/52415694/ios-12-ipad-denied-launch-request-xcode/53676140#53676140\" >Stackverfow上的链接<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><font color=red><strong>但是遗憾的是以上方法我试了 对我的环境并没有用。</strong></font></p>\n<h2 id=\"找各种清理本地缓存的方式\"><a href=\"#找各种清理本地缓存的方式\" class=\"headerlink\" title=\"找各种清理本地缓存的方式\"></a>找各种清理本地缓存的方式</h2><p>最后找到一种方式对我有用。<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/15525545113324.jpg\"\n                     \n                ><br>Edit Scheme -&gt; Executable &gt; Ask On Launch<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/15525545544247.jpg\"\n                     \n                ></p>\n<p>出现这个错误的原因是手机的缓存了不正确的签名数据,<br>主要是因为多个项目用到了同样的bundle ID导致</p>\n","categories":["开发","前端"],"tags":["ios","Xcode"]},{"title":"ios代码自动布局 Masonry","url":"/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/ios%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E5%B8%83%E5%B1%80%E8%87%AA%E5%8A%A8%E5%B8%83%E5%B1%80Masonry.html","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><figure class=\"highlight objectivec\"><table><tr><td class=\"code\"><pre><span class=\"line\">MagicNumber -&gt; autoresizingMask -&gt; autolayout</span><br></pre></td></tr></table></figure>\n\n<p>以下是纯手写代码所经历的关于页面布局的三个时期</p>\n<span id=\"more\"></span>\n\n<ul>\n<li>在iphone1-iphone3gs时代 window的size固定为(320,480) 我们只需要简单计算一下相对位置就好了</li>\n<li>在iphone4-iphone4s时代 苹果推出了retina屏 但是给了码农们非常大的福利:window的size不变</li>\n<li>在iphone5-iphone5s时代 window的size变了(320,568) 这时autoresizingMask派上了用场(为啥这时候不用Autolayout? 因为还要支持ios5呗) 简单的适配一下即可</li>\n<li>在iphone6+时代 window的width也发生了变化(相对5和5s的屏幕比例没有变化) 终于是时候抛弃autoresizingMask改用autolayout了(不用支持ios5了 相对于屏幕适配的多样性来说autoresizingMask也已经过时了)</li>\n</ul>\n<p>那如何快速的上手autolayout呢? 说实话 当年ios6推出的同时新增了autolayout的特性 我看了一下官方文档和demo 就立马抛弃到一边了 因为实在过于的繁琐和啰嗦(有过经验的朋友肯定有同感)</p>\n<p>直到iphone6发布之后 我知道使用autolayout势在必行了 这时想起了以前在浏览Github看到过的一个第三方库Masonry 在花了几个小时的研究使用后 我就将autolayout掌握了(重点是我并没有学习任何的官方文档或者其他的关于autolayout的知识) 这就是我为什么要写下这篇文章来推荐它的原因</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>Masonry是一个轻量级的布局框架 拥有自己的描述语法 采用更优雅的链式语法封装自动布局 简洁明了 并具有高可读性 而且同时支持 iOS 和 Max OS X</p>\n<p>我们先来看一段官方的sample code来认识一下Masonry</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"code\"><pre><span class=\"line\">[view1 mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">    make.edges.equalTo(superview).with.insets(padding);</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n<p>看到block里面的那句话: make edges equalTo superview with insets<br>通过链式的自然语言 就把view1给autolayout好了 是不是简单易懂?</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>看一下Masonry支持哪一些属性</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">readonly</span>) MASConstraint *left;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">readonly</span>) MASConstraint *top;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">readonly</span>) MASConstraint *right;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">readonly</span>) MASConstraint *bottom;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">readonly</span>) MASConstraint *leading;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">readonly</span>) MASConstraint *trailing;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">readonly</span>) MASConstraint *width;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">readonly</span>) MASConstraint *height;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">readonly</span>) MASConstraint *centerX;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">readonly</span>) MASConstraint *centerY;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">readonly</span>) MASConstraint *baseline;</span><br></pre></td></tr></table></figure>\n<p>这些属性与NSLayoutAttrubute的对照表如下</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/屏幕快照%202015-08-20%20下午10.42.38.png\"\n                      class=\"img-center\" /\n                >\n\n\n\n<p>其中leading与left trailing与right 在正常情况下是等价的 但是当一些布局是从右至左时(比如阿拉伯文?没有类似的经验) 则会对调 换句话说就是基本可以不理不用 用left和right就好了</p>\n<p>在ios8发布后 又新增了一堆奇奇怪怪的属性(有兴趣的朋友可以去瞅瞅) Masonry暂时还不支持(不过你要支持ios6,ios7 就没必要去管那么多了)</p>\n<p>下面进入正题(为了方便 我们测试的superView都是一个size为(300,300)的UIView)</p>\n<p>下面 通过一些简单的实例来简单介绍如何轻松愉快的使用Masonry:</p>\n<h3 id=\"1-基础-居中显示一个view\"><a href=\"#1-基础-居中显示一个view\" class=\"headerlink\" title=\"1. [基础] 居中显示一个view\"></a>1. [基础] 居中显示一个view</h3><figure class=\"highlight objectivec\"><table><tr><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</span><br><span class=\"line\">    <span class=\"comment\">// Do any additional setup after loading the view.</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">UIView</span> *sv = [<span class=\"built_in\">UIView</span> new];</span><br><span class=\"line\">    [sv showPlaceHolder];</span><br><span class=\"line\">    sv.backgroundColor = [<span class=\"built_in\">UIColor</span> blackColor];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:sv];</span><br><span class=\"line\">    [sv mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">        make.center.equalTo(<span class=\"keyword\">self</span>.view);</span><br><span class=\"line\">        make.size.mas_equalTo(<span class=\"built_in\">CGSizeMake</span>(<span class=\"number\">300</span>, <span class=\"number\">300</span>));</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<p>使用我之间写的MMPlaceHolder 可以看到superview已经按照我们预期居中并且设置成了适当的大小</p>\n<p>那么先看看这几行代码</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//从此以后基本可以抛弃CGRectMake了</span></span><br><span class=\"line\"><span class=\"built_in\">UIView</span> *sv = [<span class=\"built_in\">UIView</span> new];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在做autoLayout之前 一定要先将view添加到superview上 否则会报错</span></span><br><span class=\"line\">[<span class=\"keyword\">self</span>.view addSubview:sv];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//mas_makeConstraints就是Masonry的autolayout添加函数 将所需的约束添加到block中行了</span></span><br><span class=\"line\">[sv mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将sv居中(很容易理解吧?)</span></span><br><span class=\"line\">    make.center.equalTo(<span class=\"keyword\">self</span>.view);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//将size设置成(300,300)</span></span><br><span class=\"line\">    make.size.mas_equalTo(<span class=\"built_in\">CGSizeMake</span>(<span class=\"number\">300</span>, <span class=\"number\">300</span>));</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n<p>这里有两个问题要分解一下</p>\n<ul>\n<li>首先在Masonry中能够添加autolayout约束有三个函数</li>\n</ul>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"code\"><pre><span class=\"line\">- (<span class=\"built_in\">NSArray</span> *)mas_makeConstraints:(<span class=\"keyword\">void</span>(^)(MASConstraintMaker *make))block;</span><br><span class=\"line\">- (<span class=\"built_in\">NSArray</span> *)mas_updateConstraints:(<span class=\"keyword\">void</span>(^)(MASConstraintMaker *make))block;</span><br><span class=\"line\">- (<span class=\"built_in\">NSArray</span> *)mas_remakeConstraints:(<span class=\"keyword\">void</span>(^)(MASConstraintMaker *make))block;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    mas_makeConstraints 只负责新增约束 Autolayout不能同时存在两条针对于同一对象的约束 否则会报错 </span></span><br><span class=\"line\"><span class=\"comment\">    mas_updateConstraints 针对上面的情况 会更新在block中出现的约束 不会导致出现两个相同约束的情况</span></span><br><span class=\"line\"><span class=\"comment\">    mas_remakeConstraints 则会清除之前的所有约束 仅保留最新的约束</span></span><br><span class=\"line\"><span class=\"comment\">    </span></span><br><span class=\"line\"><span class=\"comment\">    三种函数善加利用 就可以应对各种情况了</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>其次 equalTo 和 mas_equalTo的区别在哪里呢? 其实 mas_equalTo是一个MACRO</li>\n</ul>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mas_equalTo(...)                 equalTo(MASBoxValue((__VA_ARGS__)))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mas_greaterThanOrEqualTo(...)    greaterThanOrEqualTo(MASBoxValue((__VA_ARGS__)))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mas_lessThanOrEqualTo(...)       lessThanOrEqualTo(MASBoxValue((__VA_ARGS__)))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mas_offset(...)                  valueOffset(MASBoxValue((__VA_ARGS__)))</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到 mas_equalTo只是对其参数进行了一个BOX操作(装箱) MASBoxValue的定义具体可以看看源代码 太长就不贴出来了</p>\n<p>所支持的类型 除了NSNumber支持的那些数值类型之外 就只支持CGPoint CGSize UIEdgeInsets</p>\n<p>介绍完这几个问题 我们就继续往下了 PS:刚才定义的sv会成为我们接下来所有sample的superView</p>\n<h3 id=\"2-初级-让一个view略小于其superView-边距为10\"><a href=\"#2-初级-让一个view略小于其superView-边距为10\" class=\"headerlink\" title=\"2. [初级] 让一个view略小于其superView(边距为10)\"></a>2. [初级] 让一个view略小于其superView(边距为10)</h3><figure class=\"highlight objectivec\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UIView</span> *sv1 = [<span class=\"built_in\">UIView</span> new];</span><br><span class=\"line\">[sv1 showPlaceHolder];</span><br><span class=\"line\">sv1.backgroundColor = [<span class=\"built_in\">UIColor</span> redColor];</span><br><span class=\"line\">[sv addSubview:sv1];</span><br><span class=\"line\">[sv1 mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">    make.edges.equalTo(sv).with.insets(<span class=\"built_in\">UIEdgeInsetsMake</span>(<span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/* 等价于</span></span><br><span class=\"line\"><span class=\"comment\">    make.top.equalTo(self).with.offset(10);</span></span><br><span class=\"line\"><span class=\"comment\">    make.left.equalTo(self).with.offset(10);</span></span><br><span class=\"line\"><span class=\"comment\">    make.bottom.equalTo(self).with.offset(-10);</span></span><br><span class=\"line\"><span class=\"comment\">    make.right.equalTo(self).with.offset(-10);</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/* 也等价于</span></span><br><span class=\"line\"><span class=\"comment\">    make.top.left.bottom.and.right.equalTo(self).with.insets(UIEdgeInsetsMake(10, 10, 10, 10));</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n\n\n<p>可以看到 edges 其实就是top,left,bottom,right的一个简化 分开写也可以 一句话更省事</p>\n<p>那么为什么bottom和right里的offset是负数呢? 因为这里计算的是绝对的数值 计算的bottom需要小于sv的底部高度 所以要-10 同理用于right</p>\n<p>这里有意思的地方是and和with 其实这两个函数什么事情都没做</p>\n<p>原文:<a class=\"link\"   href=\"http://adad184.com/2014/09/28/use-masonry-to-quick-solve-autolayout/\"  title=\"Masonry介绍与使用实践(快速上手Autolayout)\">里脊串的开发随笔<i class=\"fas fa-external-link-alt\"></i></a></p>\n","categories":["开发","前端"],"tags":["ios","autolayout","OC"]},{"title":"node-rsa 生成私钥/公钥 加密/解密 签名/验证","url":"/%E5%BC%80%E5%8F%91/%E6%9C%8D%E5%8A%A1%E7%AB%AF/node-rsa-%E7%94%9F%E6%88%90%E7%A7%81%E9%92%A5-%E5%85%AC%E9%92%A5-%E5%8A%A0%E5%AF%86-%E8%A7%A3%E5%AF%86-%E7%AD%BE%E5%90%8D-%E9%AA%8C%E8%AF%81.html","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>简单介绍使用node-rsa模块生成/导出秘钥,加密/解密,签名/验证</p>\n<p>具体方法见<a class=\"link\"   href=\"https://www.npmjs.com/package/node-rsa#importexport-keys\" >API<i class=\"fas fa-external-link-alt\"></i></a></p>\n<span id=\"more\"></span>\n\n<h2 id=\"首先导入模块\"><a href=\"#首先导入模块\" class=\"headerlink\" title=\"首先导入模块\"></a>首先导入模块</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install node-rsa</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"生成-导入导出秘钥\"><a href=\"#生成-导入导出秘钥\" class=\"headerlink\" title=\"生成,导入导出秘钥\"></a>生成,导入导出秘钥</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> key = <span class=\"keyword\">new</span> NodeRSA(&#123;<span class=\"attr\">b</span>: <span class=\"number\">512</span>&#125;);<span class=\"comment\">//生成512位秘钥</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pubkey = key.exportKey(<span class=\"string\">&#x27;pkcs8-public&#x27;</span>);<span class=\"comment\">//导出公钥</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> prikey = key.exportKey(<span class=\"string\">&#x27;pkcs8-private&#x27;</span>);<span class=\"comment\">//导出私钥</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pubKey = <span class=\"keyword\">new</span> NodeRSA(pubKey,<span class=\"string\">&#x27;pkcs8-public&#x27;</span>);<span class=\"comment\">//导入公钥</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> priKey = <span class=\"keyword\">new</span> NodeRSA(priKey,<span class=\"string\">&#x27;pkcs8-private&#x27;</span>);<span class=\"comment\">//导入私钥</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"加密解密\"><a href=\"#加密解密\" class=\"headerlink\" title=\"加密解密\"></a>加密解密</h2><h3 id=\"公钥加密-返回密文\"><a href=\"#公钥加密-返回密文\" class=\"headerlink\" title=\"公钥加密(返回密文):\"></a>公钥加密(返回密文):</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">pubKey = <span class=\"keyword\">new</span> NodeRSA(publicKey,<span class=\"string\">&#x27;pkcs8-public&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> encrypted = pubKey.encrypt(buffer, <span class=\"string\">&#x27;base64&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"私钥解密-返回明文\"><a href=\"#私钥解密-返回明文\" class=\"headerlink\" title=\"私钥解密(返回明文):\"></a>私钥解密(返回明文):</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">priKey = <span class=\"keyword\">new</span> NodeRSA(privateKey,<span class=\"string\">&#x27;pkcs8-private&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> decrypted = priKey.decrypt(buffer, <span class=\"string\">&#x27;utf8&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"签名验证\"><a href=\"#签名验证\" class=\"headerlink\" title=\"签名验证\"></a>签名验证</h2><h3 id=\"私钥签名-返回签名\"><a href=\"#私钥签名-返回签名\" class=\"headerlink\" title=\"私钥签名(返回签名):\"></a>私钥签名(返回签名):</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">priKey = <span class=\"keyword\">new</span> NodeRSA(privateKey,<span class=\"string\">&#x27;pkcs8-private&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> signature = priKey.sign(buffer);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"公钥验证-返回true或false\"><a href=\"#公钥验证-返回true或false\" class=\"headerlink\" title=\"公钥验证(返回true或false):\"></a>公钥验证(返回true或false):</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">pubKey = <span class=\"keyword\">new</span> NodeRSA(publicKey,<span class=\"string\">&#x27;pkcs8-public&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> flag = pubKey.verify(buffer, signature);</span><br></pre></td></tr></table></figure>","categories":["开发","服务端"],"tags":["RSA","Node"]},{"title":"关于新媒体的一些个人看法","url":"/%E7%A4%BE%E4%BC%9A/%E6%96%B0%E5%AA%92%E4%BD%93/%E5%85%B3%E4%BA%8E%E6%96%B0%E5%AA%92%E4%BD%93%E7%9A%84%E4%B8%80%E4%BA%9B%E4%B8%AA%E4%BA%BA%E7%9C%8B%E6%B3%95.html","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>新媒体发展这么迅速，每天我也会通过互联网获取很多信息，最近看了很多相关事件，我觉得信息爆炸的时代有点点是需要解决的，第一个是原创保护问题，第二个就是信息来源的真实性。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"关于原创保护\"><a href=\"#关于原创保护\" class=\"headerlink\" title=\"关于原创保护\"></a>关于原创保护</h1><p>洗稿，假原创，有多少媒体账号的编辑是专业的？或者说有多少人是能在这个嘈杂得互联网环境中能静下心来写东西的。有多少独特立场观点的文章是真正有意义的，而不是为了获取流量。正因为洗稿在法理上完全行得通，但是在道理上完全是对原创者的不公平。所以这是一个业界难题。这一点寄希望于大厂用技术去解决这一个道理问题实在是为难搞技术的人。所以我觉得更多的只能是靠行业自律。</p>\n<h1 id=\"关于舆论、假新闻\"><a href=\"#关于舆论、假新闻\" class=\"headerlink\" title=\"关于舆论、假新闻\"></a>关于舆论、假新闻</h1><p>一本书很难在短时间内造成巨大的影响，但是很短的一篇新闻却能瞬间造成很大伤害，甚至升级成一个社会问题。老一辈人经常转发的那些标题党文章，有多少信息是正确的。这么多的信息分发平台，每个人都可以是新闻的编辑。蹭热点+标题党就是一篇互联网爆文。有多少标题党文章为了获取流量病毒式扩散到各种社交平台。</p>\n<p>这些新闻编辑者只会关注阅读量转发量点赞量。而普通用户也十分相信这些互联网爆文，人们惯性认为阅读量10w+的文章一定就是正确的，有些所谓的“新媒体人”利用人们的心理期望去写文章，不管客观真实性，只要顺着大多数人的期望观点准能出爆文。甚至可以写故意错误引导群众的假新闻，他们不会为这些文字产生的影响负责。即便短期可能不会有问题，但是可能还是会慢性影响人们的想法。</p>\n<p>新媒体的本质在于：人人都可以是生产者，人人也都是传播者。而对于用户来说，用户最大的需求就是能够获取正确的有价值的信息。让新媒体“人人”都能做到这点就需要时间了。</p>\n","categories":["社会","新媒体"],"tags":["热点流量"]},{"title":"前端开发学习路径","url":"/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%B7%AF%E5%BE%84.html","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>循序渐进，深入浅出。给你专属定制的学习路线，不多不少刚刚好。<br>第一步：基础知识的学习<br>第二步：编程技巧的学习<br>第三步：熟练掌握学习基本框架<br>第四步：熟练掌握最基本的编程工具<br>第五步：各种工程化和效率类库的学习<br>第六步：性能优化&amp;编程设计的思考</p>\n<span id=\"more\"></span>\n\n<h1 id=\"学习路径\"><a href=\"#学习路径\" class=\"headerlink\" title=\"学习路径\"></a>学习路径</h1><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/web%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF.jpg\"\n                      alt=\"web前端学习路线\"\n                ></p>\n<h2 id=\"网络相关\"><a href=\"#网络相关\" class=\"headerlink\" title=\"网络相关\"></a>网络相关</h2><h3 id=\"Internet如何工作\"><a href=\"#Internet如何工作\" class=\"headerlink\" title=\"Internet如何工作?\"></a>Internet如何工作?</h3><h4 id=\"1-地址和协议的概念\"><a href=\"#1-地址和协议的概念\" class=\"headerlink\" title=\"1. 地址和协议的概念\"></a>1. 地址和协议的概念</h4><p>Internet的本质是电脑与电脑之间互相通信并交换信息，只不过大多是小电脑从大电脑获取各类信息。这种通信跟人与人之间信息交流一样必须具备一些条件，比如：您给一位美国朋友写信，首先必须使用一种对方也能看懂的语言，然后还得知道对方的通信地址，才能把信发出去。同样，电脑与电脑之间通信，首先也得使用一种双方都能接受的”语言”–通信协议，然后还得知道电脑彼此的地址，通过协议和地址，电脑与电脑之间就能交流信息，这就形成了网络。</p>\n<h4 id=\"2-TCP-IP协议\"><a href=\"#2-TCP-IP协议\" class=\"headerlink\" title=\"2. TCP/IP协议\"></a>2. TCP/IP协议</h4><p>Internet就是由许多小的网络构成的国际性大网络，在各个小网络内部使用不同的协议，正如不同的国家使用不同的语言，那如何使它们之间能进行信息交流呢？这就要靠网络上的世界语—-TCP/IP协议。详细介绍请参考TCP/IP&gt;&gt;&gt;<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16391592957212.jpg\"\n                     \n                ></p>\n<h4 id=\"3-IP地址\"><a href=\"#3-IP地址\" class=\"headerlink\" title=\"3. IP地址\"></a>3. IP地址</h4><p>语言（协议）我们是有了，那地址怎么办呢？没关系，用网际协议地址（即IP地址）就可解决这个问题。它是为标识Internet上主机位置而设置的。Internet上的每一台计算机都被赋予一个世界上唯一的32位Internet地址（Internet Protocol Address，简称IP Address），这一地址可用于与该计算机机有关的全部通信。为了方便起见，在应用上我们以8bit为一单位，组成四组十进制数字来表示每一台主机的位置。<br>一般的IP地址由4组数字组成，每组数字介于0-255之间，如某一台电脑的IP地址可为：202.206.65.115，但不能为202.206.259.3。 </p>\n<h3 id=\"DNS及其工作原理？\"><a href=\"#DNS及其工作原理？\" class=\"headerlink\" title=\"DNS及其工作原理？\"></a>DNS及其工作原理？</h3><p>DNS （Domain Name System 的缩写）的作用非常简单，就是根据域名查出IP地址。你可以把它想象成一本巨大的电话本。<br>举例来说，如果你要访问域名math.stackexchange.com，首先要通过DNS查出它的IP地址是151.101.129.69。</p>\n<h3 id=\"域名的作用？\"><a href=\"#域名的作用？\" class=\"headerlink\" title=\"域名的作用？\"></a>域名的作用？</h3><h4 id=\"域名地址\"><a href=\"#域名地址\" class=\"headerlink\" title=\"域名地址\"></a>域名地址</h4><p>尽管IP地址能够唯一地标识网络上的计算机，但IP地址是数字型的，用户记忆这类数字十分不方便，于是人们又发明了另一套字符型的地址方案即所谓的域名地址。IP地址和域名是一一对应的，我们来看一个IP地址对应域名地址的例子，譬如：河北科技大学的IP地址是202.206.64.33，对应域名地址为<a class=\"link\"   href=\"http://www.hebust.edu.cn.这份域名地址的信息存放在一个叫域名服务器(dns,domain/\" >www.hebust.edu.cn。这份域名地址的信息存放在一个叫域名服务器（DNS，Domain<i class=\"fas fa-external-link-alt\"></i></a> Name Server）的主机内，使用者只需了解易记的域名地址，其对应转换工作就留给了域名服务器DNS。DNS就是提供IP地址和域名之间的转换服务的服务器。</p>\n<h4 id=\"域名地址的意义\"><a href=\"#域名地址的意义\" class=\"headerlink\" title=\"域名地址的意义\"></a>域名地址的意义</h4><p>域名地址是从右至左来表述其意义的，最右边的部分为顶层域，最左边的则是这台主机的机器名称。一般域名地址可表示为：主机机器名.单位名.网络名.顶层域名。如：dns.hebust.edu.cn，这里的dns是河北科技大学的一个主机的机器名，hebust代表河北科技大学大学，edu代表中国教育科研网，cn代表中国，顶层域一般是网络机构或所在国家地区的名称缩写。</p>\n<h3 id=\"HTTP协议是什么\"><a href=\"#HTTP协议是什么\" class=\"headerlink\" title=\"HTTP协议是什么?\"></a>HTTP协议是什么?</h3><p>http(Hypertext transfer protocol)超文本传输协议，通过浏览器和服务器进行数据交互，进行超文本（文本、图片、视频等）传输的规定。也就是说，http协议规定了超文本传输所要遵守的规则。</p>\n<h4 id=\"HTTP协议的特点\"><a href=\"#HTTP协议的特点\" class=\"headerlink\" title=\"HTTP协议的特点\"></a>HTTP协议的特点</h4><ol>\n<li>HTTP协议是无状态的</li>\n<li>多次HTTP请求</li>\n<li>基于TCP协议</li>\n</ol>\n<h4 id=\"HTTP报文\"><a href=\"#HTTP报文\" class=\"headerlink\" title=\"HTTP报文\"></a>HTTP报文</h4><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16391596320363.jpg\"\n                     \n                ></p>\n<h3 id=\"浏览器工作机制？\"><a href=\"#浏览器工作机制？\" class=\"headerlink\" title=\"浏览器工作机制？\"></a>浏览器工作机制？</h3><p>浏览器的结构(The browser’s high level structure)<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16391597459437.jpg\"\n                     \n                ></p>\n<p>Webkit 主要流程如下图：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16391598094944.jpg\"\n                     \n                ></p>\n<p>Gecko 主要流程如下图：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16391598347985.jpg\"\n                     \n                ></p>\n<h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2><h3 id=\"学习基础知识\"><a href=\"#学习基础知识\" class=\"headerlink\" title=\"学习基础知识\"></a>学习基础知识</h3><p><strong>MDN Web Docs</strong><br><a class=\"link\"   href=\"https://developer.mozilla.org/zh-CN/docs/Learn/Getting_started_with_the_web/HTML_basics\" >https://developer.mozilla.org/zh-CN/docs/Learn/Getting_started_with_the_web/HTML_basics<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><strong>千古前端图文教程</strong><br>如果上面的MDN Web Docs看着乏味，可以尝试这个图文教程，相对更通俗易懂，但是所有标准还是得参考MDN。<br><a class=\"link\"   href=\"https://web.qianguyihao.com/01-HTML/01-%E8%AE%A4%E8%AF%86Web%E5%92%8CWeb%E6%A0%87%E5%87%86.html\" >https://web.qianguyihao.com/01-HTML/01-%E8%AE%A4%E8%AF%86Web%E5%92%8CWeb%E6%A0%87%E5%87%86.html<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"表单和验证\"><a href=\"#表单和验证\" class=\"headerlink\" title=\"表单和验证\"></a>表单和验证</h3><p><a class=\"link\"   href=\"https://developer.mozilla.org/zh-CN/docs/Learn/Forms\" >https://developer.mozilla.org/zh-CN/docs/Learn/Forms<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"约定和最佳实践\"><a href=\"#约定和最佳实践\" class=\"headerlink\" title=\"约定和最佳实践\"></a>约定和最佳实践</h3><p>无论你是超文本标记语言 (HTML) 的初学者还是专家，遵循一些最佳实践以保持 HTML 文档的一致性和组织性都非常重要。有如此多的元素、属性、属性、值等等——有很多东西需要学习。</p>\n<ol>\n<li>使用适当的文档结构</li>\n<li>声明正确的文档类型</li>\n<li>始终关闭标签</li>\n<li>不要使用内联样式</li>\n<li>对图片使用 alt 属性</li>\n<li>经常验证</li>\n<li>在 <head> 标签内放置外部样式表</li>\n<li>使用有意义的标签</li>\n<li>使用小写标记</li>\n<li>减少页面元素的数量</li>\n</ol>\n<p>更详细内容参考 <a class=\"link\"   href=\"https://blog.tbhcreative.com/2015/08/10-best-practices-in-html.html\" >初学者的10个HTML最佳实践<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"语义化标签\"><a href=\"#语义化标签\" class=\"headerlink\" title=\"语义化标签\"></a>语义化标签</h3><p>HTML 5的革新之一：语义化标签一节元素标签。在HTML 5出来之前，我们用div来表示页面章节，但是这些div都没有实际意义。（即使我们用css样式的id和class形容这块内容的意义）。这些标签只是我们提供给浏览器的指令，只是定义一个网页的某些部分。但现在，那些之前没“意义”的标签因为因为html5的出现消失了，这就是我们平时说的“语义”。</p>\n<ul>\n<li>header元素</li>\n<li>footer元素</li>\n<li>hgroup元素</li>\n<li>nav元素</li>\n<li>aside元素</li>\n<li>section元素</li>\n<li>article元素</li>\n</ul>\n<p>HTML5节元素标签包括body article nav aside section header footer hgroup ，还有h1-h6 address。<br>更详细内容参考 <a class=\"link\"   href=\"https://juejin.cn/post/6844903544995184653\" >html5语义化标签<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><p><a class=\"link\"   href=\"https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Building_blocks\" >https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Building_blocks<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><p><a class=\"link\"   href=\"https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps\" >https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"版本控制系统\"><a href=\"#版本控制系统\" class=\"headerlink\" title=\"版本控制系统\"></a>版本控制系统</h2><p>TODO</p>\n<h2 id=\"网络安全知识\"><a href=\"#网络安全知识\" class=\"headerlink\" title=\"网络安全知识\"></a>网络安全知识</h2><p>TODO</p>\n<h2 id=\"包管理工具\"><a href=\"#包管理工具\" class=\"headerlink\" title=\"包管理工具\"></a>包管理工具</h2><p>TODO</p>\n<h2 id=\"CSS体系结构\"><a href=\"#CSS体系结构\" class=\"headerlink\" title=\"CSS体系结构\"></a>CSS体系结构</h2><p>TODO</p>\n<h2 id=\"CSS预处理器\"><a href=\"#CSS预处理器\" class=\"headerlink\" title=\"CSS预处理器\"></a>CSS预处理器</h2><p>TODO</p>\n<h2 id=\"构建工具\"><a href=\"#构建工具\" class=\"headerlink\" title=\"构建工具\"></a>构建工具</h2><p>TODO</p>\n<h2 id=\"前端框架\"><a href=\"#前端框架\" class=\"headerlink\" title=\"前端框架\"></a>前端框架</h2><p>TODO<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16392321191164.jpg\"\n                     \n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16392336050929.jpg\"\n                     \n                ></p>\n<h2 id=\"现代CSS\"><a href=\"#现代CSS\" class=\"headerlink\" title=\"现代CSS\"></a>现代CSS</h2><p>TODO</p>\n<h2 id=\"Web组件\"><a href=\"#Web组件\" class=\"headerlink\" title=\"Web组件\"></a>Web组件</h2><p>TODO</p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>TODO</p>\n<h2 id=\"类型检查器\"><a href=\"#类型检查器\" class=\"headerlink\" title=\"类型检查器\"></a>类型检查器</h2><p>TODO</p>\n<h2 id=\"PWA\"><a href=\"#PWA\" class=\"headerlink\" title=\"PWA\"></a>PWA</h2><p>TODO</p>\n<h2 id=\"SSR\"><a href=\"#SSR\" class=\"headerlink\" title=\"SSR\"></a>SSR</h2><p>TODO</p>\n<h2 id=\"网页静态化\"><a href=\"#网页静态化\" class=\"headerlink\" title=\"网页静态化\"></a>网页静态化</h2><p>TODO</p>\n<h2 id=\"APP跨平台\"><a href=\"#APP跨平台\" class=\"headerlink\" title=\"APP跨平台\"></a>APP跨平台</h2><p>TODO</p>\n","categories":["开发","前端"],"tags":["vue","js","html","web学习路径"]},{"title":"旅行记录","url":"/%E7%94%9F%E6%B4%BB/%E7%85%A7%E7%89%87/%E6%97%85%E8%A1%8C%E8%AE%B0%E5%BD%95.html","content":"<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/13.jpg\"\n                     \n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/16.jpg\"\n                     \n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/20.jpg\"\n                     \n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/26.jpg\"\n                     \n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/3.jpg\"\n                     \n                ></p>\n<h2 id=\"选做桌面\"><a href=\"#选做桌面\" class=\"headerlink\" title=\"选做桌面\"></a>选做桌面</h2><p> 一个好看的可以给工作之余带来好心情<br> 一个有意义的可以让你回想起很多美好的事情</p>\n<span id=\"more\"></span>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/IMG_3912.PNG\"\n                      alt=\"IMG_3912\"\n                ></p>\n<h2 id=\"视频好看吗\"><a href=\"#视频好看吗\" class=\"headerlink\" title=\"视频好看吗\"></a>视频好看吗</h2><p> 高清动画片<br><video width=\"620\" controls \nposter=\"https://cdn.patpat.site/WX20180529-220354.png\" \nsrc=\"https://archive.org/download/BigBuckBunny_124/Content/big_buck_bunny_720p_surround.mp4\"><br></video></p>\n<p> 放松心情<br> 尽情畅想</p>\n","categories":["生活","照片"]},{"title":"服务器异常电话警报API-云之讯语音通知API","url":"/%E5%BC%80%E5%8F%91/%E5%90%8E%E7%AB%AF/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BC%82%E5%B8%B8%E7%94%B5%E8%AF%9D%E8%AD%A6%E6%8A%A5API-%E4%BA%91%E4%B9%8B%E8%AE%AF%E8%AF%AD%E9%9F%B3%E9%80%9A%E7%9F%A5API.html","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近网站流量增大，又逢电商11月12月旺季,担心服务器宕机，找了个电话语音通知的API 云之讯。</p>\n<span id=\"more\"></span>\n\n<p>为了解决这个需求找了几个语音通知的API,最终觉得有两个比较靠谱。</p>\n<ul>\n<li>阿里大于云通讯服务平台。<a class=\"link\"   href=\"https://open-doc.dingtalk.com/docs/api.htm?apiId=25445&scopeId=11872\"  title=\"钉钉|开放平台 语音通知\">（钉钉|开放平台 语音通知）<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li>云之讯语音通知。 <a class=\"link\"   href=\"http://docs.ucpaas.com/doku.php?id=%E8%AF%AD%E9%9F%B3%E9%80%9A%E7%9F%A5:home_yytznew_rest#%E8%AF%AD%E9%9F%B3%E9%80%9A%E7%9F%A5%E8%AF%9D%E5%8D%95%E5%9B%9E%E8%B0%83%E6%8E%A5%E5%8F%A3_api\"  title=\"云之讯|开放平台 语音通知\">（云之讯|开放平台 语音通知）<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n<p>这个两个都算是比较靠谱的了，后面由于考虑阿里大于的申请流程更麻烦（大公司一般流程都比较多），所以选择云之讯。</p>\n<p>然后就写了个云之讯API的composer包：<a class=\"link\"   href=\"https://packagist.org/packages/patpat/cloud-message\"  title=\"patpat/cloud-message\">patpat/cloud-message<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"php-composer安装\"><a href=\"#php-composer安装\" class=\"headerlink\" title=\"php composer安装\"></a>php composer安装</h2><p>在composer.json require下加上</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;patpat/cloud-message&quot;</span>: <span class=\"string\">&quot;^1.0.6&quot;</span>,</span><br></pre></td></tr></table></figure>\n\n<p>使用</p>\n<p>.env 需要配置的参数,新增config文件 cloud_message.php 内容如下</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> [</span><br><span class=\"line\">    <span class=\"comment\">//注册云之讯官网，在控制台中即可获取此参数</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;account_sid&#x27;</span> =&gt;  env(<span class=\"string\">&#x27;CLOUD_MESSAGE_ACCOUNT_SID&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//账户授权令牌, 在控制台中即可获取此参数</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;auth_token&#x27;</span> =&gt;  env(<span class=\"string\">&#x27;CLOUD_MESSAGE_AUTH_TOKEN&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//应用id</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;app_id&#x27;</span> =&gt;  env(<span class=\"string\">&#x27;CLOUD_MESSAGE_APP_ID&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//来电显示的号码（需要去申请开通号码）</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;caller&#x27;</span> =&gt; env(<span class=\"string\">&#x27;CLOUD_MESSAGE_CALLER&#x27;</span>, <span class=\"string\">&#x27;057112345678&#x27;</span>),</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p>调用</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$cloudMessage</span> = <span class=\"keyword\">new</span> CloudMessage();</span><br><span class=\"line\"><span class=\"variable\">$result</span> = <span class=\"variable\">$cloudMessage</span>-&gt;sendVoiceNotify(<span class=\"string\">&quot;13560710913&quot;</span>, <span class=\"string\">&quot;服务器异常警告&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"variable\">$result</span> &amp;&amp; <span class=\"variable\">$result</span>[<span class=\"string\">&#x27;resp&#x27;</span>][<span class=\"string\">&#x27;respCode&#x27;</span>] == <span class=\"string\">&#x27;000000&#x27;</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//成功</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//失败, error_code: $result[&#x27;resp&#x27;][&#x27;respCode&#x27;]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","categories":["开发","后端"],"tags":["server","notice"]},{"title":"微前端qiankun+AntDesign组件库实现业务模块彻底解耦","url":"/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/%E5%BE%AE%E5%89%8D%E7%AB%AFqiankun-AntDesign%E7%BB%84%E4%BB%B6%E5%BA%93%E5%AE%9E%E7%8E%B0%E4%B8%9A%E5%8A%A1%E6%A8%A1%E5%BD%BB%E5%BA%95%E8%A7%A3%E8%80%A6.html","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>前面一篇文章<a href=\"https://www.patpat.site/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/Single-spa-%E6%88%90%E7%86%9F%E7%9A%84%E5%BE%AE%E5%89%8D%E7%AB%AF%E6%9E%B6%E6%9E%84%E6%96%B9%E6%A1%88.html\">Single-spa 成熟的微前端架构方案</a>介绍了要用微前端架构的背景和目的，简单对比了微前端架构方案的技术选型，以及分享了一些微前端的概念图和简单的架构图。</p>\n<p>这篇文章属于项目实战，利用<a class=\"link\"   href=\"https://qiankun.umijs.org/zh/guide\" >qiankun<i class=\"fas fa-external-link-alt\"></i></a>（一个基于 <a class=\"link\"   href=\"https://github.com/single-spa/single-spa\" >single-spa<i class=\"fas fa-external-link-alt\"></i></a> 的微前端实现库）加<a class=\"link\"   href=\"https://www.antdv.com/docs/vue/getting-started-cn/\" >Ant Design<i class=\"fas fa-external-link-alt\"></i></a>组件库实现微前端主应用和微应用的路由交互、状态通信等，并且微应用按需加载组件库，微应用支持独立运行模式。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"主应用构建\"><a href=\"#主应用构建\" class=\"headerlink\" title=\"主应用构建\"></a>主应用构建</h1><p>从大部分业务需求上来看，主应用里面需要包括以下能力</p>\n<ul>\n<li>网站头部信息或头部导航菜单</li>\n<li>网站左侧菜单功能</li>\n<li>系统登录页面和页面权限信息分发</li>\n<li>能接入不同前端框架的微应用（Vue、React）</li>\n</ul>\n<h2 id=\"创建主应用\"><a href=\"#创建主应用\" class=\"headerlink\" title=\"创建主应用\"></a>创建主应用</h2><p>微前端解决方案，我们选择<a class=\"link\"   href=\"https://qiankun.umijs.org/zh/guide\" >qiankun<i class=\"fas fa-external-link-alt\"></i></a>（一个基于 <a class=\"link\"   href=\"https://github.com/single-spa/single-spa\" >single-spa<i class=\"fas fa-external-link-alt\"></i></a> 的微前端实现库）, 系统UI我们选用一个开箱即用的中台前端设计解决方案 <a class=\"link\"   href=\"https://iczer.gitee.io/vue-antd-admin-docs/start/use.html\" >Vue Antd Admin<i class=\"fas fa-external-link-alt\"></i></a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone --depth&#x3D;1 https:&#x2F;&#x2F;github.com&#x2F;iczer&#x2F;vue-antd-admin.git</span><br></pre></td></tr></table></figure>\n\n<p>admin项目拉下来安装依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">yarn # or npm install</span><br><span class=\"line\"></span><br><span class=\"line\">yarn add qiankun # 或者 npm i qiankun -S</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"把Vue-Antd-Admin改造为qiankun主应用\"><a href=\"#把Vue-Antd-Admin改造为qiankun主应用\" class=\"headerlink\" title=\"把Vue Antd Admin改造为qiankun主应用\"></a>把<a class=\"link\"   href=\"https://iczer.gitee.io/vue-antd-admin-docs/start/use.html\" >Vue Antd Admin<i class=\"fas fa-external-link-alt\"></i></a>改造为qiankun主应用</h2><h3 id=\"主应用qiankun注册微应用逻辑\"><a href=\"#主应用qiankun注册微应用逻辑\" class=\"headerlink\" title=\"主应用qiankun注册微应用逻辑\"></a>主应用qiankun注册微应用逻辑</h3><p>安装qiankun依赖后在src目录下面新增microAppRegister.js文件，用户注册微应用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; registerMicroApps, start, setDefaultMountApp, runAfterFirstMounted, initGlobalState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;qiankun&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">microAppRegister</span> (<span class=\"params\">vm</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!<span class=\"built_in\">window</span>.isQiankunStart) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.isQiankunStart = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> langInfo = vm.$store.state.setting.lang</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     *主应用的生命周期</span></span><br><span class=\"line\"><span class=\"comment\">     * (这不是必须的，可以省略)</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> mainLifeCycles = &#123;</span><br><span class=\"line\">      beforeLoad: [</span><br><span class=\"line\">        app =&gt; &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;[LifeCycle] before load %c%s&#x27;</span>, <span class=\"string\">&#x27;color: green;&#x27;</span>, app.name)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      beforeMount: [</span><br><span class=\"line\">        app =&gt; &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;[LifeCycle] before mount %c%s&#x27;</span>, <span class=\"string\">&#x27;color: green;&#x27;</span>, app.name)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      afterMount : [</span><br><span class=\"line\">        app =&gt; &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 处理微应用切换，公共数据没更新</span></span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;[LifeCycle] after mount %c%s&#x27;</span>, <span class=\"string\">&#x27;color: red;&#x27;</span>, app.name)</span><br><span class=\"line\">          <span class=\"keyword\">let</span> newLangInfo = vm.$store.state.setting.lang</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(newLangInfo !== langInfo) &#123;</span><br><span class=\"line\">            langInfo = newLangInfo</span><br><span class=\"line\">            actions.setGlobalState(&#123;</span><br><span class=\"line\">              langInfo: newLangInfo</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      afterUnmount: [</span><br><span class=\"line\">        app =&gt; &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">            <span class=\"string\">&#x27;[LifeCycle] after unmount %c%s&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;color: green;&#x27;</span>,</span><br><span class=\"line\">            app.name</span><br><span class=\"line\">          )</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * registerMicroApps(apps, lifeCycles?)</span></span><br><span class=\"line\"><span class=\"comment\">     *  @param apps  &#123;Array&lt;RegistrableApp&gt;&#125;   - 必选，微应用的一些注册信息</span></span><br><span class=\"line\"><span class=\"comment\">     *  @param lifeCycles &#123;LifeCycles&#125;         - 可选，全局的微应用生命周期钩子</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * 当微应用信息注册完后</span></span><br><span class=\"line\"><span class=\"comment\">     * 一旦浏览器url发生变化</span></span><br><span class=\"line\"><span class=\"comment\">     * 便会自动触发qiankun的匹配逻辑</span></span><br><span class=\"line\"><span class=\"comment\">     * 所有activeRule规则匹配上的微应用就会被插入到主应用指定的container中</span></span><br><span class=\"line\"><span class=\"comment\">     * 同时以此调用微应用暴露出的生命周期钩子函数</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> loader = <span class=\"function\"><span class=\"params\">loading</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;LOADER %c%s&#x27;</span>, <span class=\"string\">&#x27;color:yellow&#x27;</span>, loading)</span><br><span class=\"line\">      vm.$store.commit(<span class=\"string\">&#x27;microApp/loadingToggle&#x27;</span>, loading)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> apps = vm.$store.getters[<span class=\"string\">&#x27;microApp/microApps&#x27;</span>]</span><br><span class=\"line\">    <span class=\"comment\">// 用户信息</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> userInfo = vm.$store.getters[<span class=\"string\">&#x27;account/user&#x27;</span>]</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;registerMicroApps&#x27;</span>, apps)</span><br><span class=\"line\">    registerMicroApps(</span><br><span class=\"line\">      apps.map(<span class=\"function\"><span class=\"params\">app</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> appInfo = &#123;...app&#125;</span><br><span class=\"line\">        appInfo.props = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, appInfo.props || &#123;&#125;, &#123;</span><br><span class=\"line\">          userInfo: userInfo,</span><br><span class=\"line\">          langInfo: langInfo</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; ...appInfo, loader &#125;</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">      mainLifeCycles</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * setDefaultMountApp(appLink)</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;string&#125; appLink 必选，设置默认加载的微应用相匹配的URL（注意与apps中的activeRule保持一致）</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * BTW, 如果设置了默认加载的微应用URL，则主应用中就不要设置‘/’的默认路由了，后者会被前者覆盖</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    setDefaultMountApp(apps[<span class=\"number\">0</span>].activeRule)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 启动 qiankun</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     *  start(opts?)</span></span><br><span class=\"line\"><span class=\"comment\">     *  @param &#123;Options&#125; opts</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     *  Options</span></span><br><span class=\"line\"><span class=\"comment\">     *  @param &#123;boolean | &#x27;all&#x27; | string[] | (( apps: RegistrableApp[] ) =&gt; &#123; criticalAppNames: string[]; minorAppsName: string[] &#125;)&#125; prefetch 可选，是否开启预加载，默认为 true</span></span><br><span class=\"line\"><span class=\"comment\">     *  @param &#123;boolean | &#123; strictStyleIsolation?: boolean, experimentalStyleIsolation?: boolean &#125;&#125; sandbox  可选，是否开启沙箱，默认为 true</span></span><br><span class=\"line\"><span class=\"comment\">     *  @param &#123;boolean | ((app: RegistrableApp&lt;any&gt;) =&gt; Promise&lt;boolean&gt;)&#125; singular 可选，是否为单实例场景，单实例指的是同一时间只会渲染一个微应用。默认为 true</span></span><br><span class=\"line\"><span class=\"comment\">     *  @param &#123;Function&#125; fetch 可选，自定义的 fetch 方法</span></span><br><span class=\"line\"><span class=\"comment\">     *  @param &#123;(url: string) =&gt; string &#125; getPublicPath 可选</span></span><br><span class=\"line\"><span class=\"comment\">     *  @param &#123;(url: string) =&gt; string &#125; getTemplate  可选</span></span><br><span class=\"line\"><span class=\"comment\">     *  @param &#123;(url: string) =&gt; string &#125; excludeAssetFilter  可选，指定部分特殊的动态加载的微应用资源（css/js) 不被qiankun 劫持处理</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    start(&#123;</span><br><span class=\"line\">      prefetch: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 开启严格模式会造成一些有全局作用的插件或组件异常，比如antd的Modal组件</span></span><br><span class=\"line\">      <span class=\"comment\">// sandbox: &#123; strictStyleIsolation: true &#125;,</span></span><br><span class=\"line\">      singular: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     *  runAfterFirstMounted(effect)</span></span><br><span class=\"line\"><span class=\"comment\">     *  第一个微应用 mount 后需要调用的方法，比如开启一些监控或者埋点脚本。</span></span><br><span class=\"line\"><span class=\"comment\">     *  这个方法不是必须的，可以不调用。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     *  @param &#123;() =&gt; void&#125; 必选</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    runAfterFirstMounted(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;[MainApp] first app mounted&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化 state</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> state = &#123;</span><br><span class=\"line\">  testAttr: <span class=\"string\">&#x27;Hi Channing&#x27;</span>,</span><br><span class=\"line\">  scrollToBottom: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  microAppsRouterMap: [],</span><br><span class=\"line\">  isLoadingMicro: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;initGlobalState...&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> actions = initGlobalState(state)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 暴露三个全局通信方法给主应用的子组件 */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">  onGlobalStateChange,</span><br><span class=\"line\">  setGlobalState,</span><br><span class=\"line\">  offGlobalStateChange</span><br><span class=\"line\">&#125; = actions</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 全局通信方法的使用demo */</span></span><br><span class=\"line\">actions.onGlobalStateChange(<span class=\"function\">(<span class=\"params\">state, prev</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// state: 变更后的状态; prev 变更前的状态</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;主应用全局监听到state发生变化!!!!!!!!!!!!!!!!!!!!!!!!!!&#x27;</span>)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;state&#x27;</span>, state)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;prev&#x27;</span>, prev)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// state.testAttr = &#x27;Hi Channing again!!!!!!!&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// state.isLoadingMicro = true</span></span><br><span class=\"line\"><span class=\"comment\">// actions.setGlobalState(state)</span></span><br><span class=\"line\"></span><br><span class=\"line\">actions.getGlobalState = <span class=\"function\">(<span class=\"params\">key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> key ? state[key] : state</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// actions.offGlobalStateChange()</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在src/store/modules下面添加microApp.js，用户管理微应用参数状态，动态加载微应用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  namespaced: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    apps: []</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getters: &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    setApps (state, apps) &#123;</span><br><span class=\"line\">      state.apps = apps</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>修改src/config/config.js, 新增配置 <code>asyncRoutes: true</code> 设置路由为异步路由，因为我们需要用异步动态路由来控制权限。</p>\n<h3 id=\"主应用动态路由配置\"><a href=\"#主应用动态路由配置\" class=\"headerlink\" title=\"主应用动态路由配置\"></a>主应用动态路由配置</h3><p>需要修改部分模拟数据和路由注册逻辑，兼容一级目录为微应用入口的逻辑</p>\n<ol>\n<li>把mock数据的root.children的一级目录添加部分属性，如 <code>appName: &#39;micro-vue&#39;</code>，<code>path: &#39;micro-vue&#39;</code>，<code>entry: &#39;http://localhost:9000&#39;</code>，这些属性是为了注册微应用用的。</li>\n<li>在src/store/modules下面新增microApp.js</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  namespaced: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    isLoading: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    apps: []</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getters: &#123;</span><br><span class=\"line\">    microApps: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state.apps</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    loadingToggle: <span class=\"function\">(<span class=\"params\">state, loading</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      state.isLoading = loading</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;loadingToggle~~~~~~~~~~~~~~~~~~&quot;</span>,loading)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    setApps (state, apps) &#123;</span><br><span class=\"line\">      state.apps = apps</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>修改src/utils/routerUtil.js里面的路由加载逻辑</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 从动态路由配置提取微应用注册信息。</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> apps = rootRouterConfig.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (item.router === <span class=\"string\">&#x27;microApp&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(item)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">          name: item.appName,</span><br><span class=\"line\">          entry: item.entry,</span><br><span class=\"line\">          container: <span class=\"string\">&#x27;#micro-page&#x27;</span>,</span><br><span class=\"line\">          activeRule: <span class=\"string\">`/<span class=\"subst\">$&#123;item.path&#125;</span>`</span>,</span><br><span class=\"line\">          $meta: &#123;</span><br><span class=\"line\">            title: item.name</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          props: &#123;</span><br><span class=\"line\">            asyncRouterConfig: item.children</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    apps = apps.filter(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res !== <span class=\"literal\">undefined</span>)</span><br><span class=\"line\">    store.commit(<span class=\"string\">&#x27;microApp/setApps&#x27;</span>, apps)</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 主应用把微应用路由只保留 微应用的前缀路由加/*，因为微应用的路由配置在对应微应用解析。</span></span><br><span class=\"line\">routes = routes.map(<span class=\"function\"><span class=\"params\">r</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (r.path === <span class=\"string\">&#x27;/&#x27;</span>) &#123;</span><br><span class=\"line\">        r.children.map(<span class=\"function\"><span class=\"params\">rc</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (rc.meta.microApp) &#123;</span><br><span class=\"line\">            rc.children = []</span><br><span class=\"line\">            rc.path = <span class=\"string\">`<span class=\"subst\">$&#123;rc.path&#125;</span>/*`</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> r</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 重新解析一份完全版的菜单路由给渲染导航菜单用</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> menuFinalRoutes = mergeRoutes(basicOptions.routes, allRoutes)</span><br><span class=\"line\">   \tformatRoutes(menuFinalRoutes)</span><br><span class=\"line\">   \tmenuRouter = initRouter(store.state.setting.asyncRoutes)</span><br><span class=\"line\">   \tmenuRouter.options = &#123;...menuRouter.options, <span class=\"attr\">routes</span>: menuFinalRoutes&#125;</span><br><span class=\"line\">   \tmenuRouter.matcher = <span class=\"keyword\">new</span> Router(&#123;...menuRouter.options, <span class=\"attr\">routes</span>:[]&#125;).matcher</span><br><span class=\"line\">   \tmenuRouter.addRoutes(menuFinalRoutes)</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"微应用构建\"><a href=\"#微应用构建\" class=\"headerlink\" title=\"微应用构建\"></a>微应用构建</h1><p>微应用可以用Vue的<a class=\"link\"   href=\"https://cli.vuejs.org/zh/guide/installation.html\" >Vue cli<i class=\"fas fa-external-link-alt\"></i></a> 或 React的<a class=\"link\"   href=\"https://create-react-app.dev/docs/getting-started/\" >Create React App<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"Vue微应用创建\"><a href=\"#Vue微应用创建\" class=\"headerlink\" title=\"Vue微应用创建\"></a>Vue微应用创建</h2><p>Vue的微应用用vue-cli创建好项目后，可以参照<a class=\"link\"   href=\"https://qiankun.umijs.org/zh/guide/tutorial#vue-%E5%BE%AE%E5%BA%94%E7%94%A8\" >qiankun的vue微应用实践文档<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>在适配<a class=\"link\"   href=\"https://iczer.gitee.io/vue-antd-admin-docs/start/use.html\" >Vue Antd Admin<i class=\"fas fa-external-link-alt\"></i></a> 的动态路由解析需要做一定的代码修改，可以参考我的实现<a class=\"link\"   href=\"https://github.com/micro-antd-admin/micro-vue/blob/master/src/main.js\" >demo<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"React微应用创建\"><a href=\"#React微应用创建\" class=\"headerlink\" title=\"React微应用创建\"></a>React微应用创建</h2><p>可以用React官方的<a class=\"link\"   href=\"https://create-react-app.dev/docs/getting-started/\" >Create React App<i class=\"fas fa-external-link-alt\"></i></a>， 也可以尝试<a class=\"link\"   href=\"https://cn.vitejs.dev/guide/#scaffolding-your-first-vite-project\" >Vite构建项目<i class=\"fas fa-external-link-alt\"></i></a>，我前面有一篇文章介绍了<a href=\"https://www.patpat.site/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/%E6%AF%94Vue-Cli-%E6%9B%B4%E9%AB%98%E7%BA%AC%E5%BA%A6%E7%9A%84%E4%B8%8B%E4%B8%80%E4%BB%A3%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7-%E5%B0%A4%E9%9B%A8%E6%BA%AA%E6%96%B0%E5%93%81Vite%E7%9A%84%E9%AD%94%E5%8A%9B.html\">Vite的魔力</a></p>\n<ol>\n<li><p>在 src 目录新增 <code>public-path.js</code>：<br><em>注意：运行时的 publicPath 和构建时的 publicPath 是不同的，两者不能等价替代。</em></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.__POWERED_BY_QIANKUN__) &#123;</span><br><span class=\"line\">  __webpack_public_path__ = <span class=\"built_in\">window</span>.__INJECTED_PUBLIC_PATH_BY_QIANKUN__;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>设置 <code>history</code> 模式路由的 base：</p>\n</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">BrowserRouter</span> <span class=\"attr\">basename</span>=<span class=\"string\">&#123;window.__POWERED_BY_QIANKUN__</span> ? &#x27;/<span class=\"attr\">app-react</span>&#x27; <span class=\"attr\">:</span> &#x27;/&#x27;&#125;&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>入口文件 <code>index.js</code> 修改，为了避免根 id <code>#root</code> 与其他的 DOM 冲突，需要限制查找范围。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;./public-path&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-dom&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; container &#125; = props;</span><br><span class=\"line\">  ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span></span>, container ? container.querySelector(<span class=\"string\">&#x27;#root&#x27;</span>) : <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#root&#x27;</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">window</span>.__POWERED_BY_QIANKUN__) &#123;</span><br><span class=\"line\">  render(&#123;&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bootstrap</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;[react16] react app bootstraped&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mount</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;[react16] props from main framework&#x27;</span>, props);</span><br><span class=\"line\">  render(props);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unmount</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; container &#125; = props;</span><br><span class=\"line\">  ReactDOM.unmountComponentAtNode(container ? container.querySelector(<span class=\"string\">&#x27;#root&#x27;</span>) : <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#root&#x27;</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>修改 <code>webpack</code> 配置<br>安装插件 <code>@rescripts/cli</code>，当然也可以选择其他的插件，例如 <code>react-app-rewired</code>。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm i -D @rescripts&#x2F;cli</span><br></pre></td></tr></table></figure>\n<p>根目录新增 <code>.rescriptsrc.js</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; name &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./package&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  webpack: <span class=\"function\">(<span class=\"params\">config</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    config.output.library = <span class=\"string\">`<span class=\"subst\">$&#123;name&#125;</span>-[name]`</span>;</span><br><span class=\"line\">    config.output.libraryTarget = <span class=\"string\">&#x27;umd&#x27;</span>;</span><br><span class=\"line\">    config.output.jsonpFunction = <span class=\"string\">`webpackJsonp_<span class=\"subst\">$&#123;name&#125;</span>`</span>;</span><br><span class=\"line\">    config.output.globalObject = <span class=\"string\">&#x27;window&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  devServer: <span class=\"function\">(<span class=\"params\">_</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> config = _;</span><br><span class=\"line\"></span><br><span class=\"line\">    config.headers = &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;Access-Control-Allow-Origin&#x27;</span>: <span class=\"string\">&#x27;*&#x27;</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    config.historyApiFallback = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    config.hot = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    config.watchContentBase = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    config.liveReload = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>在 <code>package.json</code> 添加脚本：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;dev&quot;</span>: <span class=\"string\">&quot;rescripts start&quot;</span>,</span><br><span class=\"line\"> \t<span class=\"string\">&quot;build:micro&quot;</span>: <span class=\"string\">&quot;rescripts build&quot;</span>,</span><br><span class=\"line\"> \t<span class=\"string\">&quot;test:micro&quot;</span>: <span class=\"string\">&quot;rescripts test&quot;</span>,</span><br></pre></td></tr></table></figure>\n\n<p>详细的API可以参考<a class=\"link\"   href=\"https://qiankun.umijs.org/zh/api\" >qiankun的官方文档<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>我的React的微应用<a class=\"link\"   href=\"https://github.com/micro-antd-admin/micro-react\" >demo<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h1 id=\"微应用接入主应用\"><a href=\"#微应用接入主应用\" class=\"headerlink\" title=\"微应用接入主应用\"></a>微应用接入主应用</h1><p>首先微前端项目肯定是一个项目群，我的demo项目群地址：<a class=\"link\"   href=\"https://github.com/micro-antd-admin\" >https://github.com/micro-antd-admin<i class=\"fas fa-external-link-alt\"></i></a><br>这个群组里面有3个项目，一个基于Antd Admin集成qiankun的<a class=\"link\"   href=\"https://github.com/micro-antd-admin/micro-main\" >主应用<i class=\"fas fa-external-link-alt\"></i></a>，一个<a class=\"link\"   href=\"https://github.com/micro-antd-admin/micro-vue\" >Vue微应用<i class=\"fas fa-external-link-alt\"></i></a>，一个<a class=\"link\"   href=\"https://github.com/micro-antd-admin/micro-react\" >React微应用<i class=\"fas fa-external-link-alt\"></i></a>。</p>\n<p>更新demo项目后，运行两个微应用 <code>npm run dev</code> 会有两个本地服务端口。</p>\n<p>然后去主应用的 <code>src/mock/user/routes.js</code> 模拟数据添加</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  router: <span class=\"string\">&#x27;microApp&#x27;</span>,</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;Vue 微应用&#x27;</span>,</span><br><span class=\"line\">  appName: <span class=\"string\">&#x27;micro-vue&#x27;</span>,</span><br><span class=\"line\">  path: <span class=\"string\">&#x27;micro-vue&#x27;</span>,</span><br><span class=\"line\">  entry: <span class=\"string\">&#x27;http://localhost:9000&#x27;</span>,</span><br><span class=\"line\">  icon: <span class=\"string\">&#x27;appstore&#x27;</span>,</span><br><span class=\"line\">  children: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      router: <span class=\"string\">&#x27;parent&#x27;</span>,</span><br><span class=\"line\">      name: <span class=\"string\">&#x27;二级目录&#x27;</span>,</span><br><span class=\"line\">      icon: <span class=\"string\">&#x27;ant-design&#x27;</span>,</span><br><span class=\"line\">      children: [<span class=\"string\">&#x27;test&#x27;</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      router: <span class=\"string\">&#x27;home&#x27;</span>,</span><br><span class=\"line\">      icon: <span class=\"string\">&#x27;calendar&#x27;</span>,</span><br><span class=\"line\">      name: <span class=\"string\">&#x27;首页&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      router: <span class=\"string\">&#x27;about&#x27;</span>,</span><br><span class=\"line\">      icon: <span class=\"string\">&#x27;bulb&#x27;</span>,</span><br><span class=\"line\">      name: <span class=\"string\">&#x27;关于&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  router: <span class=\"string\">&#x27;microApp&#x27;</span>,</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;React 微应用&#x27;</span>,</span><br><span class=\"line\">  appName: <span class=\"string\">&#x27;micro-react&#x27;</span>,</span><br><span class=\"line\">  path: <span class=\"string\">&#x27;micro-react&#x27;</span>,</span><br><span class=\"line\">  entry: <span class=\"string\">&#x27;http://localhost:3000&#x27;</span>,</span><br><span class=\"line\">  children: [<span class=\"string\">&#x27;home&#x27;</span>, <span class=\"string\">&#x27;about&#x27;</span>, <span class=\"string\">&#x27;test&#x27;</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上demo如果有问题欢迎留言沟通😺</p>\n","categories":["开发","前端"],"tags":["singleSPA","微前端","qiankun"]},{"title":"解决Ubuntu命令-git pull总是提示输入密码问题(Enter passphrase for key /root/.ssh/id_rsa:)","url":"/%E5%BC%80%E5%8F%91/%E5%90%8E%E7%AB%AF/%E8%A7%A3%E5%86%B3Ubuntu%E5%91%BD%E4%BB%A4-git-pull%E6%80%BB%E6%98%AF%E6%8F%90%E7%A4%BA%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%E9%97%AE%E9%A2%98-Enter-passphrase-for-key-root-ssh-id-rsa.html","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最新新开的一台阿里云ECS服务来玩，在安装git并 按照 <a class=\"link\"   href=\"https://help.github.com/en/articles/connecting-to-github-with-ssh\" >使用SSH连接到GitHub<i class=\"fas fa-external-link-alt\"></i></a> 文档ssh授权git账户后，每次git命令操作都提要输入密码很烦！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">project-name git:(master) git pull</span><br><span class=\"line\">Enter passphrase for key &#39;&#x2F;root&#x2F;.ssh&#x2F;id_rsa&#39;: </span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n<h1 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h1><p>在Google上找一下，发现这个stackoverflow问题<br><a class=\"link\"   href=\"https://stackoverflow.com/questions/21095054/ssh-key-still-asking-for-password-and-passphrase\" >SSH Key - Still asking for password and passphrase<i class=\"fas fa-external-link-alt\"></i></a><br>一些介绍两种方案👇</p>\n<h2 id=\"方案一：添加没有钥匙串的身份\"><a href=\"#方案一：添加没有钥匙串的身份\" class=\"headerlink\" title=\"方案一：添加没有钥匙串的身份\"></a>方案一：添加没有钥匙串的身份</h2><p>用以下命令添加一个没有密码的id_rsa</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-add ~&#x2F;.ssh&#x2F;id_rsa </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"方案二：使用钥匙串添加身份\"><a href=\"#方案二：使用钥匙串添加身份\" class=\"headerlink\" title=\"方案二：使用钥匙串添加身份\"></a>方案二：使用钥匙串添加身份</h2><p>把密码记住保存在钥匙串中<br>对于在mac os上-K大写</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-add -K ~&#x2F;.ssh&#x2F;id_rsa</span><br></pre></td></tr></table></figure>\n<p>对于在Ubuntu上-k小写</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-add -k ~&#x2F;.ssh&#x2F;id_rsa</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"如果执行以上命令还是报如下错误\"><a href=\"#如果执行以上命令还是报如下错误\" class=\"headerlink\" title=\"如果执行以上命令还是报如下错误\"></a>如果执行以上命令还是报如下错误</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">➜  ~ ssh-add -k ~&#x2F;.ssh&#x2F;id_rsa</span><br><span class=\"line\">Could not open a connection to your authentication agent.</span><br></pre></td></tr></table></figure>\n<p>这是因为没有启动ssh-agent，执行以下命令启动ssh-agent</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">eval &quot;$(ssh-agent -s)&quot;</span><br><span class=\"line\">&gt; Agent pid 59566</span><br></pre></td></tr></table></figure>\n<p>详细操作如下图<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/15532356518597.jpg\"\n                     \n                ></p>\n<p>如果还有疑问请参考GitHub文档<br><a class=\"link\"   href=\"https://help.github.com/en/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#adding-your-ssh-key-to-the-ssh-agent\" >将SSH密钥添加到ssh-agent<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>其实是在一开始按照GitHub的文档操作就有漏了<br><a class=\"link\"   href=\"https://help.github.com/en/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#adding-your-ssh-key-to-the-ssh-agent\" >将SSH密钥添加到ssh-agent<i class=\"fas fa-external-link-alt\"></i></a><br>步骤，直接跳过这个到了第四步<br><a class=\"link\"   href=\"https://help.github.com/en/articles/adding-a-new-ssh-key-to-your-github-account\" >4.将SSH密钥添加到您的GitHub帐户<i class=\"fas fa-external-link-alt\"></i></a><br>所以才遗留下了这个一直要输入密码的坑。<br>如果是按照GitHub文档上正确操作步骤不会出现这个问题。<br>最终罪魁祸首是自己看GitHub的因为文档时没有认真。</p>\n","categories":["开发","后端"],"tags":["git",".ssh"]},{"title":"比'Vue Cli'更高纬度的下一代前端工具|尤雨溪新品Vite的魔力","url":"/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/%E6%AF%94Vue-Cli-%E6%9B%B4%E9%AB%98%E7%BA%AC%E5%BA%A6%E7%9A%84%E4%B8%8B%E4%B8%80%E4%BB%A3%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7-%E5%B0%A4%E9%9B%A8%E6%BA%AA%E6%96%B0%E5%93%81Vite%E7%9A%84%E9%AD%94%E5%8A%9B.html","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>现在前端cli工具已经比较成熟，而且用的也很方便，但是最近又出现了比’Vue Cli’更高纬度的下一代前端工具|尤雨溪新品Vite的魔力。<br>这些工具的出现是为了解决 ES Modules 模块系统本身的环境兼容问题、以及零散的模块文件导致的频繁网络请求发送和模块化发散的问题等等。<br>既然已经有了 Webpack，尤大再整一个 Vite 到底有啥用呢？</p>\n<span id=\"more\"></span>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16138110052185.jpg\"\n                      alt=\"本质上，webpack 是一个现代 JavaScript 应用程序的静态模块打包器（module bundler）。\"\n                ></p>\n<p>Vue 脚手架工具 vue-cli 使用 webpack 进行打包，开发时可以启动本地开发服务器，实时预览。因为需要对整个项目文件进行打包，开发服务器启动缓慢。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16138111670208.jpg\"\n                     \n                ></p>\n<p>而对于开发时文件修改后的热更新 HMR 也存在同样的问题。<br>Webpack 的热更新会以当前修改的文件为入口重新 build 打包，所有涉及到的依赖也都会被重新加载一次。<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16138111910731.jpg\"\n                     \n                ></p>\n<p>Vite 则很好地解决了上面的两个问题。<br><strong>先来打包问题</strong><br>vite 只启动一台静态页面的服务器，对文件代码不打包，服务器会根据客户端的请求加载不同的模块处理，实现真正的按需加载。<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16138112360691.jpg\"\n                     \n                ></p>\n<p><strong>对于热更新问题</strong><br>vite 采用立即编译当前修改文件的办法。同时 vite 还会使用缓存机制( http 缓存 =&gt; vite 内置缓存 )，加载更新后的文件内容。<br>所以，vite 具有了<strong>快速冷启动、按需编译、模块热更新</strong>等优良特质。<br>综上所述，vite 构建项目与 vue-cli 构建的项目在开发模式下还是有比较大的区别：</p>\n<ol>\n<li>Vite 在开发模式下不需要打包可以直接运行，使用的是 ES6 的模块化加载规则；Vue-CLI 开发模式下必须对项目打包才可以运行。</li>\n<li>Vite 基于缓存的热更新，Vue-CLI 基于 Webpack 的热更新。</li>\n</ol>\n<p><strong>说了这么多，vite 到底应该怎么用呢？</strong><br>我们简单来使用一下。<br>确保 Node 版本是大于等于 12 的。<br>使用 NPM 命令：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm init @vitejs/app</span><br></pre></td></tr></table></figure>\n<p>然后按照提示进行操作！<br>您还可以通过其他命令行选项直接指定项目名称和要使用的模板。例如，要搭建Vite + Vue项目，请运行：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"># npm 6.x</span><br><span class=\"line\">npm init @vitejs/app my-vue-app --template vue</span><br><span class=\"line\"></span><br><span class=\"line\"># npm 7+, extra double-dash is needed:</span><br><span class=\"line\">npm init @vitejs/app my-vue-app -- --template vue</span><br><span class=\"line\"></span><br><span class=\"line\"># yarn</span><br><span class=\"line\">yarn create @vitejs/app my-vue-app --template vue</span><br></pre></td></tr></table></figure>\n\n<p>支持的模板预设包括：</p>\n<ul>\n<li>vanilla</li>\n<li>vue</li>\n<li>vue-ts</li>\n<li>react</li>\n<li>react-ts</li>\n<li>preact</li>\n<li>preact-ts</li>\n<li>lit-element</li>\n<li>lit-element-ts</li>\n</ul>\n<p>详细查看<a class=\"link\"   href=\"https://vitejs.dev/guide/#scaffolding-your-first-vite-project\" >vite官方文档<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16138115837949.jpg\"\n                      alt=\"我本地创建Vite项目截图\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16138116296897.jpg\"\n                      alt=\"我本地运行Vite项目截图\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16138110542452.jpg\"\n                     \n                ></p>\n","categories":["开发","前端"],"tags":["vue","vue-cli","vite"]},{"title":"记一次超级大坑-Vue对象在SSR服务端为单例状态","url":"/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%B6%85%E7%BA%A7%E5%A4%A7%E5%9D%91-Vue%E5%AF%B9%E8%B1%A1%E5%9C%A8SSR%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%B8%BA%E5%8D%95%E4%BE%8B%E7%8A%B6%E6%80%81.html","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>这是一个让我一天两夜没安宁过的严重线上bug. 一开始测试跟我反馈说：”测试脚本有几率跑出H5页面无头部脚部左侧菜单栏组件的情况，并且页面无法点击部分图片资源无法加载。“我当时在忙其他的，随后去线上测试了一下，重现不了！我就继续忙其他的没在意。到了周六在家在家有空的时候想起测试反馈的这个问题。我想着重现不了，我就去分析一下转化数据吧，看看有没什么问题。一看数据吓我一跳，自测试跟我反馈问题的那天的时间节点起H5页面转化数据掉了近一半，整体平均浏览深度降了1/3。我立马召集小伙伴去公司加班排查，测试配合只能在线上环境测出问题，测试环境和alpha环境怎么都测不出来问题。重现不了的问题最难排查。耗费了我们前端团队一天的时间，最终终于在本地环境重现bug。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"找问题步骤\"><a href=\"#找问题步骤\" class=\"headerlink\" title=\"找问题步骤\"></a>找问题步骤</h1><ol>\n<li>对问题开始当天天上线的代码进行深度code review（并没到什么可疑代码）</li>\n<li>想办法在测试环境重现（想要重现线上环境的问题，那就要找出测试环境和生产环境的区别）</li>\n<li>尝试在测试环境跑高并发压测（然后也并没重现问题）</li>\n<li>尝试在测试环境嵌入较多的H5页面，因为H5只有在App内才会隐藏头部脚部</li>\n<li>检查SSR服务端渲染缓存策略。（能确认如果某个页面渲染的错误页面在服务端有短时间缓存，但是缓存策略也有做细分维度区分，站点级/地区级/页面级/AB测试级）</li>\n<li>锁定我们用的Vue.prototype.$isFromApp（我们所有地方判断页面是否内嵌App都是通过这个状态判断）</li>\n</ol>\n<h1 id=\"大概率锁定是-Vue-prototype-isFromApp-这个状态的问题\"><a href=\"#大概率锁定是-Vue-prototype-isFromApp-这个状态的问题\" class=\"headerlink\" title=\"大概率锁定是 Vue.prototype.$isFromApp 这个状态的问题\"></a>大概率锁定是 Vue.prototype.$isFromApp 这个状态的问题</h1><p>由于之前看官方的<code>Vue.prototype.$isServer</code> 就想着参考官方的思路维护一个判断是否是App内嵌的状态。所有页面根据这个状态判断页面App内嵌的特殊渲染逻辑。这个时候就埋下了这个坑（注意！！一定不要忘记Vue在服务端是单例状态，所有用户PV在服务端都是公用一个初始化好的Vue对象）。<br>我们内嵌App的链接跟App约定好的链接会带<code>platform=app</code>参数。H5会根据这个参数和其他一些js注入的信息计算维护<code>Vue.prototype.$isFromApp</code>这个状态。其实这个问题在很久前就是个问题，只是之前App内嵌H5的页面少，App并发请求进H5跟浏览器端请求抢更新<code>Vue.prototype.$isFromApp</code>状态的时机就少。而Vue官方<code>Vue.prototype.$isServer</code>不会有问题，因为每个用户请求在服务端的时候状态都是true。在客户端每个用户请求状态都是false。（所以不能再用$isServer的状态在mounted生命周期之前来判断做出不一样的内容渲染，不然也是会被浏览器接管失败并报错<code>_frame.js:7 Uncaught (in promise) DOMException: Failed to execute &#39;appendChild&#39; on &#39;Node&#39;: This node type does not support this method.     at Object.appendChild</code>）</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16278966875249.jpg\"\n                     \n                ></p>\n<h1 id=\"实测确认Vue单例状态导致-isFromApp状态在多个请求间错乱问题\"><a href=\"#实测确认Vue单例状态导致-isFromApp状态在多个请求间错乱问题\" class=\"headerlink\" title=\"实测确认Vue单例状态导致$isFromApp状态在多个请求间错乱问题\"></a>实测确认Vue单例状态导致$isFromApp状态在多个请求间错乱问题</h1><p>为了在测试环境和本地环境重现线上的bug情况，我们就需要造出测试环境和本地环境模拟内嵌App内高并发访问H5页面。我们清楚业务上是通过url里面的<code>platform=app</code>参数来判断App内嵌的。所以我就用 <a class=\"link\"   href=\"https://juejin.cn/post/6844903477643051016\" >ab 压测命令<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>在终端用ab跑60000次请求，并发100。跑的链接带<code>platform=app</code> 让这些请求把<code>Vue.prototype.$isFromApp</code>高速的刷成<code>true</code>状态。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ab -n 60000 -c 100 -C &quot;dynamicCdnCacheKey&#x3D;wap:test&quot; -H &quot;User-Agent:Mozilla&#x2F;5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit&#x2F;605.1.15 (KHTML, like Gecko) Version&#x2F;13.0.3 Mobile&#x2F;15E148 Safari&#x2F;604.1&quot; https:&#x2F;&#x2F;hk-m.patpat.site&#x2F;zh&#x2F;article&#x2F;sizechart\\?category_name_app\\&#x3D;\\&amp;sizeUnit\\&#x3D;cm\\&amp;product_id\\&#x3D;441607\\&amp;platform\\&#x3D;app\\&amp;visit_from\\&#x3D;embedded\\&amp;timezone\\&#x3D;GMT%208\\&amp;version\\&#x3D;6.3.2\\&amp;user_token\\&#x3D;abdfgijmprtuzBCDEFHIMNQSVXYZ4569\\&amp;currency\\&#x3D;EUR\\&amp;position\\&#x3D;home-1823_hotarea_4-61054415430226c07204fafc_001</span><br></pre></td></tr></table></figure>\n\n<p>这个时候去浏览器放访问不带<code>platform=app</code>的链接，也会大概率按照<code>Vue.prototype.$isFromApp=true</code>的状态渲染无头脚页面。</p>\n<p>在测试环境和本地环境重现了就好解决问题了，当确认这个问题的时候我内心”WOCAO“。</p>\n<p>最后把这个<code>Vue.prototype.$isServer</code>状态删掉，把状态记录到了Vuex全局状态，因为我们Vuex是每次请求都创建的<a class=\"link\"   href=\"https://ssr.vuejs.org/zh/guide/structure.html#%E9%81%BF%E5%85%8D%E7%8A%B6%E6%80%81%E5%8D%95%E4%BE%8B\" >避免了Node端的单例状态问题<i class=\"fas fa-external-link-alt\"></i></a>。</p>\n","categories":["开发","前端"],"tags":["vue","ssr"]},{"title":"Stripe支付平台对接技术方案","url":"/%E5%BC%80%E5%8F%91/%E5%90%8E%E7%AB%AF/Stripe%E6%94%AF%E4%BB%98%E5%B9%B3%E5%8F%B0%E5%AF%B9%E6%8E%A5%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88.html","content":"<h1 id=\"我接触过的几个支付管理平台-Adyen、Braintree、PayPal、Stripe。\"><a href=\"#我接触过的几个支付管理平台-Adyen、Braintree、PayPal、Stripe。\" class=\"headerlink\" title=\"我接触过的几个支付管理平台 Adyen、Braintree、PayPal、Stripe。\"></a>我接触过的几个支付管理平台 <a class=\"link\"   href=\"https://docs.adyen.com/developers\" >Adyen<i class=\"fas fa-external-link-alt\"></i></a>、<a class=\"link\"   href=\"https://developers.braintreepayments.com/\" >Braintree<i class=\"fas fa-external-link-alt\"></i></a>、<a class=\"link\"   href=\"https://developer.paypal.com/\" >PayPal<i class=\"fas fa-external-link-alt\"></i></a>、<a class=\"link\"   href=\"https://stripe.com/docs/development\" >Stripe<i class=\"fas fa-external-link-alt\"></i></a>。</h1><p>最近新接触的Stripe支付平台，相比前几个我感觉Stripe更专业一些，后台管理功能清晰，操作方便，体验好。<br>开发文档也很清晰，相对前之前接触的支付平台开发文档,Stripe这个我觉得更容易快速了解其所有API,以及功能。API参数及参数说明很清晰，返回数据结构很合理，对应的API返回对应对象属性很容易理解。不像PayPal返回结果特别不好用，夹着各种键值对，结构凌乱。</p>\n<p>下面记录我集成Stripe支付平台过程。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"前端SDK集成-Android、IOS、JS\"><a href=\"#前端SDK集成-Android、IOS、JS\" class=\"headerlink\" title=\"前端SDK集成: Android、IOS、JS\"></a><font size=5>前端SDK集成: <a class=\"link\"   href=\"https://stripe.com/docs/mobile/android/standard\" >Android<i class=\"fas fa-external-link-alt\"></i></a>、<a class=\"link\"   href=\"https://stripe.com/docs/mobile/ios/custom\" >IOS<i class=\"fas fa-external-link-alt\"></i></a>、<a class=\"link\"   href=\"https://stripe.com/docs/stripe-js/elements/quickstart\" >JS<i class=\"fas fa-external-link-alt\"></i></a></font></h1><h2 id=\"IOS-SDK集成-前端相关这里只做粗略讲解，PHP后端再详细讲解。\"><a href=\"#IOS-SDK集成-前端相关这里只做粗略讲解，PHP后端再详细讲解。\" class=\"headerlink\" title=\"IOS SDK集成(前端相关这里只做粗略讲解，PHP后端再详细讲解。\"></a><font size=4>IOS SDK集成(前端相关这里只做粗略讲解，PHP后端再详细讲解。</font></h2><p>建议用pods 安装SDK，如果不了解Pods 请前往<a class=\"link\"   href=\"https://guides.cocoapods.org/using/getting-started.html\" >CocoaPods<i class=\"fas fa-external-link-alt\"></i></a> 了解更多。<br>在Pods/Podfile文件下添加如下：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"code\"><pre><span class=\"line\">pod <span class=\"string\">&#x27;Stripe&#x27;</span>, <span class=\"string\">&#x27;13.0.0&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>然后终端执行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">pod update</span><br></pre></td></tr></table></figure>\n\n<p>之后就根据 <a class=\"link\"   href=\"https://stripe.com/docs/mobile/ios/custom\" >Stripe IOS相关文档<i class=\"fas fa-external-link-alt\"></i></a>编写相关代码</p>\n<p>在集成过程中前端SDK会需要一个Publishable key ,这个Publishable key需要注册Stripe账户后登陆到Stripe管理后台，进入到 <a class=\"link\"   href=\"https://dashboard.stripe.com/account/apikeys\" >Dashboard<i class=\"fas fa-external-link-alt\"></i></a> Developers-&gt;API keys模块页面上获取。</p>\n<p>Stripe 的API keys有 Publishable key(公钥) 和 Secret key(私钥)</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Publishable key 大概格式</span></span><br><span class=\"line\">测试环境：pk_test_***********************</span><br><span class=\"line\">正式环境：pk_live_***********************</span><br><span class=\"line\"><span class=\"comment\">//Secret key 大概格式</span></span><br><span class=\"line\">测试环境：sk_test_***********************</span><br><span class=\"line\">正式环境：sk_live_***********************</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Publishable key 可以公开在前端代码里面，就是给前端SDK用的，在前端输入银行卡信息后，前端需要用Publishable key和卡信息生成一个token传给后端，由于我们公司的<a class=\"link\"   href=\"https://www.pcisecuritystandards.org/\" >PCI<i class=\"fas fa-external-link-alt\"></i></a>认证还在办理中，所以用户的卡信息是不能直接传到我们后台服务器，<a class=\"link\"   href=\"https://stripe.com/docs/security#validating-pci-compliance\" >Stripe的SDK是符合PCI规范的<i class=\"fas fa-external-link-alt\"></i></a>我们主要通过Stripe的SDK来生成一个token,后端拿这个token可以调用Stripe的API去添加卡或者付款，前端用银行卡信息生成的这个token只能使用一次并且两个小时内有效。</li>\n<li>Secret key 相当于拥有你Secret账户的数据的新增、修改、删除权限。所以这个是要严格秘密的保存在服务端配置文件里面。</li>\n</ul>\n<h2 id=\"Android-SDK集成也简单讲一下\"><a href=\"#Android-SDK集成也简单讲一下\" class=\"headerlink\" title=\"Android SDK集成也简单讲一下\"></a><font size=4>Android SDK集成也简单讲一下</font></h2><p>使用<a class=\"link\"   href=\"https://developer.android.com/studio/intro/\" >Android Studio<i class=\"fas fa-external-link-alt\"></i></a>和<a class=\"link\"   href=\"https://www.jetbrains.com/help/idea/2016.3/getting-started-with-android-development.html\" >IntelliJ<i class=\"fas fa-external-link-alt\"></i></a>来安装Stripe Android库类似。您不需要克隆回购站或下载任何文件。只需将以下内容添加到项目build.gradle文件中，位于依赖项部分。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">implementation <span class=\"string\">&#x27;com.stripe:stripe-android:6.1.2&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>Android 的前端代码集成逻辑也基本是一致的。都是最后通过用户输入的卡信息和Publishable key生成一个token传给后台。</p>\n<h2 id=\"网站-js-SDK集成也简单讲一下\"><a href=\"#网站-js-SDK集成也简单讲一下\" class=\"headerlink\" title=\"网站 js SDK集成也简单讲一下\"></a><font size=4>网站 js SDK集成也简单讲一下</font></h2><p>Card Element Quickstart<br>使用我们预先构建的UI组件的<a class=\"link\"   href=\"https://stripe.com/elements\" >Elements<i class=\"fas fa-external-link-alt\"></i></a>，安全地收集敏感卡的详细信息。<br>Elements是Stripe.js的一部分。要开始，请在您的页面上包含此脚本 - 它应始终直接从<a href=\"https://js.stripe.com加载：\">https://js.stripe.com加载：</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">&quot;https://js.stripe.com/v3/&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>js SDK的集成跟App有比较大的差别，具体细节查阅 <a class=\"link\"   href=\"https://stripe.com/docs/stripe-js/elements/quickstart\" >Stripe.js &amp; Elements<i class=\"fas fa-external-link-alt\"></i></a><br>不过最后都是前端 用 卡信息和Publishable key生成一个token传给后台。</p>\n<h1 id=\"Stripe-PHP后台集成详细说明（编辑中）\"><a href=\"#Stripe-PHP后台集成详细说明（编辑中）\" class=\"headerlink\" title=\"Stripe PHP后台集成详细说明（编辑中）\"></a><font size=5>Stripe PHP后台集成详细说明（编辑中）</font></h1><h2 id=\"1-安装Stripe-PHP-Composer包\"><a href=\"#1-安装Stripe-PHP-Composer包\" class=\"headerlink\" title=\"1. 安装Stripe PHP Composer包\"></a><font size=4>1. 安装Stripe PHP Composer包</font></h2><p>首先说明下后台环境：nginx服务器，PHP+Laravel5.2, mySql5.6<br>其次对Composer包有疑问的请前往<a class=\"link\"   href=\"https://packagist.org/\" >Packagist<i class=\"fas fa-external-link-alt\"></i></a>了解更多。<br>在PHP项目根目录下的composer.json 的 require下面添加：</p>\n<pre><code>&quot;stripe/stripe-php&quot;: &quot;^6.7.1&quot;\n</code></pre>\n<p>然后执行命令：</p>\n<pre><code>composer update --no-scripts\n</code></pre>\n<p>安装完后，PHP项目的Vendor下面会有Stripe的源码, 在使用一个代码库之前简单阅读以下他的源码是有必要的，看源码，你会更清楚这个代码库有什么，你需要什么。</p>\n<h2 id=\"2-配置Stripe-API业务及异常处理类\"><a href=\"#2-配置Stripe-API业务及异常处理类\" class=\"headerlink\" title=\"2. 配置Stripe API业务及异常处理类\"></a><font size=4>2. 配置Stripe API业务及异常处理类</font></h2><p>在项目中新建一个XXStripe.php，这个类专门处理Stripe API调用前后相关业务逻辑，以及API错误异常catch</p>\n<p>PHP环境变量配置 .env<br>在 .env下配置Secret key, 就是前面说到的秘密的保存在服务端的私钥。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">;STRIPE payment</span><br><span class=\"line\">STRIPE_API_KEY=sk_test_***********************</span><br></pre></td></tr></table></figure>\n<p>配置PHP支付相关config文件 payment.php</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> [</span><br><span class=\"line\">    <span class=\"string\">&#x27;PAYMENT_ENV&#x27;</span> =&gt; env(<span class=\"string\">&#x27;PAYMENT_ENV&#x27;</span>, <span class=\"string\">&#x27;sandbox&#x27;</span>),</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&#x27;braintree&#x27;</span> =&gt; [</span><br><span class=\"line\">        <span class=\"string\">&#x27;merchantId&#x27;</span> =&gt; env(<span class=\"string\">&#x27;BRAINTREE_MERCHANT_ID&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">        <span class=\"string\">&#x27;publicKey&#x27;</span> =&gt; env(<span class=\"string\">&#x27;BRAINTREE_PUBLIC_KEY&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">        <span class=\"string\">&#x27;privateKey&#x27;</span> =&gt; env(<span class=\"string\">&#x27;BRAINTREE_PRIVATE_KEY&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">        <span class=\"string\">&#x27;CESKey&#x27;</span> =&gt; env(<span class=\"string\">&#x27;BRAINTREE_CES_KEY&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&#x27;adyen&#x27;</span> =&gt; [</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">&#x27;app_name&#x27;</span> =&gt; env(<span class=\"string\">&#x27;ADYEN_APP_NAME&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">        <span class=\"string\">&#x27;username&#x27;</span> =&gt; env(<span class=\"string\">&#x27;ADYEN_USERNAME&#x27;</span>,<span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">        <span class=\"string\">&#x27;password&#x27;</span> =&gt; env(<span class=\"string\">&#x27;ADYEN_PASSWORD&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">        <span class=\"string\">&#x27;env&#x27;</span> =&gt; env(<span class=\"string\">&#x27;ADYEN_ENV&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">        <span class=\"string\">&#x27;merchant_account&#x27;</span> =&gt; env(<span class=\"string\">&#x27;ADYEN_MERCHANT_ACCOUNT&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">        <span class=\"string\">&#x27;shopper_interaction&#x27;</span> =&gt; env(<span class=\"string\">&#x27;ADYEN_SHOPPER_INTERACTION&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&#x27;payPal&#x27;</span> =&gt; [</span><br><span class=\"line\">        <span class=\"string\">&#x27;user&#x27;</span> =&gt; env(<span class=\"string\">&#x27;PAYPAL_USER&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">        <span class=\"string\">&#x27;password&#x27;</span> =&gt; env( <span class=\"string\">&#x27;PAYPAL_PASSWORD&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">        <span class=\"string\">&#x27;signature&#x27;</span> =&gt; env( <span class=\"string\">&#x27;PAYPAL_SIGNATURE&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">        <span class=\"string\">&#x27;new_user&#x27;</span> =&gt; env(<span class=\"string\">&#x27;NEW_PAYPAL_USER&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">        <span class=\"string\">&#x27;new_password&#x27;</span> =&gt; env( <span class=\"string\">&#x27;NEW_PAYPAL_PASSWORD&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">        <span class=\"string\">&#x27;new_signature&#x27;</span> =&gt; env( <span class=\"string\">&#x27;NEW_PAYPAL_SIGNATURE&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&#x27;stripe&#x27;</span> =&gt; [</span><br><span class=\"line\">        <span class=\"string\">&#x27;api_key&#x27;</span> =&gt; env(<span class=\"string\">&#x27;STRIPE_API_KEY&#x27;</span>, <span class=\"string\">&#x27;sk_test_***&#x27;</span>),</span><br><span class=\"line\">    ]</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<p>新建XXStripe类 处理Stripe API类参数及返回结果异常处理。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">App</span>\\<span class=\"title\">Modules</span>\\<span class=\"title\">Checkout</span>\\<span class=\"title\">Payment</span>\\<span class=\"title\">Stripe</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Carbon</span>\\<span class=\"title\">Carbon</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Stripe</span>\\<span class=\"title\">Card</span>; <span class=\"comment\">//👇这里可以看到可以引入Stripe各种API类，用来下面调用。</span></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Stripe</span>\\<span class=\"title\">Charge</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Stripe</span>\\<span class=\"title\">Customer</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Stripe</span>\\<span class=\"title\">Dispute</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Stripe</span>\\<span class=\"title\">Error</span>\\<span class=\"title\">Base</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Stripe</span>\\<span class=\"title\">Refund</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Stripe</span>\\<span class=\"title\">Source</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Stripe</span>\\<span class=\"title\">Stripe</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XXStripe</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//这里取到上面👆config里面的配置的stripe的私钥配置，初始化到Stripe对象里面。</span></span><br><span class=\"line\">        <span class=\"variable\">$stripeConfig</span> = Config::get(<span class=\"string\">&#x27;payment.stripe&#x27;</span>);</span><br><span class=\"line\">        Stripe::setApiKey(<span class=\"variable\">$stripeConfig</span>[<span class=\"string\">&#x27;api_key&#x27;</span>]);</span><br><span class=\"line\">        <span class=\"comment\">//更多相关初始化配置阅读Stripe源码。</span></span><br><span class=\"line\"><span class=\"comment\">//        Stripe::setAccountId(&quot;&quot;); </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addCard</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果Customer已经create 则直接拿之前存customer_id,往这个customer下面添加卡。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable\">$customerPayment</span>) &#123; <span class=\"comment\">//$customerPayment用$user_id去自己的业务库查是否创建过stripe customer的记录，没有则执行else逻辑</span></span><br><span class=\"line\">            <span class=\"variable\">$customer</span> = Customer::retrieve(<span class=\"variable\">$customerPayment</span>-&gt;braintree_token);</span><br><span class=\"line\">            <span class=\"variable\">$card</span> = <span class=\"variable\">$customer</span>-&gt;sources-&gt;create([<span class=\"string\">&quot;source&quot;</span> =&gt; <span class=\"variable\">$token</span>]);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//如何没有记录则在Stripe平台上Customer::create</span></span><br><span class=\"line\">            <span class=\"variable\">$customer</span> = Customer::create([</span><br><span class=\"line\">                <span class=\"string\">&#x27;source&#x27;</span> =&gt; <span class=\"variable\">$token</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;email&#x27;</span> =&gt; <span class=\"variable\">$email</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;metadata&#x27;</span> =&gt; [<span class=\"string\">&#x27;patpat_customer_id&#x27;</span> =&gt; <span class=\"variable\">$customerId</span>, <span class=\"string\">&#x27;firstname&#x27;</span> =&gt; <span class=\"variable\">$user</span>-&gt;customers_firstname, <span class=\"string\">&#x27;lastname&#x27;</span> =&gt; <span class=\"variable\">$user</span>-&gt;customers_lastname, <span class=\"string\">&#x27;phone&#x27;</span> =&gt; <span class=\"variable\">$phone</span>]</span><br><span class=\"line\">            ]);</span><br><span class=\"line\">            <span class=\"comment\">//添加卡后台拿到返回的$card对象存到对应业务库</span></span><br><span class=\"line\">            <span class=\"variable\">$card</span> = current(<span class=\"variable\">$customer</span>-&gt;sources-&gt;data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//你的业务代码，把Stripe 返回$customer,$card的觉得有用的对象参数 存到对应的业务表里。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setDefaultCard</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//$stripeCustomerId需要根据userId查到之前创建用户数存的stripeCustomerId </span></span><br><span class=\"line\">        <span class=\"comment\">//stripeCustomerId大概格式:cus_CvpoGuZa0BnJEz</span></span><br><span class=\"line\">        <span class=\"variable\">$customer</span> = Customer::retrieve(<span class=\"variable\">$stripeCustomerId</span>);</span><br><span class=\"line\">        <span class=\"variable\">$customer</span>-&gt;default_source = <span class=\"variable\">$cardId</span>; <span class=\"comment\">//$cardId也是之前存的用户的$cards列表，用户可能选一张卡来做完默认卡，$cardId大概格式:card_1CWwT1G5LmXuczdEAZo0lB2E</span></span><br><span class=\"line\">        <span class=\"variable\">$customer</span>-&gt;save();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable\">$customer</span>-&gt;default_source;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deleteCard</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//用$stripeCustomerId查找到Stripe支付的对应用户</span></span><br><span class=\"line\">        <span class=\"variable\">$customer</span> = Customer::retrieve(<span class=\"variable\">$stripeCustomerId</span>);</span><br><span class=\"line\">        <span class=\"comment\">//删除用户下对应的银行卡</span></span><br><span class=\"line\">        <span class=\"variable\">$customer</span>-&gt;sources-&gt;retrieve(<span class=\"variable\">$cardId</span>)-&gt;delete();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pay</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"variable\">$charge</span> = Charge::create([</span><br><span class=\"line\">                <span class=\"string\">&#x27;amount&#x27;</span> =&gt; <span class=\"variable\">$totalPay</span>*<span class=\"number\">100</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;currency&#x27;</span> =&gt; <span class=\"string\">&#x27;usd&#x27;</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;description&#x27;</span> =&gt; <span class=\"string\">&#x27;Example charge&#x27;</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;capture&#x27;</span> =&gt; <span class=\"literal\">false</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;customer&#x27;</span> =&gt; <span class=\"variable\">$stripeCustomerId</span>, <span class=\"comment\">//$stripeCustomerId是之前添加卡的时候存的</span></span><br><span class=\"line\">                <span class=\"string\">&#x27;source&#x27;</span> =&gt; <span class=\"variable\">$cardId</span>, <span class=\"comment\">//这个参数可不传，传这个参数就会用这个指定的card付款，$cardId也是添加卡的时候存的，</span></span><br><span class=\"line\">                <span class=\"string\">&#x27;metadata&#x27;</span> =&gt;[<span class=\"string\">&#x27;order_id&#x27;</span>=&gt;<span class=\"variable\">$orderId</span>]</span><br><span class=\"line\">            ]); </span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (\\Stripe\\<span class=\"built_in\">Error</span>\\Base <span class=\"variable\">$e</span>)&#123; <span class=\"comment\">//catch Stripe的API基本异常</span></span><br><span class=\"line\">            <span class=\"comment\">// Display a very generic error to the user, and maybe send</span></span><br><span class=\"line\">            <span class=\"comment\">// yourself an email</span></span><br><span class=\"line\">            Log::info(<span class=\"variable\">$e</span>-&gt;getStripeCode());</span><br><span class=\"line\">            Log::info(<span class=\"variable\">$e</span>-&gt;getMessage());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (<span class=\"built_in\">Exception</span> <span class=\"variable\">$e</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// Something else happened, completely unrelated to Stripe</span></span><br><span class=\"line\">        &#125;   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-使用前端传过来的token添加Stripe-Customers-或直接付款-Payments\"><a href=\"#3-使用前端传过来的token添加Stripe-Customers-或直接付款-Payments\" class=\"headerlink\" title=\"3. 使用前端传过来的token添加Stripe Customers 或直接付款 Payments\"></a><font size=4>3. 使用前端传过来的token添加Stripe Customers 或直接付款 Payments</font></h2><p>通过前端调用后端API传过来 user_id 和 token。<br>前端通过Stripe SDK生成的token可以用来调用任何需要token参数的 Stripe API, 可以用来在Stripe后台创建Customer, 用token创建Customer是会把token关联的银行卡信息自动添加到这个Customer下面。创建Customer会返回创建的customer_id,这个customer_id可以用来以后长期支付。<br>所以我这边的处理是拿到token后并不是去直接支付，因为这个token只能使用一次并且两个小时内有效。<br>用来创建Customer并自动在这个Customer下面添加一张银行卡，这样能拿到返回的Customer信息，Customer信息里面有customer_id card_id等信息，可以用来以后长期支付。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addCard</span>(<span class=\"params\"><span class=\"variable\">$token</span>, <span class=\"variable\">$email</span>, <span class=\"variable\">$user_id</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果Customer已经create 则直接拿之前存customer_id,往这个customer下面添加卡。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$customerPayment</span>) &#123; <span class=\"comment\">//$customerPayment用$user_id去自己的业务库查是否创建过stripe customer的记录，没有则执行else逻辑</span></span><br><span class=\"line\">        <span class=\"variable\">$customer</span> = Customer::retrieve(<span class=\"variable\">$customerPayment</span>-&gt;braintree_token);</span><br><span class=\"line\">        <span class=\"variable\">$card</span> = <span class=\"variable\">$customer</span>-&gt;sources-&gt;create([<span class=\"string\">&quot;source&quot;</span> =&gt; <span class=\"variable\">$token</span>]);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//如何没有记录则在Stripe平台上Customer::create</span></span><br><span class=\"line\">        <span class=\"variable\">$customer</span> = Customer::create([</span><br><span class=\"line\">            <span class=\"string\">&#x27;source&#x27;</span> =&gt; <span class=\"variable\">$token</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;email&#x27;</span> =&gt; <span class=\"variable\">$email</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;metadata&#x27;</span> =&gt; [<span class=\"string\">&#x27;patpat_customer_id&#x27;</span> =&gt; <span class=\"variable\">$customerId</span>, <span class=\"string\">&#x27;firstname&#x27;</span> =&gt; <span class=\"variable\">$user</span>-&gt;customers_firstname, <span class=\"string\">&#x27;lastname&#x27;</span> =&gt; <span class=\"variable\">$user</span>-&gt;customers_lastname, <span class=\"string\">&#x27;phone&#x27;</span> =&gt; <span class=\"variable\">$phone</span>]</span><br><span class=\"line\">        ]);</span><br><span class=\"line\">        <span class=\"comment\">//添加卡后台拿到返回的$card对象存到对应业务库</span></span><br><span class=\"line\">        <span class=\"variable\">$card</span> = current(<span class=\"variable\">$customer</span>-&gt;sources-&gt;data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//你的业务代码，把Stripe 返回$customer,$card的觉得有用的对象参数 存到对应的业务表里。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-Stripe默认卡设置，及删除卡\"><a href=\"#4-Stripe默认卡设置，及删除卡\" class=\"headerlink\" title=\"4. Stripe默认卡设置，及删除卡\"></a><font size=4>4. Stripe默认卡设置，及删除卡</font></h2><p>Strip跟<a class=\"link\"   href=\"https://docs.adyen.com/developers\" >Adyen<i class=\"fas fa-external-link-alt\"></i></a>、<a class=\"link\"   href=\"https://developers.braintreepayments.com/\" >Braintree<i class=\"fas fa-external-link-alt\"></i></a>支付平台有点不一样的地方</p>\n<ul>\n<li>Strip是创建Customer，创建的Customer对应你们的需要付款的用户，Strip的Customer下面可以添加Card或者是在Customer下面添加Sources，Sources是支付源，比如支付宝，微信，PayPal，微软支付等本地化支付。<br>然后Customer下面的这些多张Cards和多个Sources只有个一个被设置为默认支付方式，如下图<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/WechatIMG174.jpeg\"\n                     \n                ></li>\n</ul>\n<p>所以业务方去调用付款API的时候可以只传一个customer_id的参数和付款相关金额货币code,就可以完成付款，因为在Stripe上的Customer已经设置了一个默认付款方式</p>\n<ul>\n<li>Braintree和Adyen平台是给card授权后生成一个长期有效的可用于付款的card对应的付款token。</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setDefaultCard</span>(<span class=\"params\"><span class=\"variable\">$userId</span>, <span class=\"variable\">$cardId</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//$stripeCustomerId需要根据userId查到之前创建用户数存的stripeCustomerId </span></span><br><span class=\"line\">    <span class=\"comment\">//stripeCustomerId大概格式:cus_CvpoGuZa0BnJEz</span></span><br><span class=\"line\">    <span class=\"variable\">$customer</span> = Customer::retrieve(<span class=\"variable\">$stripeCustomerId</span>);</span><br><span class=\"line\">    <span class=\"variable\">$customer</span>-&gt;default_source = <span class=\"variable\">$cardId</span>; <span class=\"comment\">//$cardId也是之前存的用户的$cards列表，用户可能选一张卡来做完默认卡，$cardId大概格式:card_1CWwT1G5LmXuczdEAZo0lB2E</span></span><br><span class=\"line\">    <span class=\"variable\">$customer</span>-&gt;save();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable\">$customer</span>-&gt;default_source;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>删除卡</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deleteCard</span>(<span class=\"params\"><span class=\"variable\">$stripeCustomerId</span>, <span class=\"variable\">$cardId</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//用$stripeCustomerId查找到 对应用户</span></span><br><span class=\"line\">    <span class=\"variable\">$customer</span> = Customer::retrieve(<span class=\"variable\">$stripeCustomerId</span>);</span><br><span class=\"line\">    <span class=\"comment\">//删除用户下对应的银行卡</span></span><br><span class=\"line\">    <span class=\"variable\">$customer</span>-&gt;sources-&gt;retrieve(<span class=\"variable\">$cardId</span>)-&gt;delete();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-使用Stripe创建的Customers-ID支付或者指定Customers的某张卡支付\"><a href=\"#5-使用Stripe创建的Customers-ID支付或者指定Customers的某张卡支付\" class=\"headerlink\" title=\"5. 使用Stripe创建的Customers ID支付或者指定Customers的某张卡支付\"></a><font size=4>5. 使用Stripe创建的Customers ID支付或者指定Customers的某张卡支付</font></h2><p>Stripe的Charge类用于支付等API调用，下面我们看看使用 customer_id 付款代码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pay</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"variable\">$charge</span> = Charge::create([</span><br><span class=\"line\">            <span class=\"string\">&#x27;amount&#x27;</span> =&gt; <span class=\"variable\">$totalPay</span>*<span class=\"number\">100</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;currency&#x27;</span> =&gt; <span class=\"string\">&#x27;usd&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;description&#x27;</span> =&gt; <span class=\"string\">&#x27;Example charge&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;capture&#x27;</span> =&gt; <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;customer&#x27;</span> =&gt; <span class=\"variable\">$stripeCustomerId</span>, <span class=\"comment\">//$stripeCustomerId是之前添加卡的时候存的</span></span><br><span class=\"line\">            <span class=\"string\">&#x27;source&#x27;</span> =&gt; <span class=\"variable\">$cardId</span>, <span class=\"comment\">//这个参数可不传，传这个参数就会用这个指定的card付款，$cardId也是添加卡的时候存的，</span></span><br><span class=\"line\">            <span class=\"string\">&#x27;metadata&#x27;</span> =&gt;[<span class=\"string\">&#x27;order_id&#x27;</span>=&gt;<span class=\"variable\">$orderId</span>]</span><br><span class=\"line\">        ]); </span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (\\Stripe\\<span class=\"built_in\">Error</span>\\Base <span class=\"variable\">$e</span>)&#123; <span class=\"comment\">//catch Stripe的API基本异常</span></span><br><span class=\"line\">        <span class=\"comment\">// Display a very generic error to the user, and maybe send</span></span><br><span class=\"line\">        <span class=\"comment\">// yourself an email</span></span><br><span class=\"line\">        Log::info(<span class=\"variable\">$e</span>-&gt;getStripeCode());</span><br><span class=\"line\">        Log::info(<span class=\"variable\">$e</span>-&gt;getMessage());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (<span class=\"built_in\">Exception</span> <span class=\"variable\">$e</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Something else happened, completely unrelated to Stripe</span></span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调用Stripe每个API都建议 try catch以为Stripe的错误信息不会在api结果中放回，Stripe的api一般只返回成功后的对象，错误信息都是通过异常抛出，更多Error信息了解 进入<a class=\"link\"   href=\"https://stripe.com/docs/api/php#errors\" >Stripe API Error<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"6-支付交易Capture-扣款-Released-放弃扣款-Refund-扣款后退款\"><a href=\"#6-支付交易Capture-扣款-Released-放弃扣款-Refund-扣款后退款\" class=\"headerlink\" title=\"6. 支付交易Capture(扣款), Released(放弃扣款), Refund(扣款后退款)\"></a><font size=4>6. 支付交易Capture(扣款), Released(放弃扣款), Refund(扣款后退款)</font></h2><p>从上面付款可以看到参数 ‘capture’ =&gt; false, 这个参数主要是支付只授权，不立马扣款，给一个时间段给用户取消订单，这个时间段交易未capture，交易取消是不扣手续的，如果直接Capture了，用户取消订单，对业务方会产生额外手续费用。所以我们选择支付动作时只授权，不Capture。一般是一天批量Capture一次交易。<br>Capture代码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">capture</span>(<span class=\"params\"><span class=\"variable\">$transactionId</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//$transactionId 是在付款API Charge::create的时候返回的Charge的id,大概格式：ch_1CWgDWGmkmBuczdEnIVX1PXo</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$charge</span> = Charge::retrieve(<span class=\"variable\">$transactionId</span>);</span><br><span class=\"line\">        <span class=\"variable\">$charge</span> = <span class=\"variable\">$charge</span>-&gt;capture();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable\">$charge</span>-&gt;status == <span class=\"string\">&#x27;succeeded&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;status&#x27;</span> =&gt; <span class=\"literal\">true</span>, <span class=\"string\">&#x27;payment_type&#x27;</span>=&gt;PaymentType::STRIPE, <span class=\"string\">&#x27;content&#x27;</span>=&gt;[<span class=\"string\">&#x27;braintree_transaction_id&#x27;</span>=&gt;<span class=\"variable\">$charge</span>-&gt;id], <span class=\"string\">&#x27;message&#x27;</span>=&gt;<span class=\"string\">&quot;Settled Succeed!&quot;</span>];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;status&#x27;</span> =&gt; <span class=\"literal\">false</span>, <span class=\"string\">&#x27;payment_type&#x27;</span>=&gt;PaymentType::STRIPE, <span class=\"string\">&#x27;content&#x27;</span>=&gt;[<span class=\"string\">&#x27;braintree_transaction_id&#x27;</span>=&gt;<span class=\"variable\">$charge</span>-&gt;id], <span class=\"string\">&#x27;message&#x27;</span>=&gt;<span class=\"string\">&quot;Settled Failure!&quot;</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span> (\\<span class=\"built_in\">Exception</span> <span class=\"variable\">$e</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;status&#x27;</span> =&gt; <span class=\"literal\">false</span>, <span class=\"string\">&#x27;payment_type&#x27;</span>=&gt;PaymentType::STRIPE, <span class=\"string\">&#x27;content&#x27;</span>=&gt;[<span class=\"string\">&#x27;braintree_transaction_id&#x27;</span>=&gt;<span class=\"variable\">$transactionId</span>], <span class=\"string\">&#x27;message&#x27;</span>=&gt;<span class=\"variable\">$e</span>-&gt;getMessage()];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Released、Refund 代码是一样的，这个也是Stripe跟我之前接触的<a class=\"link\"   href=\"https://docs.adyen.com/developers\" >Adyen<i class=\"fas fa-external-link-alt\"></i></a>、<a class=\"link\"   href=\"https://developers.braintreepayments.com/\" >Braintree<i class=\"fas fa-external-link-alt\"></i></a>支付平台不一样的地方。<br>Adyen平台未扣款交易 调用 cancel() API, 扣款后调用的是refund() API<br>Braintree平台未扣款交易 调用的是 void() API, 扣款后调用的是 refund()API<br>Stripe Released、Refund代码如下</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">refund</span>(<span class=\"params\"><span class=\"variable\">$transactionId</span>, <span class=\"variable\">$amount</span>, <span class=\"variable\">$refundId</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//$transactionId 是在付款API Charge::create的时候返回的Charge的id,大概格式：ch_1CWgDWGmkmBuczdEnIVX1PXo</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$refund</span> = Refund::create([<span class=\"string\">&#x27;charge&#x27;</span> =&gt; <span class=\"variable\">$transactionId</span>, <span class=\"string\">&#x27;amount&#x27;</span> =&gt; <span class=\"variable\">$amount</span>, <span class=\"string\">&#x27;metadata&#x27;</span>=&gt; [<span class=\"string\">&#x27;refund_id&#x27;</span>=&gt;<span class=\"variable\">$refundId</span>]]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable\">$refund</span>-&gt;status == <span class=\"string\">&#x27;succeeded&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;status&#x27;</span> =&gt; <span class=\"literal\">true</span>, <span class=\"string\">&#x27;payment_type&#x27;</span>=&gt;PaymentType::STRIPE, <span class=\"string\">&#x27;content&#x27;</span>=&gt;[<span class=\"string\">&#x27;stripe_refund_id&#x27;</span>=&gt;<span class=\"variable\">$refund</span>-&gt;id], <span class=\"string\">&#x27;message&#x27;</span>=&gt;<span class=\"string\">&quot;Refund Succeed!&quot;</span>];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;status&#x27;</span> =&gt; <span class=\"literal\">false</span>, <span class=\"string\">&#x27;payment_type&#x27;</span>=&gt;PaymentType::STRIPE, <span class=\"string\">&#x27;content&#x27;</span>=&gt;[<span class=\"string\">&#x27;stripe_refund_id&#x27;</span>=&gt;<span class=\"variable\">$refund</span>-&gt;id], <span class=\"string\">&#x27;message&#x27;</span>=&gt;<span class=\"string\">&quot;Refund Failure!&quot;</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span> (\\<span class=\"built_in\">Exception</span> <span class=\"variable\">$e</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;status&#x27;</span> =&gt; <span class=\"literal\">false</span>, <span class=\"string\">&#x27;payment_type&#x27;</span>=&gt;PaymentType::STRIPE, <span class=\"string\">&#x27;content&#x27;</span>=&gt;[<span class=\"string\">&#x27;braintree_transaction_id&#x27;</span>=&gt;<span class=\"variable\">$transactionId</span>], <span class=\"string\">&#x27;message&#x27;</span>=&gt;<span class=\"variable\">$e</span>-&gt;getMessage()];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>更多Stripe API对象详细请查阅 <a class=\"link\"   href=\"https://stripe.com/docs/api/php\" >Stripe API 文档<i class=\"fas fa-external-link-alt\"></i></a>、<br><a class=\"link\"   href=\"https://stripe.com/docs/api/php#customers\" >对应Customers对象API文档<i class=\"fas fa-external-link-alt\"></i></a>、<br><a class=\"link\"   href=\"https://stripe.com/docs/api/php#charges\" >对应Charges(付款)对象API文档<i class=\"fas fa-external-link-alt\"></i></a>、<br><a class=\"link\"   href=\"https://stripe.com/docs/api/php#cards\" >对应Cards对象API文档<i class=\"fas fa-external-link-alt\"></i></a>、<br><a class=\"link\"   href=\"https://stripe.com/docs/api/php#refunds\" >对应Refunds对象API文档<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"7-交易风控相关，Stripe各种状态变更通知接收并更新到数据库\"><a href=\"#7-交易风控相关，Stripe各种状态变更通知接收并更新到数据库\" class=\"headerlink\" title=\"7. 交易风控相关，Stripe各种状态变更通知接收并更新到数据库\"></a><font size=4>7. 交易风控相关，Stripe各种状态变更通知接收并更新到数据库</font></h2><p>最后介绍一下Stripe的 <a class=\"link\"   href=\"https://stripe.com/docs/webhooks\" >Webhooks<i class=\"fas fa-external-link-alt\"></i></a> </p>\n<p>Webhooks 主要跟Adyen的通知类似，把用户及交易的所有事件状态变更通知到我们服务器，我们接受到通知时对不同情况做出相应处理。<br>比如Stripe检测到某笔交易是诈骗订单，会把订单状态及信息通知到我们，我们风控得知后可以对交易进行处理，已经后期风控规则的控制。</p>\n<p>Webhooks的配置需要在Stripe 的 <a class=\"link\"   href=\"https://dashboard.stripe.com/account/webhooks\" >Dashboard<i class=\"fas fa-external-link-alt\"></i></a> 中 的 Developers-&gt;Webhooks中添加业务服务器回调utl。</p>\n<p>然后在业务回调url中获取通知数据，把有用的数据存到业务库中。以及可以对相应特殊类型进行业务逻辑处理。</p>\n<p>这样有了通知数据后可以很方便的从通知数据中查询到任何的交易状态变更，以及Customer状态变更。</p>\n","categories":["开发","后端"],"tags":["js","ios","payment","php","android"]},{"title":"史蒂夫·乔布斯传阅读笔记","url":"/%E7%94%9F%E6%B4%BB/%E9%98%85%E8%AF%BB/%E4%B9%94%E5%B8%83%E6%96%AF%E4%BC%A0%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0.html","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>之前一直说Steve Jobs是自己的偶像，但是自己真的了解他吗？知道他经历过什么吗？知道他是什么性格的人吗？不知道！之前只看到他的光辉，只知道他创建了苹果公司，只知道他重新定义了智能手机，只知道他发布的所有苹果产品都那么完美。然而根本就不知道他是怎么做到的！</p>\n<span id=\"more\"></span>\n\n<h2 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h2><h3 id=\"九型人格的接触\"><a href=\"#九型人格的接触\" class=\"headerlink\" title=\"九型人格的接触\"></a>九型人格的接触</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/jiuxingrengetu.PNG\"\n                      alt=\"jiuxingrengetu\"\n                ><br>最开始接触<a class=\"link\"   href=\"https://baike.baidu.com/item/%E4%B9%9D%E5%9E%8B%E4%BA%BA%E6%A0%BC/9222652?fr=aladdin\" >九型人格<i class=\"fas fa-external-link-alt\"></i></a>是在一次公司组织管理层培训的时候，之前我从来没有参与过类似管理的培训。这次培训的讲师是张世民老师(互联网营销模式创新专家), 我之前一直对这类培训都感觉不屑，认为自己技术牛就可以行走江湖了，真是愚昧的认知。还好，遇到到张世民老师刷新了我的认知。张老师对所授课程吹毛求疵。深刻掌握受众特性，充分利用视频、图文素材和案例，受众参与度强。大气大方，引人入胜；擅长体验式教学，喜好创新，兼顾深度与趣味。张世明老师这次给我们讲的课程主要内容有：</p>\n<ul>\n<li>角色认知（定位与转换）</li>\n<li>目标管理（结果导向）</li>\n<li>高效沟通（步骤和方法）</li>\n<li>团队管理（教练式领导力）</li>\n<li>创新驱动（方法和实践）</li>\n<li>文化建设（价值观驱动）</li>\n<li>数据思维（大数据为导向）</li>\n</ul>\n<p>其中团队管理里面张世民老师详细的有深度的带我们了解了九型人格，要管理好一个团队，一定要认清团队里面每个人的性格，学会用对的方式跟对应性格的人相处。更重要一点是要认清自己的本性（九型人格号码），认识到自己的九型号码的缺点，正确的向对应九型号码的人学习。人的本性是改不了的，俗话说 “江山易改，本性难移！”，但是人的行为是后天可控制的。</p>\n<h3 id=\"对自己九型数字定位\"><a href=\"#对自己九型数字定位\" class=\"headerlink\" title=\"对自己九型数字定位\"></a>对自己九型数字定位</h3><p>在初步了解完九型人格的时候，我开始也纠结自己是属于哪个号码。我一开始认为自己是1号-完美型(理性正直、坚持自己的标准、有极强的原则性、外表严肃、做事有条理、有效率、高要求、认真…………)，但是后面听老师说5号-思想型，大多数程序员都是5号。然后看了下5号的性格特点（冷静、机智、分析力强、总喜欢思考、渴望比别人懂得多、不喜欢喧闹、喜欢独处、不善于与人打交道…………），然后我深信自己是5号-思想型。后面还加了张世民老师的微信，跟他聊了几句，我说我深信自己是5号-思想型，张世民老师也认同我的判断。</p>\n<p>然而过了两个多月，我再深入的感受九型人格。看过九型人格方面的书，不过这种要靠实际去感受的东西，通过文字是了解不透的。后面通过喜马拉雅上面的一个音频让我对九型人格有了更深入一层的认知和感受。这个音频是“<a class=\"link\"   href=\"https://m.ximalaya.com/share/album/346032?wechat=true&uid=121668980&shrdv=1DCBEF3E-2A88-44BF-807F-9F0ACF56D2B4&shrh5=iphone&shrid=16c73f97912c4a1&shrdh=1&shrpid=16c73f97912fceb\" >九型人格_现场版<i class=\"fas fa-external-link-alt\"></i></a>” 讲师-雷鸣。为什么是现场版，我认为现场版跟容易被带进那种感觉当中，我认为九型是需要靠感觉去悟的，而不是靠纯文字的书籍。</p>\n<p>在听完这个现场版音频后，我否定了我自己是5号-理智型。因为5号的好学不卷、喜欢用自己的智慧和理论去驾驭他人、喜欢分析事物及探讨抽象的观念从而内心充实、百分百用脑做人等等，这些5号的性格特点我没有！5号的世界观：“这个世界是具有侵略性的。我需要私人空间来思考，来为自己好好做准备”，这个世界观貌似跟我也不太符合。5号的关注点：事物的原理、文化的本质、世界动作的规律、复杂的理论等等，这些也不太是我关心的事情。 我结合我自己内心真正的感受，我是偏感觉区的人，我是一个自我的人，我是一个多愁善感的人。找到心区号码的4号，我认为我应该属于这个号码-自我型、浪漫型、艺术型，别笑。。。我真是这一类型。</p>\n<p><strong>4号的性格特点：</strong></p>\n<ul>\n<li>多愁善感，追求浪漫，情感世界较为丰富及充满幻想，容易受伤</li>\n<li>讲究个性，恐惧平淡，时常觉得自己与众不同，又有时觉得自己有缺憾和不足</li>\n<li>过分情绪化，敏感</li>\n<li>遇见别人否定或拒绝时往往退缩，觉得别人不明白自己，不理解自己</li>\n<li>与人分享不只喜悦，更多的是悲伤</li>\n<li>工作效率和情绪挂钩，有灵气，有很强的创造力</li>\n<li>对美感有独到的见解</li>\n<li>有强烈的占有欲，有时嫉妒，有时羡慕</li>\n<li>崇尚自由自在，不喜欢被约束和压制</li>\n<li>不了解人情世故，自我，风格我行我素</li>\n</ul>\n<p><strong>4号的世界观：</strong><br>我曾经被抛弃，没有人了解我，我更要找到我自己。</p>\n<p><strong>4号的关注点：</strong><br>内心的各种感觉，事物缺失的部分，遥不可及的幻想世界。</p>\n<p><strong>4号的代表人物：</strong><br>张国荣、徐志摩、王菲、梁朝伟、周杰伦、罗大佑、乔布斯</p>\n<p>以上4号人格相关的资料收集于书本文章和各种演讲音频。看完4号的相关信息，我深深的感受了一下自己，没错我就是4号-自我型、浪漫型、艺术型。</p>\n<h3 id=\"得知乔布斯跟自己都是4号人格\"><a href=\"#得知乔布斯跟自己都是4号人格\" class=\"headerlink\" title=\"得知乔布斯跟自己都是4号人格\"></a>得知乔布斯跟自己都是4号人格</h3><p>在看完4号代表人物里面的人，我感觉有些跟我性格很像，也不完全像（我还有更多比他们奇怪独特的地方）。看到代表人物里面有乔布斯，我有点怀疑，乔布斯竟然会是4号性格的人，是什么造就了他这样的性格，我想更多的去了解他，因为我自做IOS开发以来，一直把他当做偶像。</p>\n<p>于是我去百度了一下：“乔布斯 九型人格”<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/IMG_3716.PNG\"\n                      alt=\"IMG_3716\"\n                ></p>\n<p>然后我的书架上就多了一本《史蒂夫·乔布斯传》。在后面的阅读中会陆续更新阅读笔记。</p>\n<h2 id=\"开始阅读\"><a href=\"#开始阅读\" class=\"headerlink\" title=\"开始阅读\"></a>开始阅读</h2><p>“那些疯狂到以为自己能够改变世界的人，才能真正的改变世界。”<br>    苹果“非同凡响”广告，1997</p>\n<h3 id=\"乔布斯的童年\"><a href=\"#乔布斯的童年\" class=\"headerlink\" title=\"乔布斯的童年\"></a>乔布斯的童年</h3><p>“我小时候，一直都以为自己是个适合人文学科的人，但我喜欢电子设备，然后我看到了我的偶像之一，宝丽来创始人埃德温·兰德（Edwin Land）说的一些话，是关于既擅长人文又能驾驭科学的人的重要性的，于是我决定，我要成为这样的人。” 乔布斯说。他的偶像真的能正面的影响他，要做一个完美的人，是很累的，不过乔布斯坚持下来了。</p>\n<p>乔布斯的亲生父母的家庭环境都相对富豪，他的亲生父亲来自一个显赫的叙利亚家庭，他们家几代都重视教育，都是上很好的大学。他的亲生父亲家里有多家炼油厂和其他多种产业。他的亲生母亲家里做房地产以及多家大型养殖场，但是由于他亲生母亲的父亲认为乔布斯的亲生父亲不是天主教徒，所以强烈反对乔布斯的亲生父母在一起。所以，当在威斯康星大学读研究生的乔安妮（乔布斯亲生母亲）爱上了一个来自叙利亚的穆斯林助教，“约翰”阿卜杜勒法塔赫·钱德里（乔布斯亲生父亲）时，他威胁要与她断绝关系，就一点儿也不让人惊讶了。</p>\n<p>乔布斯的出生就是一件很悲惨的事情，1954年夏天，乔布斯的亲生母亲和他的亲生父亲一起在叙利亚待了两个后怀了他。<br>由于家庭原因和当时的社会原因，流产是一件很不容易的事情，所以乔布斯的亲生母亲决定躲在一个教堂生下他。在他还没出生的时候就已经找到了领养他的人。他亲生母亲对领养人唯一的要求就是要读过大学，一开始的协商好要领养他的是一个律师，但是在乔布斯出生后，因为是男孩，所有放弃了领养，他们期望领养的是女孩。再后面就是被一对高中没毕业的夫妻领养了。他亲生母亲一直不肯再领养协议上签字，直到后面提了个要求：“必须存一笔钱，供乔布斯上大学”。</p>\n<p>幸运的是乔布斯的养父母都是朴实人，对他很好，而且他的养父当过海军，退役后在一家汽修厂修汽车，有时经常回收一些报废汽车修好卖掉，可以赚不少。<br>他养父的超强动手能力，和对做事情追求完美的行为，对乔布斯深有影响。史蒂夫·乔布斯很早就知道了自己是被领养的。“我的父母在这件事情上对我很坦率。” 他养父的诚恳率真性格也影响着他。</p>\n<p>被遗弃。被选择。很特别。 一个型成的性格，不是看他这个人，而是要看他背后的家庭是怎样的，他的童年是如何度过的，他成长过程中最多的情绪是什么。</p>\n<p>我想起我自己，我也是从小被父母抛弃的人，从小跟外婆在农村长大，在读小学的期间，我算是一个完完整整的“留守儿童”。不过我的童年还算自由，也算开心，我外婆对我很好。虽然到现在我外婆老年痴呆了，但是她始终记得我。</p>\n<p>乔布斯6岁的时候就发现自己比他养父母聪明，更有意思的是他养父母也发现这件事情。乔布斯在学校是个喜欢恶作剧的人，跟同学们一起实行‘带宠物上学日’，到处都能看到狗撵猫🤣😂🤣。所以导致乔布斯读小学被老师送回家三次，他父亲已经把他当做特殊孩子来对待了，他希望学校也能这么对待自己的孩子。“听着，这不是他的错，”乔布斯回忆当时父亲是这么对老师说的，“如果你提不起他的兴趣，那是你的错。”乔布斯的记忆中，父母从来没有因为他在学校犯错而惩罚过他。他小学四年级遇到一个好老师，这个老师发现了他的特别之处，用奖励的方式鼓励他学习，之前乔布斯都是很自我，不太听话，在学校经常惹事，幸运的是他遇到了一个好老师，后面乔布斯学习不是为了得到老师的奖励 “我学习不再是为了奖励，只是希望让她开心。” 后面乔布斯被学校批准连跳两级，可以直接上七年级，因为他通过了老师的高年级测试。后面他养父做了一件正确的事情，还是让他只跳一级。然后开学后乔布斯就上六年级了，在比自己大一岁的人群中难免感觉有点不合群。</p>\n<p>像大多数孩子一样，他开始受身边大人们的热情影响。“住在我周围的父亲们大都研究的是很酷的东西，比如太阳能光伏电池和雷达，”乔布斯回忆道，“我对这些东西充满了惊奇，经常向他们问这问那。” 所以乔布斯的成长环境还是不错，周围邻居都是一些工程师，电子设备相关的工作者，乔布斯从小就深受其影响。</p>\n<p>在学校老师问乔布斯：“关于这个世界，你还有什么不明白的？” 乔布斯回答说：“我不明白为什么我爸爸一夜之间就破产了。” 虽然如此，乔布斯还是很为父亲骄傲，因为他从来没有学会那种卑微屈膝的态度和圆滑诡诈的作风。<br>这一点我也相似，我爸爸在08年家里条件富裕点的时候，买了汽车，对于中国农村来说，08年买了汽车已经算是不错的条件了。但是10年，我爸赌钱输了很多钱，还欠了一屁股债。那个时候我妈妈打电话给我哭诉这些事情，我当时在读书，我也一很无助不知道怎么安慰家人，甚至对我的情绪和后面的学业造成影响。我是一个容易被情绪影响做事效率的人，所有那几年我学习成绩都很差。<br>不过虽然如此，我还是心理为我爸感觉骄傲，他虽然输光了钱，但是他还是能站起来，把债还清，期间从未低头，从未学会那种卑微屈膝的态度和圆滑诡诈的作风。</p>\n<p>探索者俱乐部的孩子们被鼓励做一些项目，乔布斯决定做一台频率计数器，这是用来测量一个电子信号中每秒钟的脉冲数量的。他需要一些惠普制造的零件，所以他拿起电话打给了惠普的CEO：“那个时候，所有的电话号码都是登记在册的，所以我在电话簿上寻找住在帕洛奥图的比尔·休利特，然后打到了他家。他接了电话并和我聊了20分钟，之后他给了我那些零件，也给了我一份工作，就在他们制造频率计数器的工厂。” 从这件事情上就能看出他行动力之强大，对权威的不畏惧，对规矩的没规矩，在其内心早已萌芽。主要追求自己的目标需求。</p>\n<p>乔布斯15岁的在他父亲的帮助下他第一辆车，一辆双拼色的纳什大都会轿车，但他并不是很喜欢，但他不想让父亲知道。后面不到一年时间，他又自己攒钱可以换一辆带阿巴斯，发动机红色菲亚特850跑车。</p>\n<p>乔布斯高中的时候开始吸食大麻及各种迷幻药，他还因为这件事情跟他养父大吵了一架。他的性格使他喜欢沉溺与幻觉当中，他不喜欢感受那种被抛弃的感觉。</p>\n<p>“他经常一个人在角落里做自己的事情，压根不想跟我或者班上的其他人有任何交流。”麦科勒姆后来说。他从来没有放心地把储藏室的钥匙给过乔布斯。有一次乔布斯需要一样市面上找不到的零件，他就给制造商——底特律的伯勒斯公司（Burroughs）——打了一个对方付费电话，告诉他们自己正在设计一个新产品，想要测试一下那个部件。几天之后，这个部件通过航空包裹寄到了乔布斯手上。当麦科勒姆问他从哪儿弄来的时候，乔布斯带着一种旁若无人的骄傲讲述了事情的经过——他是怎样打对方付费电话并且编故事的。从上面的事情看出，主动真的很重要，很多资源其实只要主动并计划索取，很多人其实是愿意帮助你的，只是你要让其信任你，并觉得你很有意思</p>\n<h3 id=\"乔布斯和沃兹\"><a href=\"#乔布斯和沃兹\" class=\"headerlink\" title=\"乔布斯和沃兹\"></a>乔布斯和沃兹</h3><p>沃兹应该是乔布斯一生中很重要的一个伙伴，沃兹的父亲是典型的5号-思想型，在5号的知识理论熏陶下，导致沃兹也有点偏5号人格，但是我感觉沃兹不是纯5号，本应该是3号的感觉。沃兹八年级就会做计算器了，尽管在参赛者中还有十二年级的学生，但是沃兹的这台计算器还是赢得了最高奖。<br>沃兹也是一个喜欢搞恶作剧的人。对沃兹来说，被电击就好像是获得荣誉奖章一样。作为一名硬件工程师让他很自豪，但这也意味着触电是家常便饭。他曾经发明过一种轮盘赌游戏：四个人把拇指按在槽里，球落下之后，其中的一个会被电到。“搞硬件的人才愿意玩这个游戏，搞软件的都太胆小了。”他这么强调。<br>由于他喜欢搞电子产品，在同龄人在谈恋爱约会的时候，而他觉得这些都比设计电路更为复杂，他显得更加不合群了。高中四年级的时候，他做了一个电子节拍器——音乐教室里用来打拍子的、会发出“滴答”声的装置——然后他意识到“滴答”声听上去很像是炸弹定时器的声音。于是他把一些大块电池的标签撕掉，把它们绑在一起，然后放进了学校的储物柜里。他设定好装置，一旦柜门被打开，“滴答”频率就会变高。那天晚些时候，他被叫到了校长办公室。他还以为是因为他又一次获得了学校的最高数学奖。然而，等待他的是警察。</p>\n<p>高中四年级的时候，沃兹17岁就自己想着用最少的芯片制作一个台计算机。“我设计的计算机，使用的芯片数量只有市面上产品中芯片数量的一半，但我的设计还停留在图纸上。” 沃兹说。不过后面他在一个地下车库收集了芯片把这个计算机做出来了，命名为“奶油苏打水电脑”。在后面帮助他一起完成电脑制作的伙伴介绍他认识乔布斯，乔布斯和沃兹见面后，在比尔家门口的人行道坐了很久，两个人聊的很开心。从自己的恶作剧聊到电子学。“沃兹是我见过的第一个比我还懂电子学的人，”他从专业的角度这么说，“我立刻就喜欢上他了。我比自己的真实年龄要显得更成熟，而沃兹正相反，我们拉平了。沃兹非常聪明，但情商方面却像是我这个年龄的人。”</p>\n<p>一次有趣的电话通话音频波的泄露，让乔布斯和沃兹找到了免费打电话的机会，他们录制音频并制作出蓝色盒子，并且乔布斯还将蓝色盒子进行批量制作和销售。这位之后的他们的合作，也为之后的苹果公司奠定了基础。</p>\n<h3 id=\"出离\"><a href=\"#出离\" class=\"headerlink\" title=\"出离\"></a>出离</h3><p>乔布斯高中毕业，他父母本身准备让他读斯坦福大学，存的钱也就差不多够他读斯坦福大学。但是乔布斯高中毕业很是叛逆，跟布伦南搬到一座山上的房子同居，并且还服用迷幻药，一度跟父母争吵。但是在怎么争吵，在乔布斯的跑车高速起火时，来救援他的还是他的父亲。</p>\n<p>后面乔布斯答应去读大学，但是必须要要去里德学院，那是当时全美最贵的大学。<br>“去念斯坦福的人，他们已经知道自己想要什么了，”他说，“他们一点儿艺术性都没有。我想要上的是更富有艺术性的、更有趣的学校。” 可见乔布斯选择大学的时候就是那么的特别，什么都要追求个性，并追求完美，亢奋的4号人格就是会有追求完美的特征。</p>\n<p>乔布斯在去里德学院的时候一个人进的校门。他不想让父母跟着，同时后面乔布斯也感觉愧疚，因为选择这个学校给父母带来太大的经济压力，然后他当时并没有好好感谢父母，反而是不理他们。<br>乔布斯在学校里面认识了 科特基，一个跟乔布斯一样喜欢佛教禅宗。佛教对直觉的强调也深深影响了乔布斯。“我开始意识到，基于直觉的理解和意识，比抽象思维和逻辑分析更为重要。”<br>他们两个还经常一去读书馆的一个阁楼冥想，以及服用迷幻药。他们开始崇尚素食主义，支持菜叶和苹果跟水，所有乔布斯变得很瘦。</p>\n<p>一开始先是两天不吃东西，最终发展到一周甚至更长的时间，然后通过摄入大量的水和多叶蔬菜来结束绝食。“一周过后，你就会有很美妙的感觉了，”他说，“不用消化食物，可以让你获得很多活力。我当时状态很好，我觉得自己随时可以走路去旧金山。” 我认为有时候不吃东西确实，饿上一两天头脑会清晰喝多，而且走路变得轻快。所有很多东西，自己不亲身尝试，总是会持怀疑态度，只有自己亲身体验了，才知道原来是真的。</p>\n<p>乔布斯在里德学院还认识一个人，但是乔布斯最开始喜欢他身上的魅力，费里德兰比乔布斯大4岁，但是还在读本科，因为他之前因为携带价值125000美元的迷魂药被抓了拘留，后面回到学校进了学生会主席。他和乔布斯、科特基一样深深迷恋着东方精神。</p>\n<p>弗里德兰也觉得乔布斯十分有魅力。“他总是赤着脚走来走去，”他后来回忆说，“让我感到震撼的是他的激情。他只要对一样东西感兴趣，就会把这种兴趣发挥到非理性的极致状态。” 不过后面乔布斯并不喜欢费里德兰，就算乔布斯在他身上学到了不少东西，比如开朗，会推销等。“事情开始变得非常物质主义，”乔布斯回忆说，“每个人都了解到自己在为罗伯特的农场拼命工作，于是大家一个接一个地离开了。这一切让我觉得恶心。”</p>\n<p>“弗里德兰教给了史蒂夫现实扭曲力场，” 其实我一直不清楚现实扭曲力是什么，我暂且说一下我自己的理解，因为前不久看了国内评分较高的动漫《哪吒》，”若命运不公，我便与他斗到底” 把现在中很多人认为不可能的事情，把现在中不可能的事情扭曲成自己认为该有的样子。不被现实中的很多条框所限制。”我命由我，不由天！” 我也很多时候，其实并不甘安于现状。想改变，也许就是缺乏那种现实扭曲力场吧。</p>\n<p>在里德学院一年后，乔布斯选择退学，“我绝不会不去上必修课，这就是我们性格上的差异。” 其实他并不是真的想离开里德学院，他只是不想再付学费，也不想再去上那些提不起他兴趣的课程了。“我当时身处一个神奇的时代，”他后来回忆说，“提升我们觉悟的是禅宗，还有迷幻药。”即便是后来，他依然赞扬致幻剂让自己得到了更多启发：“使用迷幻药是一段意义非凡的经历，也是我一生中最重要的事情之一。迷幻药让你看到硬币的另一面，当药效退去之后你就记不清楚了，但你知道有这么一回事。它让我更清楚什么是重要的——创造伟大的发明，而不是赚钱。应该尽我所能，将此生放回历史和人类思想的长河。”</p>\n<h3 id=\"禅宗与游戏设计艺术\"><a href=\"#禅宗与游戏设计艺术\" class=\"headerlink\" title=\"禅宗与游戏设计艺术\"></a>禅宗与游戏设计艺术</h3><h3 id=\"乔布斯的恋爱\"><a href=\"#乔布斯的恋爱\" class=\"headerlink\" title=\"乔布斯的恋爱\"></a>乔布斯的恋爱</h3><p>乔布斯在23岁的时候抛弃了他的女儿，就像他父母当时抛弃他一样。<br>“他曾经被遗弃过，但后来他也遗弃了别人。”</p>\n<h3 id=\"待续…………\"><a href=\"#待续…………\" class=\"headerlink\" title=\"待续…………\"></a>待续…………</h3>","categories":["生活","阅读"],"tags":["Apple","Jobs","九型人格"]},{"title":"2023年IOS面试题整理","url":"/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/2023%E5%B9%B4IOS%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86.html","content":"<h1 id=\"基础面试题\"><a href=\"#基础面试题\" class=\"headerlink\" title=\"基础面试题\"></a>基础面试题</h1><h2 id=\"swift的基础类型有哪些\"><a href=\"#swift的基础类型有哪些\" class=\"headerlink\" title=\"swift的基础类型有哪些\"></a>swift的基础类型有哪些</h2><p>Swift是一种强类型语言，支持多种基础类型，这些基础类型包括:</p>\n<ol>\n<li>整型 (Integers): <code>Int、UInt</code> 等。</li>\n<li>浮点型 (Floating-Point Numbers): <code>Double、Float</code> 等</li>\n<li>布尔型 (Boolean): <code>Bool</code></li>\n<li>字符串 (String)</li>\n<li>字符 (Character)</li>\n<li>符号字面量 (Literal) : <code>true、false、nil、0、1.23</code>等</li>\n<li>元组 (Tuple) : 一组不同类型的数据的组合</li>\n<li>可选型 (Optional) : 用于表示一个变量有值或者没有值<br>Swift还支持类和结构体等复杂的数据类型，这些数据类型是由基础数据类型组合而成。</li>\n</ol>\n<p>除了基本类型, swift 也支持collection类型，例如 Array,Set,Dictionary。Swift中的集合类型也是基本数据类型, 并且与其他语言比较类似。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"在-Swift-中问号-的作用是什么？\"><a href=\"#在-Swift-中问号-的作用是什么？\" class=\"headerlink\" title=\"在 Swift 中问号(?)的作用是什么？\"></a>在 Swift 中问号(?)的作用是什么？</h2><p>在 Swift 中，问号 “?” 用于表示可选值 (Optionals)。可选值是一种特殊的类型，表示一个变量可能有值也可能没有值。</p>\n<p>使用可选值类型可以有效地避免 null 引用异常 (null reference exception) 。当一个变量是可选值类型时，你必须在使用它之前进行检查。如果它有值，才能使用它，而不会引起程序崩溃。</p>\n<p>当赋值给可选值时,如果不加”?” 那么编译器会将这个值包装为可选值类型。</p>\n<p>在使用可选值类型之前需要进行取值操作，以确保其有值并且可用.<br>常用的取值操作如下:</p>\n<ol>\n<li><code>if-let</code> 或 <code>guard-let</code>, 可以检查可选值是否有值并将其分配给一个临时常量或变量。</li>\n<li>强制解析 (force unwrap)，使用感叹号 ! 可以直接访问可选值中的值，但如果这个可选值是 <code>nil</code> 则会发生运行时错误。</li>\n<li>隐式解析可选值，使用可选值类型的变量名来访问可选值中的值，如果这个可选值是 <code>nil</code> 则会发生运行时错误。</li>\n</ol>\n<p>所以 “?” 是可选类型的标识符，在使用可选值类型时需要根据场景来选择合适的取值操作。</p>\n<h2 id=\"在IOS开发中KVO是什么？\"><a href=\"#在IOS开发中KVO是什么？\" class=\"headerlink\" title=\"在IOS开发中KVO是什么？\"></a>在IOS开发中KVO是什么？</h2><p>KVO (Key-Value Observing) 是 iOS 开发中一种机制，用于监听对象的属性值的变化。它允许开发者在不修改对象本身的情况下，监听对象的属性值的变化，并在发生变化时进行响应。KVO 是一种观察者模式，它可以让你在不破坏封装性的前提下观察对象的状态变化，而不用去手动地实现通知机制。KVO 能够让你轻松地监听和响应对象的属性变化，并且它是线程安全的，可以在多线程环境中使用。<br>需要注意的是,KVO在观察的属性必须是NSObject的子类且必须使用@objc dynamic修饰，才能被观察, 否则会报错。<br>另外,KVO常常被用来实现数据绑定，这种情况下，你需要在对象的属性变化时自动更新 UI。但是过度使用 KVO 会导致性能问题，因此在使用 KVO 时应该尽量避免不必要的监听，并在不再需要时及时移除监听。</p>\n<p>KVO 使用方法：</p>\n<ol>\n<li>在需要监听的对象上调用 addObserver(_:forKeyPath:options:context:) 方法，并指定要监听的属性的 keyPath。</li>\n<li>实现 observeValue(forKeyPath:of:change:context:) 方法，并在其中处理属性值变化的逻辑。</li>\n<li>当监听不再需要时，调用 removeObserver(_:forKeyPath:) 方法来移除监听。</li>\n</ol>\n<h2 id=\"在IOS开发中AppDelegate和SceneDelegate的区别？\"><a href=\"#在IOS开发中AppDelegate和SceneDelegate的区别？\" class=\"headerlink\" title=\"在IOS开发中AppDelegate和SceneDelegate的区别？\"></a>在IOS开发中AppDelegate和SceneDelegate的区别？</h2><p>在 iOS 13 之前的版本中， AppDelegate 是应用程序的入口点，它处理应用程序的生命周期事件，如启动、挂起、进入后台等。它还负责应用程序级别的任务，如处理远程推送、设置根视图控制器等。</p>\n<p>在 iOS 13 及以上版本中， Apple 推出了 SceneDelegate 类来处理应用程序的场景级别事件，如屏幕上的某一场景启动、屏幕上的某一场景挂起等。</p>\n<p>主要的差别在于 AppDelegate 主要处理整个应用的生命周期和应用级别的事件，而 SceneDelegate 则主要处理场景（window）级别的事件。<br>在使用场景的应用中,多场景可以同时存在，每个场景对应一个SceneDelegate,而只有一个AppDelegate,它对应着整个应用程序</p>\n<p>因此,在iOS13 及以上系统中,SceneDelegate 是用来管理场景，AppDelegate 继续管理整个应用程序的一些生命周期事件及应用级别的任务，两者各自都起着不同的作用。</p>\n<h2 id=\"在Swift中class和struct的共同点和区别？\"><a href=\"#在Swift中class和struct的共同点和区别？\" class=\"headerlink\" title=\"在Swift中class和struct的共同点和区别？\"></a>在Swift中class和struct的共同点和区别？</h2><p>Class 和 Struct 是 Swift 中两种基本的数据类型，它们之间有一些共同点和区别。</p>\n<p>共同点:</p>\n<ol>\n<li><p>都可以定义属性 (properties) 和方法 (methods)。</p>\n</li>\n<li><p>都可以遵循协议 (protocols)。</p>\n</li>\n<li><p>都可以使用类型转换 (type casting)。</p>\n</li>\n<li><p>都可以使用扩展 (extensions) 添加新的功能。<br>区别：</p>\n</li>\n<li><p>不同的创建方式: 结构体是由 struct 关键字创建，类是由 class 关键字创建。</p>\n</li>\n<li><p>值类型和引用类型: 结构体是值类型，类是引用类型。结构体在进行赋值和传递时会进行值拷贝，类会进行引用传递。</p>\n</li>\n<li><p>继承: 类支持继承，结构体不支持。</p>\n</li>\n<li><p>deinit: 类有 deinit 方法可以进行清理操作,结构体没有</p>\n</li>\n<li><p>通过mutating关键字来修改结构体中的属性，而类可以直接修改。</p>\n</li>\n<li><p>根据使用场景来决定是使用类还是结构体，如果需要继承或者在赋值或传递时需要进行引用传递，则使用类；如果需要一个简单的数据类型并且需要在赋值或传递时进行值拷贝，则使用结构体。需要注意的是,结构体和类都是可以使用协议和扩展,协议继承以及类型转换来扩展功能的,而不仅仅限于类.</p>\n</li>\n</ol>\n<p>选择结构体还是类取决于你的项目需求和预期行为。如果不需要继承或者在赋值和传递时需要进行值拷贝，则选择结构体；如果需要继承或者在赋值和传递时需要进行引用传递，则选择类。</p>\n<h2 id=\"ios开发中有哪些常用的设计模式？\"><a href=\"#ios开发中有哪些常用的设计模式？\" class=\"headerlink\" title=\"ios开发中有哪些常用的设计模式？\"></a>ios开发中有哪些常用的设计模式？</h2><ol>\n<li>责任链（Chain Of Responsibility）责任链模式在面向对象程式设计里是一种软件设计模式，它包含了一些命令对象和一系列的处理对象。每一个处理对象决定它能处理哪些命令对象，它也知道如何将它不能处理的命令对象传递给该链中的下一个处理对象。</li>\n<li>命令（Command）命令模式是一种设计模式，它尝试以对象来代表实际行动。命令对象可以把行动(action) 及其参数封装起来，于是这些行动可以被：重复多次、取消（如果该对象有实现的话）、取消后又再重做</li>\n<li>解释器（Interpreter）给定一种语言，定义他的文法的一种表示，并定义一个解释器，该解释器使用该表示来解释语言中句子。</li>\n<li>迭代器（Iterator）迭代器模式可以让用户通过特定的接口巡访容器中的每一个元素而不用了解底层的实现。</li>\n<li>中介者（Mediator）用一个中介者对象封装一系列的对象交互，中介者使各对象不需要显示地相互作用，从而使耦合松散，而且可以独立地改变它们之间的交互。</li>\n<li>备忘录（Memento）在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样就可以将该对象恢复到原先保存的状态。</li>\n<li>观察者（Observer）一个目标对象管理所有相依于它的观察者对象，并且在它本身的状态改变时主动发出通知</li>\n<li>状态（State）在状态模式中，对象的行为是基于它的内部状态而改变的。 这个模式允许某个类对象在运行时发生改变。</li>\n<li>策略（Strategy）对象有某个行为，但是在不同的场景中，该行为有不同的实现算法。策略模式：定义了一族算法（业务规则）、封装了每个算法、这族的算法可互换代替（interchangeable）。</li>\n<li>模板方法（Template method） 模板方法模式是一种行为设计模式， 它通过父类/协议中定义了一个算法的框架， 允许子类/具体实现对象在不修改结构的情况下重写算法的特定步骤。</li>\n<li>访问者（Visitor）封装某些作用于某种数据结构中各元素的操作，它可以在不改变数据结构的前提下定义作用于这些元素的新的操作。</li>\n<li>抽象工厂（Abstract Factory）抽象工厂模式提供了一种方式，可以将一组具有同一主题的单独的工厂封装起来。在正常使用中，客户端程序需要创建抽象工厂的具体实现，然后使用抽象工厂作为接口来创建这一主题的具体对象。</li>\n<li>生成器（Builder）一种对象构建模式。它可以将复杂对象的建造过程抽象出来（抽象类别），使这个抽象过程的不同实现方法可以构造出不同表现（属性）的对象。</li>\n<li>工厂方法（Factory Method）定义一个创建对象的接口，但让实现这个接口的类来决定实例化哪个类。工厂方法让类的实例化推迟到子类中进行。</li>\n<li>单态（Monostate）单态模式是实现单一共享的另一种方法。不同于单例模式，它通过完全不同的机制，在不限制构造方法的情况下实现单一共享特性。 因此，在这种情况下，单态会将状态保存为静态，而不是将整个实例保存为单例。</li>\n<li>单例（Singleton）单例对象的类必须保证只有一个实例存在。许多时候整个系统只需要拥有一个的全局对象，这样有利于我们协调系统整体的行为。</li>\n<li>适配器（Adapter）适配器模式有时候也称包装样式或者包装(wrapper)。将一个类的接口转接成用户所期待的。一个适配使得因接口不兼容而不能在一起工作的类工作在一起，做法是将类自己的接口包裹在一个已存在的类中。</li>\n<li>桥接（Bridge）桥接模式将抽象部分与实现部分分离，使它们都可以独立的变化。</li>\n<li>组合（Composite）将对象组合成树形结构以表示‘部分-整体’的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</li>\n<li>修饰（Decorator）修饰模式，是面向对象编程领域中，一种动态地往一个类中添加新的行为的设计模式。 就功能而言，修饰模式相比生成子类更为灵活，这样可以给某个对象而不是整个类添加一些功能。</li>\n<li>外观（Facade）外观模式为子系统中的一组接口提供一个统一的高层接口，使得子系统更容易使用。</li>\n<li>享元（Flyweight）使用共享物件，用来尽可能减少内存使用量以及分享资讯给尽可能多的相似物件；它适合用于当大量物件只是重复因而导致无法令人接受的使用大量内存。</li>\n<li>保护代理模式（Protection Proxy）在代理模式中，创建一个类代表另一个底层类的功能。 保护代理用于限制访问。</li>\n<li>虚拟代理（Virtual Proxy）在代理模式中，创建一个类代表另一个底层类的功能。 虚拟代理用于对象的需时加载。</li>\n</ol>\n<h1 id=\"架构面试题\"><a href=\"#架构面试题\" class=\"headerlink\" title=\"架构面试题\"></a>架构面试题</h1><h2 id=\"什么是依赖注入，依赖注入主要解决什么问题？\"><a href=\"#什么是依赖注入，依赖注入主要解决什么问题？\" class=\"headerlink\" title=\"什么是依赖注入，依赖注入主要解决什么问题？\"></a>什么是依赖注入，依赖注入主要解决什么问题？</h2><p>依赖注入 (Dependency Injection, DI) 是一种编程范式，通过将依赖关系通过构造函数或其他方式显式地传递给对象来实现，而不是在对象内部通过 new 或者其他方式来创建依赖对象。<br>使用依赖注入可以有效地降低类之间的耦合度，使得类的实现更加松散，更易于测试和维护。<br>可以使用依赖注入框架来简化依赖注入的过程，比如Swift-DI,Cleanse,Dip,Injector,Swinject等。</p>\n<h2 id=\"对swift响应式编程的理解，并举例Swift中响应式编程框架有哪些？\"><a href=\"#对swift响应式编程的理解，并举例Swift中响应式编程框架有哪些？\" class=\"headerlink\" title=\"对swift响应式编程的理解，并举例Swift中响应式编程框架有哪些？\"></a>对swift响应式编程的理解，并举例Swift中响应式编程框架有哪些？</h2><p>响应式编程 (Reactive Programming) 是一种编程范式，它聚焦于对于数据流和变化的响应。在响应式编程中，开发者声明了数据流和转换，而不是编写控制流程来控制数据流。使用响应式编程可以让代码变得更简洁，易于维护和扩展。此外，还可以帮助减少常见的线程问题，如线程安全和高级同步问题。</p>\n<p>Swift 中有一些响应式编程框架可供使用，如:</p>\n<ol>\n<li>RxSwift: 这是一个用于 Swift 的响应式编程框架，它基于 ReactiveX（Rx）规范实现，提供了一组用于操作数据流和异步操作的操作符。</li>\n<li>ReactiveSwift: 一个用于 Swift 的响应式编程框架，提供了一组用于操作数据流和异步操作的函数，并且具有较好的性能。</li>\n<li>Bond: 一个轻量级的响应式编程框架，它提供了简单的数据绑定和响应式操作。</li>\n</ol>\n<h2 id=\"Swift中常见的架构模式有哪些，他们的区别是什么\"><a href=\"#Swift中常见的架构模式有哪些，他们的区别是什么\" class=\"headerlink\" title=\"Swift中常见的架构模式有哪些，他们的区别是什么\"></a>Swift中常见的架构模式有哪些，他们的区别是什么</h2><p>在Swift中MVC、MVVM、MVP是三种常见的软件架构模式。</p>\n<ol>\n<li>MVC (Model-View-Controller) 是一种将应用程序的逻辑分成三个部分的设计模式。 Model 代表数据和业务逻辑，View 是用户界面，Controller 则是用来控制 Model 和 View 之间的交互的部分。</li>\n<li>MVVM (Model-View-ViewModel) 是一种将应用程序的逻辑分成三个部分的设计模式。Model 代表数据和业务逻辑，View 是用户界面，ViewModel 则是用来控制 Model 和 View 之间的交互的部分。</li>\n<li>MVP (Model-View-Presenter) 是一种将应用程序的逻辑分成三个部分的设计模式。 Model 代表数据和业务逻辑，View 是用户界面，Presenter 则是用来控制 Model 和 View 之间的交互的部分。</li>\n</ol>\n<p>三种模式基本上相似，但是有一些细微差别，MVC中，controller 作为了view 和 model之间的中间层。而MVP 和 MVVM中 ViewModel和 Presenter 则只是起到中间层和View绑定作用。</p>\n<p>Controller 通常负责处理用户交互，解析用户输入并将其转换为操作。它还负责更新用户界面。通常，它会直接更新视图或者调用视图的更新方法。而 ViewModel 主要负责将数据模型转换为可供视图使用的格式，并且处理视图和数据模型之间的交互，进而维护View 状态。简单来说,Controller 主要处理业务逻辑和视图之间的关系，ViewModel 主要处理数据模型和视图之间的关系。</p>\n<h2 id=\"对组件化的理解，Swift中常见的组件化框架有哪些？\"><a href=\"#对组件化的理解，Swift中常见的组件化框架有哪些？\" class=\"headerlink\" title=\"对组件化的理解，Swift中常见的组件化框架有哪些？\"></a>对组件化的理解，Swift中常见的组件化框架有哪些？</h2><p>组件化框架都可以帮助开发者实现组件化开发，让应用程序的代码更好维护和管理，提高开发效率。不同框架之间可能会有一些区别，比如支持的语言、实现思想、功能特性等，需要根据项目需求和个人喜好进行选择。</p>\n<p>除了 BeeHive，还有很多其他类似的组件化框架可供选择，如:</p>\n<ol>\n<li>Typhoon: 一个基于 Objective-C 的组件化框架，提供了依赖注入、组件生命周期管理等功能，可以帮助开发者简化应用程序的组件化开发。</li>\n<li>YapTaskQueue: 一个用于 Swift 的组件化框架，提供了一组工具，帮助开发者组织和管理应用程序的组件。</li>\n<li>JLRoutes: 一个路由框架，可以帮助开发者在组件之间传递数据和调用组件的方法。</li>\n<li>Pippin : 一个基于 protocol 的轻量级的组件化框架，提供了路由、组件化、服务等功能。</li>\n<li>Router: 一个路由框架，支持解析链接并且根据链接打开相应的组件</li>\n</ol>\n<h1 id=\"算法面试题\"><a href=\"#算法面试题\" class=\"headerlink\" title=\"算法面试题\"></a>算法面试题</h1><h3 id=\"常见的排序算法有哪些，并讲解其原理\"><a href=\"#常见的排序算法有哪些，并讲解其原理\" class=\"headerlink\" title=\"常见的排序算法有哪些，并讲解其原理\"></a>常见的排序算法有哪些，并讲解其原理</h3><p>快速排序、归并排序、冒泡排序、插入排序等<br>快速排序是一种分治算法，是对冒泡排序的一种改进。它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。</p>\n<p>具体的操作流程如下：</p>\n<ol>\n<li>选取一个关键数，将数组分为两部分：比关键数小的数放到左边，大的数放到右边</li>\n<li>递归地对左右两部分数组分别进行快速排序</li>\n<li>整个排序过程结束，数组将变成有序序列</li>\n<li>快速排序是一种非常高效的排序算法，其平均时间复杂度为 O(nlogn)。因此，在实际的开发中，快速排序是一种非常常用的排序算法</li>\n</ol>\n<h3 id=\"常见的搜索算法有哪些\"><a href=\"#常见的搜索算法有哪些\" class=\"headerlink\" title=\"常见的搜索算法有哪些\"></a>常见的搜索算法有哪些</h3><p>二分查找：二分查找（Binary Search）是一种在有序数组中查找某一特定元素的查找算法。二分查找依赖于数组有序，在每次查找中，二分查找都可以将查找区间减半，直到找到要查找的元素，或者区间为空为止。</p>\n<p>DFS（深度优先搜索）：DFS 是一种图论中的搜索算法，它从一个节点开始沿着边的方向，深入图中直到所有的节点都已经被访问过为止。DFS 是一种递归算法，它沿着树或图的深度进行搜索。</p>\n<p>BFS（广度优先搜索）：BFS 是一种图论中的搜索算法，它从图的根节点开始，以层为单位进行搜索，在一层层地拓展图的节点，直到所有的节点都已经被访问过为止。BFS 是一种队列算法，它沿着树或图的宽度进行搜索。</p>\n<h3 id=\"讲一下对图算法的理解\"><a href=\"#讲一下对图算法的理解\" class=\"headerlink\" title=\"讲一下对图算法的理解\"></a>讲一下对图算法的理解</h3><p>图算法主要用于处理图形问题，是图论中的一个重要分支。下面是一些常见的图算法：</p>\n<ol>\n<li>最短路径算法：在图中找到两点间的最短路径，例如 Dijkstra 算法和 Floyd 算法。</li>\n<li>最小生成树算法：在图中找到一个生成树，并且生成树的权值和最小，例如 Prim 算法和 Kruskal 算法。</li>\n<li>图的遍历算法：在图中遍历每一个结点，例如 DFS 和 BFS。</li>\n<li>关键路径算法：在图中找到关键路径，例如 AOE 网络。</li>\n</ol>\n<p>这些算法在解决图形问题时都有各自的优势，在面试中可以做一些简单的题目来评估对这些算法的理解程度。</p>\n<h3 id=\"讲一下对动态规划算法的理解\"><a href=\"#讲一下对动态规划算法的理解\" class=\"headerlink\" title=\"讲一下对动态规划算法的理解\"></a>讲一下对动态规划算法的理解</h3><p>动态规划算法常见以下几种：</p>\n<ol>\n<li><p>背包问题：背包问题是一种经典的动态规划问题，它涉及到一个背包容积有限的问题，你需要在容积有限的情况下，选择最优的物品，使得总价值最大。</p>\n</li>\n<li><p>最长公共子序列：最长公共子序列是一种动态规划问题，它涉及到两个序列，你需要求出这两个序列的最长公共子序列。</p>\n</li>\n<li><p>编辑距离：编辑距离是一种动态规划问题，它涉及到两个字符串，你需要通过插入、删除、替换操作将一个字符串变换成另一个字符串，计算出所需要的最少操作数。</p>\n</li>\n</ol>\n<h1 id=\"逻辑面试题\"><a href=\"#逻辑面试题\" class=\"headerlink\" title=\"逻辑面试题\"></a>逻辑面试题</h1><h2 id=\"Swift的if-else-guard语句的使用和区别\"><a href=\"#Swift的if-else-guard语句的使用和区别\" class=\"headerlink\" title=\"Swift的if else guard语句的使用和区别\"></a>Swift的if else guard语句的使用和区别</h2><p>if语句是Swift中的条件语句，它按照一个特定的逻辑判断条件，如果该条件为真，则执行相关语句块。</p>\n<p>guard语句也是一种条件语句，主要用于在方法或函数开始时对参数进行验证。如果参数不符合要求，则直接从该方法或函数返回，而不需要继续执行方法体。</p>\n<p>else语句是if语句的附属语句，当if语句的条件不成立时，会执行else语句。</p>\n<h1 id=\"项目业务能力\"><a href=\"#项目业务能力\" class=\"headerlink\" title=\"项目业务能力\"></a>项目业务能力</h1><h2 id=\"开发中50人左右研发团队一般是怎么管理项目需求进度的，产品研发流程？\"><a href=\"#开发中50人左右研发团队一般是怎么管理项目需求进度的，产品研发流程？\" class=\"headerlink\" title=\"开发中50人左右研发团队一般是怎么管理项目需求进度的，产品研发流程？\"></a>开发中50人左右研发团队一般是怎么管理项目需求进度的，产品研发流程？</h2><h2 id=\"如何尽量准确的评估研发时长和交付时间节点\"><a href=\"#如何尽量准确的评估研发时长和交付时间节点\" class=\"headerlink\" title=\"如何尽量准确的评估研发时长和交付时间节点\"></a>如何尽量准确的评估研发时长和交付时间节点</h2><h1 id=\"效率工具能力\"><a href=\"#效率工具能力\" class=\"headerlink\" title=\"效率工具能力\"></a>效率工具能力</h1><h2 id=\"xcode的scheme是干嘛用的？把scheme删除项目还能编译打包吗？\"><a href=\"#xcode的scheme是干嘛用的？把scheme删除项目还能编译打包吗？\" class=\"headerlink\" title=\"xcode的scheme是干嘛用的？把scheme删除项目还能编译打包吗？\"></a>xcode的scheme是干嘛用的？把scheme删除项目还能编译打包吗？</h2><p>Xcode的scheme是用来管理和配置工程的编译、运行和调试环境的。每个工程都有一个或多个scheme，用来指定编译和运行时使用哪个target。Scheme可以帮助你配置调试环境，例如设置断点、设置环境变量、设置启动参数等。<br>删除scheme并不会对项目造成影响，但如果你删除了默认的scheme，在编译打包时就不会指定使用哪个target了，所以会导致编译或运行出错。<br>如果你使用Xcode的图形界面来编译和运行你的项目，那么删除scheme后是无法编译和运行的，因为Xcode需要一个scheme来确定编译和运行的目标。<br>但是，如果你使用Xcode的命令行工具来编译和运行你的项目，那么删除scheme后仍然可以编译和运行。<br>比如 使用 xcodebuild 命令可以在没有scheme的情况下编译和打包项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">xcodebuild -target &lt;targetName&gt; -configuration &lt;configuration&gt; -sdk &lt;sdk&gt;</span><br></pre></td></tr></table></figure>\n<p>同样的, 使用xcodebuild 命令也可以直接运行项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">xcodebuild -target &lt;targetName&gt; -configuration &lt;configuration&gt; -sdk &lt;sdk&gt; run</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"xcode中常用的快捷键有哪些？\"><a href=\"#xcode中常用的快捷键有哪些？\" class=\"headerlink\" title=\"xcode中常用的快捷键有哪些？\"></a>xcode中常用的快捷键有哪些？</h2><p>Xcode是IOS开发的主要集成开发环境(IDE)，它提供了许多常用的快捷键来帮助开发人员提高开发效率。<br>以下是一些常用的Xcode快捷键:</p>\n<ul>\n<li>Command + Shift + O: 快速打开文件</li>\n<li>Command + Shift + J: 快速打开跳转条</li>\n<li>Command + Shift + L: 快速打开查找对话框</li>\n<li>Command + R: 运行应用程序</li>\n<li>Command + .: 停止运行</li>\n<li>Command + B: 编译工程</li>\n<li>Command + Shift + K: 清除并编译工程</li>\n<li>Command + /: 注释/取消注释代码</li>\n<li>Command + Control + ↑/↓: 切换代码块</li>\n<li>Command + Option + ↑/↓: 向上/向下移动代码块</li>\n<li>Command + Option + Left/Right arrow : 在编辑器之间跳转</li>\n<li>Command + Shift + [ : 折叠代码</li>\n<li>Command + Shift + ] : 展开代码</li>\n<li>Command + Control + Click : 跳转到定义处</li>\n<li>Command + Option + Click : 在导航器中显示文件</li>\n<li>Command + Control + E : 显示/隐藏导航器</li>\n<li>Command + Control + Y : 显示/隐藏调试区</li>\n<li>Command + Control + Shift + Y : 显示/隐藏控制台</li>\n<li>Command + Shift + C : 显示代码覆盖率</li>\n</ul>\n<p>总之，在Xcode中熟练使用快捷键可以帮助开发人员提高开发效率和降低维护成本。建议您每天使用这些快捷键来练习，直到它们变得熟练自然。</p>\n","categories":["开发","前端"],"tags":["ios","面试题"]},{"title":"IOS APP 电商平台项目架构重构-工程化(三)","url":"/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/IOS-APP-%E7%94%B5%E5%95%86%E5%B9%B3%E5%8F%B0%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84%E9%87%8D%E6%9E%84-%E5%B7%A5%E7%A8%8B%E5%8C%96-%E4%B8%89.html","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p><strong>在 iOS 开发中，通常可以使用以下方案来提升工程化水平：</strong></p>\n<ol>\n<li>使用自动化构建工具，如 Xcode Server、Fastlane、Jenkins 等，来自动完成构建、测试、打包和发布等任务。</li>\n<li>使用版本控制工具，如 Git、SVN 等，来管理代码版本和协同开发。</li>\n<li>使用依赖管理工具，如 CocoaPods、Carthage 等，来管理第三方库的依赖。</li>\n<li>使用自动化测试工具，如 XCTest、KIF 等，来保证代码质量和稳定性。</li>\n<li>使用代码风格工具，如 SwiftLint、OCLint 等，来统一代码风格。</li>\n<li>使用静态分析工具，如 SonarQube、Coverity 等，来检测代码质量和潜在问题。</li>\n<li>使用自动化部署工具，如 Fabric、HockeyApp 等，来自动部署应用到测试环境或生产环境。<span id=\"more\"></span></li>\n</ol>\n<h2 id=\"Xcode工程分析\"><a href=\"#Xcode工程分析\" class=\"headerlink\" title=\"Xcode工程分析\"></a>Xcode工程分析</h2><h3 id=\"Xcode本质\"><a href=\"#Xcode本质\" class=\"headerlink\" title=\"Xcode本质\"></a>Xcode本质</h3><p>Xcode本质是一个终端<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.patpat.site/mweb/16733226815361.jpg\"\n                     \n                ></p>\n<p>如图所示，iOS工程本质上都是通过workspace进行管理的，可以理解成他提供了一个工作空间，这个工作空间可能管理了多个项目。每个项目有对应的产物，而target就代表不同的产物。每个项目要通过配置管理不同target，这个配置管理我们比较熟悉的就是Debug和Release。<br>总结一下：workspace引入了project文件，project管理了target，管理的target又是通过config来管理该target的配置。</p>\n<p>project、workspace、target、configuration之间的关系我们已经梳理明白了，那么schema又是什么，编译一定需要schema吗？ 如果我们把schema删掉，xcode上的运行按钮就没有了，是不是就不能编译了？</p>\n<p>scheme是存在.xcodeproj文件里面，根据share是否勾选存在不同文件夹下。<br>工程管理<br>Scheme定义了要各个action使用的Target集合、以及要使用的配置以及 环境变量等等。<br>Target指定Product，并包含从prodect或workspace的一组文件。一个target只能有一个产物。</p>\n<h3 id=\"编译命令\"><a href=\"#编译命令\" class=\"headerlink\" title=\"编译命令\"></a>编译命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">xcodebuild -workspace SJWorkspace.xcworkspace -scheme SJTarget -showBuildSettings -json</span><br><span class=\"line\"></span><br><span class=\"line\">xcodebuild -project SJProject.xcodeproj -scheme SJTarget -showBuildSettings -json</span><br><span class=\"line\"></span><br><span class=\"line\">xcodebuild -project SJProject.xcodeproj -target SJTarget -showBuildSettings -json</span><br><span class=\"line\"></span><br><span class=\"line\">xcodebuild -project SJProject.xcodeproj -scheme SJTarget -showBuildSettings -json -configuration Debug -destination generic&#x2F; platform&#x3D;&quot;iOS Simulator&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上面命令都可以编译成功。默认编译环境是真机，不指定的话会报签名错误。<br>xcodebuild -workspace SJWorkspace.xcworkspace -target SJTarget 这个命令不能编译成功，workspace只是管理project提供一个工作空间，workspace要生成产物只能通过scheme去生成。</p>\n<h3 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h3><p>xcode生成的产物为什么在指定目录下？可以通过Product -&gt; Show Build Folder in Finder看到产物生成的目录。为什么在这个目录，不是其他目录？这是有配置的，打开File -&gt; Workspace Settings…</p>\n","categories":["开发","前端"],"tags":["ios","swift","ios架构"]},{"title":"Unocss的主题设置和基本应用技巧","url":"/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/Unocss%E7%9A%84%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE%E5%92%8C%E5%9F%BA%E6%9C%AC%E5%BA%94%E7%94%A8%E6%8A%80%E5%B7%A7.html","content":"<h1 id=\"Unocss的主题应用\"><a href=\"#Unocss的主题应用\" class=\"headerlink\" title=\"Unocss的主题应用\"></a>Unocss的主题应用</h1><p>Unocss 是一个原子 CSS 引擎，它可以高度定制并优化您的 CSS 输出。使用 Unocss 时，您可以通过主题功能来定义和应用一致的样式变量，例如颜色、字体、间距等，从而保持整个项目的设计一致性。</p>\n<h2 id=\"如何在-Unocss-中设置和使用主题\"><a href=\"#如何在-Unocss-中设置和使用主题\" class=\"headerlink\" title=\"如何在 Unocss 中设置和使用主题\"></a>如何在 Unocss 中设置和使用主题</h2><ol>\n<li>安装 Unocss<br>首先，确保您已经将 Unocss 添加到您的项目中。如果尚未添加，可以通过以下命令使用 npm 或 yarn 安装它：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -D unocss</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yarn add -D unocss</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n<ol start=\"2\">\n<li>配置 Unocss<br>在 Vue 项目中，通常在 vite.config.js 或类似的配置文件中设置 Unocss。这里是如何配置 Unocss，并定义一些基本的主题变量：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vite.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineConfig &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vite&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@vitejs/plugin-vue&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Unocss <span class=\"keyword\">from</span> <span class=\"string\">&#x27;unocss/vite&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> defineConfig(&#123;</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    Vue(),</span><br><span class=\"line\">    Unocss(&#123;</span><br><span class=\"line\">      theme: &#123;</span><br><span class=\"line\">        colors: &#123;</span><br><span class=\"line\">          brand: <span class=\"string\">&#x27;#5e81ac&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">&#x27;brand-light&#x27;</span>: <span class=\"string\">&#x27;#81a1c1&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">&#x27;brand-dark&#x27;</span>: <span class=\"string\">&#x27;#4c566a&#x27;</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        fontFamily: &#123;</span><br><span class=\"line\">          sans: <span class=\"string\">&#x27;Roboto, sans-serif&#x27;</span>,</span><br><span class=\"line\">          serif: <span class=\"string\">&#x27;Merriweather, serif&#x27;</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// 更多 Unocss 配置项</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>使用主题变量<br>在项目中，您现在可以使用定义好的主题变量。例如，要在组件中应用这些颜色和字体，您可以直接引用您的配置名称：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;font-sans bg-brand text-brand-dark p-4&quot;&gt;</span><br><span class=\"line\">    Welcome to our website styled with Unocss!</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><p>生成主题的实用工具类<br>Unocss 会根据您的配置自动生成相关的实用工具类。这意味着您可以直接在 HTML 或 Vue 模板中使用例如 bg-brand, text-brand-dark 等类名。</p>\n</li>\n<li><p>动态主题切换<br>如果您想在运行时切换主题，您可能需要动态修改 CSS 变量。这通常涉及到在一个更高的层级（如 :root 或 body）上动态设置 CSS 变量，并让 Unocss 使用这些变量：</p>\n</li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 全局样式文件 */</span></span><br><span class=\"line\"><span class=\"selector-pseudo\">:root</span> &#123;</span><br><span class=\"line\">  --<span class=\"attribute\">color</span>-brand: <span class=\"number\">#5e81ac</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[data-theme=<span class=\"string\">&quot;dark&quot;</span>]</span> &#123;</span><br><span class=\"line\">  --<span class=\"attribute\">color</span>-brand: <span class=\"number\">#4c566a</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>然后在 Unocss 配置中使用这些 CSS 变量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">theme: &#123;</span><br><span class=\"line\">  colors: &#123;</span><br><span class=\"line\">    brand: <span class=\"string\">&#x27;var(--color-brand)&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["开发","前端"],"tags":["vue","unocss"]}]